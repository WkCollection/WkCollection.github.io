<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CMake学习</title>
    <url>/2023/04/24/CMake/</url>
    <content><![CDATA[<h1 id="CMake学习"><a href="#CMake学习" class="headerlink" title="CMake学习"></a>CMake学习</h1><blockquote>
<p>学习如何使用CMake进行构建</p>
</blockquote>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><blockquote>
<p>CMake 是一套工具，涵盖了从创建构建到生产，以及发布的一切操作。不仅涵盖了从头到尾的流程，还有广泛的平台、工具和语言支持。</p>
</blockquote>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>CMake完整的构建流程如下图所示:<br><img src="/../img/CMake/CMake%E6%9E%84%E5%BB%BA%E6%B5%81%E7%A8%8B.png" class="lazyload placeholder" data-srcset="/../img/CMake/CMake%E6%9E%84%E5%BB%BA%E6%B5%81%E7%A8%8B.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="CMake构建流程"><br>首先需要对项目进行描述，并生成特定于平台的项目文件，这些文件与开发人员选择的构建工具 (例如make、Xcode、Visual Studio等)适配。这是CMake有名的设置阶段，CMake工具套件还包括 CTest 和 CPack，分别用于管理测试和打包。</p>
<p>源目录和二进制目录概念是CMake的基础。源目录是CMakeLists.txt文件所在的文件夹，项目的源文件和构建所需的其他文件都组织在该位置下。二进制目录是生成构建内容的地方，通常称为构建目录。</p>
<p>CMake还在构建目录中创建一个CMakeCache.txt的特殊文件，存储各种信息，以便在后续运行时重用。CMakeLists.txt文件是项目的描述，生成的项目文件应该视为构建输出。开发人员处理项目需要确定构建目录相对于源目录的位置。有两种方式：源内构建和源外构建。</p>
<h4 id="源内构建"><a href="#源内构建" class="headerlink" title="源内构建"></a>源内构建</h4><p>源目录和构建目录可以相同，但不推荐这样做，这种方式称为源内构建。内源构建的主要问题在于，构建输出与源文件混杂在一起。这种缺乏分离的方式导致目录与各种文件和目录混杂在一起，使得项目管理变得非常困难，并有着构建输出覆盖源文件的风险。这种方式还使版本控制系统的工作难度增加，因为有许多由构建创建的文件，源代码控制工具必须知道要忽略哪些文件，或者在提交时手动排除这些文件。源内构建的另一个缺点是，清除所有构建输出并使用干净的源重新开发非常困难。由于这些原因，不推荐开发人员在任何的情况下使用源内构建方式进行构建。</p>
<h4 id="源外构建"><a href="#源外构建" class="headerlink" title="源外构建"></a>源外构建</h4><p>更可取的方式是让源目录和构建目录不同，这称为源外构建。这使得源文件和构建输出完全分离，从而避免了混合问题。源外构建还有一个优势，开发人员可以为同一个源目录创建多个构建目录，这就允许使用不同的选项设置构建项目，比如：Debug和Release版本等等。如图：<br><img src="/../img/CMake/%E6%BA%90%E5%A4%96%E6%9E%84%E5%BB%BA%E6%96%B9%E5%BC%8F.png" class="lazyload placeholder" data-srcset="/../img/CMake/%E6%BA%90%E5%A4%96%E6%9E%84%E5%BB%BA%E6%96%B9%E5%BC%8F.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="CMake构建流程"></p>
<h4 id="生成项目文件"><a href="#生成项目文件" class="headerlink" title="生成项目文件"></a>生成项目文件</h4><p>开发人员通过选择生成器来选择要创建的项目文件。 CMake 支持一系列生成器，下图列出了常用的生成器：<br><img src="/../img/CMake/%E5%B8%B8%E7%94%A8%E7%94%9F%E6%88%90%E5%99%A8.png" class="lazyload placeholder" data-srcset="/../img/CMake/%E5%B8%B8%E7%94%A8%E7%94%9F%E6%88%90%E5%99%A8.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="CMake构建流程"><br>一些生成器支持多种配置(如Debug、Release等)，其允许开发者在不同的配置中进行选择，不必重新运行CMake，CMake很适合为Xcode和Visual  Studio等IDE生成项目文件。对于不支持多配置的生成器，开发人员必须重新运行 CMake 在 Debug、 Release 等之间切换构建方式。运行 CMake 最基本的方法是通过CMake命令行。调用它的最简单方法是将目录切换到 build目录，并将生成器类型和源树位置的选项传递给CMake。例如:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> build
<span class="token builtin class-name">cd</span> build
cmake -G <span class="token string">" Unix  Makefiles "</span> <span class="token punctuation">..</span>/ <span class="token builtin class-name">source</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>若省略了-G选项， CMake 将根据平台选择默认的生成器类型。</p>
<p>对于所有的生成器类型，CMake将执行测试并询问系统，以确定如何建立项目文件。这包括验证编译器是否工作、确定支持的编译器特性集和其他各种任务。</p>
<p>上面展示了项目文件的创建时的两个步骤：配置和生成。在配置阶段，CMake 读取 CMakeLists.txt文件，并构建整个项目的内部表示文件。完成这些之后，生成阶段将创建项目文件。</p>
<h4 id="运行构建工具"><a href="#运行构建工具" class="headerlink" title="运行构建工具"></a>运行构建工具</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cmake --build /some/path/build --config Debug --target MyApp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这种方式更适用于常用IDE的开发人员，–build选项指向CMake项目生成的构建目录。对于多个配置，–config选项指定要构建哪个配置，而单个配置生成器将忽略–config选项，而依赖于执行 CMake项目生成时的信息。–target选项可以用来告诉构建工具要构建什么目标，如果省略该选项，将构建默认目标。</p>
<h2 id="深度构建"><a href="#深度构建" class="headerlink" title="深度构建"></a>深度构建</h2><h2 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>CMake</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言突破</title>
    <url>/2022/07/11/C/</url>
    <content><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><blockquote>
<p>C语言相关知识点深入理解</p>
</blockquote>
<h2 id="第一关：C和指针"><a href="#第一关：C和指针" class="headerlink" title="第一关：C和指针"></a>第一关：C和指针</h2><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><p>整型分为有符号和无符号。</p>
<p>整型值相互之间的规则是：长整型至少应该和整型一样长，而整型至少应该和短整型一样长。</p>
<h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><p>浮点数在缺省情况下都是double类型的，加L或l表示为long double类型的，或者加F或f表示是float类型的值。</p>
<h3 id="宽字符常量"><a href="#宽字符常量" class="headerlink" title="宽字符常量"></a>宽字符常量</h3><p>如果一个多字节字符常量前面带有一个L，那么他就是宽字符常量。例如：<code>L‘X’</code></p>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><h4 id="代码块作用域"><a href="#代码块作用域" class="headerlink" title="代码块作用域"></a>代码块作用域</h4><p>位于一对花括号之间的所有语句都称为一个代码块，任何在代码块的开始位置声明的标识符都具有代码块作用域。</p>
<h4 id="文件作用域"><a href="#文件作用域" class="headerlink" title="文件作用域"></a>文件作用域</h4><p>任何在所有代码块之外声明的标识符都具有文件作用域。</p>
<h4 id="原型作用域"><a href="#原型作用域" class="headerlink" title="原型作用域"></a>原型作用域</h4><p>原型作用域只适用于在函数原型中声明的参数名。</p>
<h4 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h4><p>函数作用域只适用于语句标签，指在函数内声明的所有变量在函数体内始终是可见的,可以在整个函数的范围内使用及复用。</p>
<h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><p>枚举类型的实质是以整型形式进行存储的，符号名其实都是整型值。如果某个符号未显式复制那个他的值就比前面的一个符号名的值大1。第一个未命名的初始化为0。</p>
<h3 id="可变参数列表"><a href="#可变参数列表" class="headerlink" title="可变参数列表"></a>可变参数列表</h3><p>可变参数列表是通过stdarg宏实现的，位于stdarg.h头文件。函数声明了一个var_arg的变量，用于访问参数列表未确定部分，通过调用va_start来初始化，第一个参数是va_list变量的名字，第二个参数是省略号前最后一个有名字的参数。为了访问这个参数，需要使用va_arg这个宏，这个宏接受两个参数，va_list和参数列表中下一个参数的类型。访问完毕后使用va_end函数。</p>
<h3 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h3><p>K&amp;R C并没有提及一个字符串常量中的字符是否可以被修改，但是其表明具有相同值的不同字符在内存中是分开存储的，因此许多编译器运行程序修改字符串常量。</p>
<p>ANSI C则表明如果对一个字符串常量进行修改，效果是未定义的。他也允许编译器将一个字符串常量存储于一个地方，即使其在一个程序中多次出现。因此许多ANSI C编译器不允许修改字符串常量。</p>
<p>字符串常量在程序中使用会生成一个”指向字符的常量指针”。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>message <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>
<span class="token comment">/*等价于
char *message;
message = “Hello”;
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="指针与常量"><a href="#指针与常量" class="headerlink" title="指针与常量"></a>指针与常量</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token keyword">const</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment">//可以修改指针的值，无法修改指针指向的值</span>
<span class="token keyword">int</span> <span class="token operator">*</span> <span class="token keyword">const</span> p1<span class="token punctuation">;</span><span class="token comment">//指针为常量无法修改，指针指向的值可以修改</span>
<span class="token keyword">int</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p2<span class="token punctuation">;</span><span class="token comment">//指针的指向和指针指向的值都不可以改变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<h3 id="链接属性"><a href="#链接属性" class="headerlink" title="链接属性"></a>链接属性</h3><ol>
<li><h5 id="external：无论被声明多少次，位于不同源文件的都表示同一个实体"><a href="#external：无论被声明多少次，位于不同源文件的都表示同一个实体" class="headerlink" title="external：无论被声明多少次，位于不同源文件的都表示同一个实体"></a>external：无论被声明多少次，位于不同源文件的都表示同一个实体</h5></li>
<li><h5 id="internal：在同一个源文件内的所有声明中都指向同一个实体，不同源文件属于不同实体"><a href="#internal：在同一个源文件内的所有声明中都指向同一个实体，不同源文件属于不同实体" class="headerlink" title="internal：在同一个源文件内的所有声明中都指向同一个实体，不同源文件属于不同实体"></a>internal：在同一个源文件内的所有声明中都指向同一个实体，不同源文件属于不同实体</h5></li>
<li><h5 id="none：总是被当做单独的个体"><a href="#none：总是被当做单独的个体" class="headerlink" title="none：总是被当做单独的个体"></a>none：总是被当做单独的个体</h5></li>
</ol>
<p><code>关键字extern和static可用来修改链接属性，使用static可以使得链接属性变为internal,但是只对缺省的external有效</code></p>
<p><code>当extern关键字用于标识符第一次声明，指定有external属性，用于变量第二次或以后的声明则不会更改第一次声明的链接属性</code></p>
<h3 id="编译和链接"><a href="#编译和链接" class="headerlink" title="编译和链接"></a>编译和链接</h3><ol>
<li><p>编译一个源文件main.c</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc main.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>会产生一个a.exe的可执行程序</p>
</li>
<li><p>编译并链接几个C源文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc main.c hello.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>编译一个源文件并把其和现存文件链接在一起</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc main.o hello.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>编译单个C源文件，并产生目标文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -c main.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>编译几个C源文件，并为每个文件产生一个目标文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -c main.c hello.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<h3 id="存储类型"><a href="#存储类型" class="headerlink" title="存储类型"></a>存储类型</h3><p>凡是存在于任何代码块之外声明的变量总是存储于静态内存中，即存储在全局区中，存在于全局区的变量于程序运行前创建，在程序执行的整个期间始终存在，始终保持原来的值，除非赋新的值。</p>
<p>在代码块内部声明的变量的缺省类型是自动的，存储于堆栈中，<code>在程序执行到声明的变量时，该变量才被创建，当程序的执行离开代码块时，该变量被销毁</code>。在代码块内部给声明的变量加上static可以让变量放到全局区内去，但是该变量的作用域依旧不变。</p>
<p>register关键字可以用于自动变量的声明，表示这个变量应该存储于寄存器中而不是内存中，也被称为寄存器变量。通常寄存器变量比内存的变量访问效率更高，但是寄存器不一定会理睬寄存器变量，只会选取前几个实际存储于寄存器中。</p>
<h3 id="指向数组的指针"><a href="#指向数组的指针" class="headerlink" title="指向数组的指针"></a>指向数组的指针</h3><p>int	(*p)[10]表示声明了一个指向带有10个整型的数组的指针。</p>
<h3 id="字符串常用函数"><a href="#字符串常用函数" class="headerlink" title="字符串常用函数"></a>字符串常用函数</h3><h4 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>msg <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>
<span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"msg的长度是:%d\n"</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="复制字符串"><a href="#复制字符串" class="headerlink" title="复制字符串"></a>复制字符串</h4><p><code>strcpy</code>返回目标函数的一个拷贝</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>msg <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> copy<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">strcpy</span><span class="token punctuation">(</span>copy<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"copy数组内为:%s\n"</span><span class="token punctuation">,</span> copy<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="连接字符串"><a href="#连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> str3<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"I Love "</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> str4<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"China"</span><span class="token punctuation">;</span>
<span class="token function">strcat</span><span class="token punctuation">(</span>str3<span class="token punctuation">,</span> str4<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str3为:%s\n"</span><span class="token punctuation">,</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"bceg"</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abceg"</span><span class="token punctuation">;</span>
<span class="token keyword">int</span>  result <span class="token operator">=</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str大于str1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str小于str1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str等于str1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="内存操作"><a href="#内存操作" class="headerlink" title="内存操作"></a>内存操作</h3><h4 id="memcpy：void-memcpy-void-dest-const-void-src-size-t-count"><a href="#memcpy：void-memcpy-void-dest-const-void-src-size-t-count" class="headerlink" title="memcpy：void* memcpy( void *dest, const void *src, size_t count );"></a>memcpy：<code>void* memcpy( void *dest, const void *src, size_t count );</code></h4><p>从 <code>src</code> 所指向的对象复制 <code>count</code> 个字节到 <code>dest</code> 所指向的对象。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> msg<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello World~"</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> msgDst<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">memcpy</span><span class="token punctuation">(</span>msgDst<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"msgDst is %s\n"</span><span class="token punctuation">,</span> msgDst<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="memmove：void-memmove-void-dest-const-void-src-size-t-count"><a href="#memmove：void-memmove-void-dest-const-void-src-size-t-count" class="headerlink" title="memmove：void* memmove( void* dest, const void* src, size_t count );"></a>memmove：<code>void* memmove( void* dest, const void* src, size_t count );</code></h4><p> 从 <code>src</code> 所指向的对象复制 <code>count</code> 个字节到 <code>dest</code> 所指向的对象。与memcpy不同的是，memmove的源和目标数可以重叠。也就是说<code>src</code>和<code>dest</code>可以相同。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> msgSrc<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> msgDstTwo<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">memmove</span><span class="token punctuation">(</span>msgDstTwo<span class="token punctuation">,</span> msgSrc<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"msgDstTwo is %s\n"</span><span class="token punctuation">,</span> msgDstTwo<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="memcmp：int-memcmp-const-void-lhs-const-void-rhs-size-t-count"><a href="#memcmp：int-memcmp-const-void-lhs-const-void-rhs-size-t-count" class="headerlink" title="memcmp：int memcmp( const void* lhs, const void* rhs, size_t count );"></a>memcmp：<code>int memcmp( const void* lhs, const void* rhs, size_t count );</code></h4><p>比较 <code>lhs</code> 和 <code>rhs</code> 所指向对象的首 <code>count</code> 个字节。如果<code>lhs</code>小于<code>rhs</code>则小于0；如果<code>lhs</code>大于<code>rhs</code>则大于0;如果<code>lhs</code>等于<code>rhs</code>则等于0。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> info<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hi,I am Tom"</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> infoTwo<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hi,I am Tom"</span><span class="token punctuation">;</span>
<span class="token keyword">int</span>  result <span class="token operator">=</span> <span class="token function">memcmp</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> infoTwo<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"info大于infoTwo\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"info小于infoTwo\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"info等于infoTwo\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="memchr：void-memchr-const-void-ptr-int-ch-size-t-count"><a href="#memchr：void-memchr-const-void-ptr-int-ch-size-t-count" class="headerlink" title="memchr：void* memchr( const void* ptr, int ch, size_t count );"></a>memchr：<code>void* memchr( const void* ptr, int ch, size_t count );</code></h4><p>从<code>ptr</code>的起始位置开始查找<code>ch</code>的首次出现的位置，返回一个指向该位置的指针。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> info<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hi,I am Tom"</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">memchr</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*p is %s\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="memset：void-memset-void-dest-int-ch-size-t-count"><a href="#memset：void-memset-void-dest-int-ch-size-t-count" class="headerlink" title="memset：void *memset( void *dest, int ch, size_t count );"></a>memset：<code>void *memset( void *dest, int ch, size_t count );</code></h4><p>从 <code>dest</code>开始的<code>count</code>个字节都设置为<code>ch</code> 。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> zero<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">memset</span><span class="token punctuation">(</span>zero<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>zero<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>zero<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>zero<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"zero[%d] = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> zero<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h3><p>动态内存分配两个主要的函数<code>malloc</code>和<code>free</code>。</p>
<p><code>malloc</code>和<code>calloc</code>都用于分配内存，区别在于后者在返回指向内存的指针前会将其初始化为0。</p>
<h2 id="第二关：C陷阱与缺陷"><a href="#第二关：C陷阱与缺陷" class="headerlink" title="第二关：C陷阱与缺陷"></a>第二关：C陷阱与缺陷</h2><h3 id="词法陷阱"><a href="#词法陷阱" class="headerlink" title="词法陷阱"></a>词法陷阱</h3><h4 id="x3D-不等于-x3D-x3D"><a href="#x3D-不等于-x3D-x3D" class="headerlink" title="&#x3D;不等于&#x3D;&#x3D;"></a>&#x3D;不等于&#x3D;&#x3D;</h4><h4 id="amp-和-不同于-amp-amp-和"><a href="#amp-和-不同于-amp-amp-和" class="headerlink" title="&amp;和|不同于&amp;&amp;和||"></a>&amp;和|不同于&amp;&amp;和||</h4><p>&amp;和I常用于位运算，&amp;&amp;和||则常用语进行逻辑运算。</p>
<h4 id="词法分析的贪心法"><a href="#词法分析的贪心法" class="headerlink" title="词法分析的贪心法"></a>词法分析的贪心法</h4><p>贪心法就是指如果输入的数据截止到某个字符之前已经被分解为一个个符号，那么下一个符号也将包括从该字符之后可能组成的一个符号的最长字符串。</p>
<h4 id="整型常量"><a href="#整型常量" class="headerlink" title="整型常量"></a>整型常量</h4><p>如果整型常量第一个字符是0，那么这个常量被视为八进制数。</p>
<h4 id="字符与字符串"><a href="#字符与字符串" class="headerlink" title="字符与字符串"></a>字符与字符串</h4><p>用双引号引起的字符串，代表的是一个指向无名数组起始字符的指针，而单引号引起的字符实际上是一个整数。</p>
<h2 id="第三关：C专家编程"><a href="#第三关：C专家编程" class="headerlink" title="第三关：C专家编程"></a>第三关：C专家编程</h2><h3 id="第一章穿越时空的迷雾"><a href="#第一章穿越时空的迷雾" class="headerlink" title="第一章	穿越时空的迷雾"></a>第一章	穿越时空的迷雾</h3><p>C语言的诞生历史非常有趣，C语言诞生于一个失败的项目。1969年通用电气、麻省理工和贝尔实验室创立了一个庞大的项目——Multics工程。项目目标是建立一个操作系统，但是最终以失败告终。</p>
<h4 id="根据编译器设计者的思路形成的语言特性"><a href="#根据编译器设计者的思路形成的语言特性" class="headerlink" title="根据编译器设计者的思路形成的语言特性"></a>根据编译器设计者的思路形成的语言特性</h4><ol>
<li><p>数组下标从0而不是1开始</p>
</li>
<li><p>C语言的基本数据类型直接与底层硬件相关</p>
<p> C语言并不时一开始就支持浮点数的，是因为硬件系统能够支持浮点数后才增加了对浮点数的支持。</p>
</li>
<li><p>auto关键字显然是摆设</p>
<p> auto其实就是缺省的变量内存分配模式。</p>
</li>
<li><p>表达式中的数组可以看作指针</p>
<p> 这样做的好处就是将数组传递给函数时就不用再将数组所有的内容复制一遍。</p>
</li>
<li><p>float被自动拓展为double</p>
</li>
<li><p>不允许使用嵌套函数（主要指的是函数的内部包含另一个函数的定义）</p>
</li>
<li><p>register关键字</p>
<p> 这个关键字主要是用于程序中那些经常被使用的变量。</p>
</li>
</ol>
<p>1978年，C语言经典著作《The C Programming Language》出版了。这本受到了广泛的赞誉，所以其作者Brian Kernighan和Dennis Ritchie出名了，因此这个版本的C语言被称为K&amp;R C。</p>
<p>1989年12月，C语言标准草案最终呗ANSI委员会接纳，随后ISO也接纳了ANSI C标准。我们常说的标准C其实就是ISO C。</p>
<h4 id="如何写出可移植的代码"><a href="#如何写出可移植的代码" class="headerlink" title="如何写出可移植的代码"></a>如何写出可移植的代码</h4><ol>
<li>只使用已确定的特性</li>
<li>不突破任何由编译器实现的限制</li>
<li>不产生任何依赖由编译器定义的或未确定的或未定义的特性的输出</li>
</ol>
<h3 id="第二章这不是Bug，而是语言特性"><a href="#第二章这不是Bug，而是语言特性" class="headerlink" title="第二章	这不是Bug，而是语言特性"></a>第二章	这不是Bug，而是语言特性</h3><p><code>NUL与NULL的区别</code></p>
<ol>
<li>NUL用于表示’\0’</li>
<li>NULL用于表示什么也不指向（空指针）</li>
</ol>
<p>ANSI新特性：</p>
<ul>
<li>相邻的字符串常量被自动合并成一个字符串</li>
</ul>
<p><code>当sizeof的操作数是类型名时。两边必须加上括号，如果操作数是变量则不必加括号</code></p>
<h3 id="第三章分析C语言的声明"><a href="#第三章分析C语言的声明" class="headerlink" title="第三章	分析C语言的声明"></a>第三章	分析C语言的声明</h3><p>枚举类型和宏定义相比有一个优点：宏定义一般在编译时会被丢掉但是枚举类型在调试器中是可见的，尽量使用枚举类型。</p>
<h4 id="理解C语言声明的优先级规则"><a href="#理解C语言声明的优先级规则" class="headerlink" title="理解C语言声明的优先级规则"></a>理解C语言声明的优先级规则</h4><ol>
<li>声明从名字开始，然后按照优先级顺序依次读取</li>
<li>优先级从高到低依次为：<ul>
<li>声明中被括号括起来的部分</li>
<li>后缀操作符：括号（）表示这是一个函数，而方括号[]表示这是一个数组</li>
<li>前缀操作符：星号*表示“指向…的指针”</li>
</ul>
</li>
<li>如果const和volatie关键字的后面紧跟类型说明符如（int，long等），那么它作用于类型说明符。在其他情况下，const和volatile关键字作用于其左边紧邻的指针星号。</li>
</ol>
<h4 id="typedef和define的区别"><a href="#typedef和define的区别" class="headerlink" title="typedef和define的区别"></a>typedef和define的区别</h4><ol>
<li><p>可以用其他类型说明符对宏类型进行拓展，但是对于typedef所定义的类型名却不能</p>
<pre class="line-numbers language-C" data-language="C"><code class="language-C">#define peach int 
unsigned peach int;
typedef int banana;
&#x2F;&#x2F;下面的写法错误
&#x2F;&#x2F;unsigned banana i;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>在连续的几个变量声明中，用typedef所定义类型能保证声明中所有变量均为同一种类型，define则不行。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int_ptr</span> <span class="token expression"><span class="token keyword">int</span> <span class="token operator">*</span></span></span>
int_ptr chalk<span class="token punctuation">,</span>chese<span class="token punctuation">;</span>
<span class="token comment">//经过宏拓展</span>
<span class="token keyword">int</span> <span class="token operator">*</span>chalk<span class="token punctuation">,</span>chese<span class="token punctuation">;</span><span class="token comment">//两者类型不一致</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>typedef的用法:</p>
<ul>
<li>数组、指针、结构以及函数的组合类型</li>
<li>可移植类型上</li>
</ul>
</li>
</ol>
<h3 id="第四章数组和指针并不相同"><a href="#第四章数组和指针并不相同" class="headerlink" title="第四章	数组和指针并不相同"></a>第四章	数组和指针并不相同</h3><h4 id="定义和声明的区别"><a href="#定义和声明的区别" class="headerlink" title="定义和声明的区别"></a>定义和声明的区别</h4><p>声明相当于普通的声明：他所说的并非自身，而是描述其他地方的创建的对象</p>
<p>定义相当于特殊的声明：它为对象分配内存</p>
<h3 id="第五章对链接的思考"><a href="#第五章对链接的思考" class="headerlink" title="第五章	对链接的思考"></a>第五章	对链接的思考</h3><p>绝大多数编译器是由多达六七个小程序组成，这些程序都是又一个叫作编译器程序驱动器的控制程序来调用。可以单独从编译器分离出来的单独程序包括：预处理器、语法和语义检查器、代码生成器、汇编程序、优化器、链接器和一个调用这些程序并向各个程序传递正确选项的驱动器程序。</p>
<p>动态链接的主要目的就是把程序与他们所使用的特定函数库版本分离开来，取而代之的是，我们约定由系统向程序提供一个接口，该接口保持稳定，不随时间和操作系统的后续版本发生变化。</p>
<h4 id="动态链接可以从两个方面提高性能"><a href="#动态链接可以从两个方面提高性能" class="headerlink" title="动态链接可以从两个方面提高性能"></a>动态链接可以从两个方面提高性能</h4><ol>
<li>动态连接可执行文件比功能相同的静态链接可执行文件体积小</li>
<li>所有动态链接到某个特定函数库的可执行文件在运行时共享该函数库的一个单独拷贝</li>
</ol>
<h4 id="函数库链接的5个秘密"><a href="#函数库链接的5个秘密" class="headerlink" title="函数库链接的5个秘密"></a>函数库链接的5个秘密</h4><ol>
<li>动态库文件的拓展名是“.so”,而静态库文件的拓展名“.a”</li>
<li>可以通过-lthread选项链接到libthread.so文件</li>
<li>编译器在期望的确定的目录找到库</li>
<li>通过头文件，确认所使用的函数库</li>
<li>与提取动态库的符号相比，静态库中符号的提取更为严格</li>
</ol>
<p><code>始终将-l函数库选项放在编译命令行的最右边</code></p>
<h3 id="第六章运动的诗章，运行时数据结构"><a href="#第六章运动的诗章，运行时数据结构" class="headerlink" title="第六章	运动的诗章，运行时数据结构"></a>第六章	运动的诗章，运行时数据结构</h3><h4 id="a-out的由来"><a href="#a-out的由来" class="headerlink" title="a.out的由来"></a>a.out的由来</h4><p>a.out是<code>assembler output</code>的缩写，但其实它不是汇编输出，而是链接器输出！保留这个名字属于历史原因。原来在PDP-7尚并不存在链接器，程序是先将所有的源文件链接在一起，然后进行汇编，汇编所产生的程序输出保存在a.out中。后面为PDP-11编写了链接器后，最后一个环节的输出文件依旧沿用了这个命名习惯。</p>
<h4 id="段"><a href="#段" class="headerlink" title="段"></a>段</h4><p>目标文件和可执行文件可以有多种不同的格式，但是这些格式有一个共同的概念，那就是段（Segments）。一个段中包含几个section。</p>
<p>在UNIX中一个段就是表示一个二进制文件相关的内容块，而在Inter X86的内存模型中，段表示一种设计的结果。在这种设计中，地址空间并非一个整体，而是分成一些64K大小的区域，称之为段。当一个可执行文件中运行size命令时，它会告诉你这个文件中的三个段（文本段，数据段和bss段）。BSS段只保存没有值的变量，所以事实上它无需保存这些变量的映像。</p>
<h2 id="第四关：数据结构与算法分析"><a href="#第四关：数据结构与算法分析" class="headerlink" title="第四关：数据结构与算法分析"></a>第四关：数据结构与算法分析</h2><h3 id="第一章链表、栈和队列"><a href="#第一章链表、栈和队列" class="headerlink" title="第一章	链表、栈和队列"></a>第一章	链表、栈和队列</h3><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><h3 id="第二章树"><a href="#第二章树" class="headerlink" title="第二章	树"></a>第二章	树</h3><h3 id="第三章散列表"><a href="#第三章散列表" class="headerlink" title="第三章	散列表"></a>第三章	散列表</h3><h3 id="第四章优先队列"><a href="#第四章优先队列" class="headerlink" title="第四章	优先队列"></a>第四章	优先队列</h3><h3 id="第五章排序"><a href="#第五章排序" class="headerlink" title="第五章	排序"></a>第五章	排序</h3><h3 id="第六章不相交集"><a href="#第六章不相交集" class="headerlink" title="第六章	不相交集"></a>第六章	不相交集</h3><h3 id="第七章图"><a href="#第七章图" class="headerlink" title="第七章	图"></a>第七章	图</h3><h3 id="第八章算法设计技巧"><a href="#第八章算法设计技巧" class="headerlink" title="第八章	算法设计技巧"></a>第八章	算法设计技巧</h3><h3 id="第九章摊还分析"><a href="#第九章摊还分析" class="headerlink" title="第九章	摊还分析"></a>第九章	摊还分析</h3><h3 id="第十章高级数据结构"><a href="#第十章高级数据结构" class="headerlink" title="第十章	高级数据结构"></a>第十章	高级数据结构</h3><h2 id="第五关：Makefile"><a href="#第五关：Makefile" class="headerlink" title="第五关：Makefile"></a>第五关：Makefile</h2><h3 id="第一章什么是makefile？"><a href="#第一章什么是makefile？" class="headerlink" title="第一章	什么是makefile？"></a>第一章	什么是makefile？</h3><p>makefile关系到整个工程的编译规则，makefile定义了一些规则来指定哪些文件需要先进行编译，哪些文件需要后进行编译，哪些文件需要重新进行编译，甚至于进行更加复杂的操作。值得一提的是makefile也可以执行操作系统的命令。makefile带来的好处就是——自动化编译，一旦makefile文件写好，只需要一个make命令就可以完成整个工程的完全自动化编译，可以极大的提高软件开发的效率。make是一个解释makefile文件中指令的命令工具。</p>
<h3 id="第二章程序的编译和链接"><a href="#第二章程序的编译和链接" class="headerlink" title="第二章	程序的编译和链接"></a>第二章	程序的编译和链接</h3><p>一般来说对于编译型语言，首先要做的就是将源文件编译成中间代码文件，对于C，C++,在Windwos下来说也就是.obj文件，这个过程就是编译。然后再把大量编译好的目标文件链接在一起合成一个可执行文件，这个过程就是链接。编译时，编译器只检查程序的语法，变量和函数是否被声明，如果未被声明那么编译器会给出警告，此时可以成功生成目标文件，但是在链接过程中，链接器会在所有的目标文件中查找函数的定义，找不到则会报链接错误。</p>
<h3 id="第三章Makefile简介"><a href="#第三章Makefile简介" class="headerlink" title="第三章	Makefile简介"></a>第三章	Makefile简介</h3><h4 id="makefile规则"><a href="#makefile规则" class="headerlink" title="makefile规则"></a>makefile规则</h4><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">target</span> <span class="token punctuation">:</span> prerequisites
	command<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>target：可以是一个目标文件，也可以是一个可执行程序，还可以是一个标签。</p>
<p>prerequisites：指要生成那个target所需要的文件或是目标。</p>
<p>command：是指make需要执行的命令，可以是任意是shell命令。</p>
<p><code>总结：如果prerequisites中有一个以上的文件比target的文件要新的话，command所定义的命令就会被执行。</code></p>
<h4 id="makefile例子"><a href="#makefile例子" class="headerlink" title="makefile例子"></a>makefile例子</h4><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">edit</span> <span class="token punctuation">:</span> main.o kbd.o command.o display.o insert.o search.o files.o utils.o
	gcc -o edit main.o kbd.o command.o display.o insert.o search.o files.o utils.o
<span class="token target symbol">main.o</span> <span class="token punctuation">:</span> main.c defs.h
	gcc -c main.c
<span class="token target symbol">kbd.o</span> <span class="token punctuation">:</span> kbd.c defs.h command.h
	gcc -c kbd.c
<span class="token target symbol">command.o</span> <span class="token punctuation">:</span> command.c defs.h command.h
	gcc -c command.c
<span class="token target symbol">display.o</span> <span class="token punctuation">:</span> display.c defs.h buffer.h
	gcc -c display.c
<span class="token target symbol">insert.o</span> <span class="token punctuation">:</span> insert.c defs.h buffer.h
	gcc -c insert.c
<span class="token target symbol">search.o</span> <span class="token punctuation">:</span> search.c defs.h buffer.h
	gcc -c search.c
<span class="token target symbol">files.o</span> <span class="token punctuation">:</span> files.c defs.h buffer.h command.h
	gcc -c files.c
<span class="token target symbol">utils.o</span> <span class="token punctuation">:</span> utils.c defs.h
	gcc -c utils.c
<span class="token target symbol">clean</span> <span class="token punctuation">:</span>
	rm edit main.o kbd.o command.o display.o insert.o search.o files.o utils.o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里要说明一点的是，clean 不是一个文件，它只不过是一个动作名字，有点像 C 语言中的 lable 一样，其冒号后什么也没有，那么，make 就不会自动去找文件的依赖性，也就不会自动执行其后所定义的命令。要执行其后的命令，就要在 make 命令后明显得指出这个lable 的名字。  </p>
<h4 id="make的工作方式"><a href="#make的工作方式" class="headerlink" title="make的工作方式"></a>make的工作方式</h4><p>在默认的方式下，也就是我们只输入 make 命令。那么</p>
<ol>
<li>make 会在当前目录下找名字叫“Makefile”或“makefile”的文件。</li>
<li>如果找到，它会找文件中的第一个目标文件（target），在上面的例子中，他会找到“edit”这个文件，并把这个文件作为最终的目标文件。</li>
<li>如果 edit 文件不存在， 或是 edit 所依赖的后面的 .o 文件的文件修改时间要比 edit这个文件新，那么，他就会执行后面所定义的命令来生成 edit 这个文件。</li>
<li>如果 edit 所依赖的.o 文件也存在，那么 make 会在当前文件中找目标为.o 文件的依赖性，如果找到则再根据那一个规则生成.o 文件。 </li>
<li>当然，你的 C 文件和 H 文件是存在的啦， 于是 make 会生成 .o 文件， 然后再用 .o 文件生命 make 的终极任务，也就是执行文件 edit 了。</li>
</ol>
<h4 id="makefile中使用变量"><a href="#makefile中使用变量" class="headerlink" title="makefile中使用变量"></a>makefile中使用变量</h4><p>从上面的例子中可以看到<code>main.o kbd.o command.o display.o insert.o search.o files.o utils.o</code>被使用了3次。如果工程很大的话，需要依赖的目标文件很多的话，那么就很容易忘掉需要添加的目标文件，为了makefile便于维护，我们可以使用变量，makefile的变量就类似于C语言中的宏。</p>
<p>所以对于需要使用多次的目标文件，可以对其定义一个变量来表示。即<code>obj = main.o kbd.o command.o display.o insert.o search.o files.o utils.o</code>。然后通过<code>$(obj)</code>来进行使用。经过修改后那么makefile文件如下：</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">obj <span class="token operator">=</span> main.o kbd.o command.o display.o insert.o search.o files.o utils.o

<span class="token target symbol">edit</span> <span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
	gcc -o edit <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token target symbol">main.o</span> <span class="token punctuation">:</span> main.c defs.h
	gcc -c main.c
<span class="token target symbol">kbd.o</span> <span class="token punctuation">:</span> kbd.c defs.h command.h
	gcc -c kbd.c
<span class="token target symbol">command.o</span> <span class="token punctuation">:</span> command.c defs.h command.h
	gcc -c command.c
<span class="token target symbol">display.o</span> <span class="token punctuation">:</span> display.c defs.h buffer.h
	gcc -c display.c
<span class="token target symbol">insert.o</span> <span class="token punctuation">:</span> insert.c defs.h buffer.h
	gcc -c insert.c
<span class="token target symbol">search.o</span> <span class="token punctuation">:</span> search.c defs.h buffer.h
	gcc -c search.c
<span class="token target symbol">files.o</span> <span class="token punctuation">:</span> files.c defs.h buffer.h command.h
	gcc -c files.c
<span class="token target symbol">utils.o</span> <span class="token punctuation">:</span> utils.c defs.h
	gcc -c utils.c
<span class="token target symbol">clean</span> <span class="token punctuation">:</span>
	rm edit <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="make的自动推导功能"><a href="#make的自动推导功能" class="headerlink" title="make的自动推导功能"></a>make的自动推导功能</h4><p>GNU的make很强大，可以自动推导文件及其文件依赖后面的命令。只要make看到一个.o文件，他就会自动的将.c文件加在依赖关系中，并且gcc -c也会被自动推导出来。于是改良版plus的makefile如下：</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">obj <span class="token operator">=</span> main.o kbd.o command.o display.o insert.o search.o files.o utils.o

<span class="token target symbol">edit</span> <span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
	gcc -o edit <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>

<span class="token target symbol">main.o</span> <span class="token punctuation">:</span> defs.h
<span class="token target symbol">kbd.o</span> <span class="token punctuation">:</span> defs.h command.h
<span class="token target symbol">command.o</span> <span class="token punctuation">:</span> defs.h command.h
<span class="token target symbol">display.o</span> <span class="token punctuation">:</span> defs.h buffer.h
<span class="token target symbol">insert.o</span> <span class="token punctuation">:</span> defs.h buffer.h
<span class="token target symbol">search.o</span> <span class="token punctuation">:</span> defs.h buffer.h
<span class="token target symbol">files.o</span> <span class="token punctuation">:</span> defs.h buffer.h command.h
<span class="token target symbol">utils.o</span> <span class="token punctuation">:</span> defs.h

<span class="token builtin-target builtin">.PHONY</span> <span class="token punctuation">:</span> clean
<span class="token target symbol">clean</span> <span class="token punctuation">:</span>
	rm edit <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>.PHONY</code> 表示clean是一个伪目标文件。</p>
<h4 id="makefile的另一种风格"><a href="#makefile的另一种风格" class="headerlink" title="makefile的另一种风格"></a>makefile的另一种风格</h4><p>这种风格就是将相同的.h和.o文件进行收拢。没有上一种情况可以那么清楚的显示依赖关系。</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">obj <span class="token operator">=</span> main.o kbd.o command.o display.o insert.o search.o files.o utils.o

<span class="token target symbol">edit</span> <span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
	gcc -o edit <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>

<span class="token target symbol"><span class="token variable">$</span>(obj)</span> <span class="token punctuation">:</span> defs.h
<span class="token target symbol">kbd.o command.o files.o</span> <span class="token punctuation">:</span> command.h
<span class="token target symbol">display.o insert.o search.o files.o</span> <span class="token punctuation">:</span> buffer.h

<span class="token builtin-target builtin">.PHONY</span> <span class="token punctuation">:</span> clean
<span class="token target symbol">clean</span> <span class="token punctuation">:</span>
	rm edit <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="清空目标文件的makefile最佳规则"><a href="#清空目标文件的makefile最佳规则" class="headerlink" title="清空目标文件的makefile最佳规则"></a>清空目标文件的makefile最佳规则</h4><p>一般的风格都是：</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">clean</span><span class="token punctuation">:</span>
	rm edit <span class="token variable">$</span><span class="token punctuation">(</span>objects<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>更为稳健的做法是：</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token builtin-target builtin">.PHONY</span> <span class="token punctuation">:</span> clean
<span class="token target symbol">clean</span> <span class="token punctuation">:</span>
	-rm edit <span class="token variable">$</span><span class="token punctuation">(</span>objects<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p> 在 rm 命令前面加了一个小减号的意思就是，也许某些文件出现问题，但不要管，继续做后面的事。当然，clean 的规则不要放在文件的开头，不然，这就会变成 make 的默认目标。 </p>
<h3 id="第四章Makefile全貌"><a href="#第四章Makefile全貌" class="headerlink" title="第四章	Makefile全貌"></a>第四章	Makefile全貌</h3><h4 id="makefile的内容"><a href="#makefile的内容" class="headerlink" title="makefile的内容"></a>makefile的内容</h4><ol>
<li><p>显式规则</p>
<p>显式规则说明了，如何生成一个或多的的目标文件。这是由 Makefile 的书写者明显指<br>出，要生成的文件，文件的依赖文件，生成的命令。  </p>
</li>
<li><p>隐式规则</p>
<p>由于我们的 make 有自动推导的功能，所以隐晦的规则可以让我们比较粗糙地简略地书<br>写 Makefile，这是由 make 所支持的。  </p>
</li>
<li><p>变量</p>
<p>在 Makefile 中我们要定义一系列的变量，变量一般都是字符串，这个有点类似C 语言中<br>的宏，当 Makefile 被执行时，其中的变量都会被扩展到相应的引用位置上。  </p>
</li>
<li><p>文件引用</p>
<p>一个是在一个makefile文件中包含另一个makefile,类似C的include一样，另一种情况则是根据某些情况指定makefile的有效部分，类似于C语言的#if一样，还有就是定义一个多行的命令。</p>
</li>
<li><p>注释</p>
<p>makefile中只有行注释，注释是使用<code>#</code>号，需要使用到#号的地方可以进行转义。</p>
</li>
</ol>
<p><code>makefile中的命令必须以Tab键开头进行缩进。</code></p>
<h4 id="makefile的文件名"><a href="#makefile的文件名" class="headerlink" title="makefile的文件名"></a>makefile的文件名</h4><p>默认情况下，make会寻找文件名为”GNUmakefile”,”makefile”,”Makefile”这三个文件。GNUmakefile只支持GNU，大多数都支持：”makefile”,”Makefile”。</p>
<p>如果想要使用别的文件名来书写makefile,可以使用<code>make -f  文件名</code>或者<code>make --file 文件名</code>来指定特定的文件。</p>
<h4 id="引用其他的makefile文件"><a href="#引用其他的makefile文件" class="headerlink" title="引用其他的makefile文件"></a>引用其他的makefile文件</h4><p>在 Makefile 使用 include 关键字可以把别的 Makefile 包含进来，这很像 C 语言的#include，被包含的文件会原模原样的放在当前文件的包含位置。include 的语法是：</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token keyword">include</span> &lt;filename><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>filename 可以是当前操作系统 Shell 的文件模式（可以保含路径和通配符） 在 include前面可以有一些空字符，但是绝不能是[Tab]键开始。include 和<filename>可以用一个或多个空格隔开。  </p>
<p>如果文件都没有指定绝对路径或是相对路径的话，make 会在当前目录下首先寻找，如果当前目录下没有找到，那么，make 还会在下面的几个目录下找：  </p>
<ol>
<li>如果 make 执行时，有<code>-I</code>或<code>--include-dir</code>参数，那么 make 就会在这个参数所指定的目录下去寻找 。</li>
<li>如果目录<prefix>&#x2F;include（一般是：&#x2F;usr&#x2F;local&#x2F;bin 或&#x2F;usr&#x2F;include）存在的话，make 也会去找。如果有文件没有找到的话，make 会生成一条警告信息，但不会马上出现致命错误。它会继续载入其它的文件，一旦完成 makefile 的读取，make 会再重试这些没有找到，或是不能读取的文件，如果还是不行，make 才会出现一条致命信息。如果你想让 make不理那些无法读取的文件，而继续执行，你可以在 include 前加一个减号“-”。</li>
</ol>
<h4 id="环境变量-MAKEFILES"><a href="#环境变量-MAKEFILES" class="headerlink" title="环境变量 MAKEFILES"></a>环境变量 MAKEFILES</h4><p>如果你的当前环境中定义了环境变量 MAKEFILES，那么，make 会把这个变量中的值做一个类似include 的动作。这个变量中的值是其它的 Makefile，用空格分隔。只是， 它和 include不同的是，从这个环境变中引入的 Makefile 的“目标”不会起作用，如果环境变量中定义的文件发现错误，make 也会不理。</p>
<h4 id="make-的工作方式"><a href="#make-的工作方式" class="headerlink" title="make 的工作方式"></a>make 的工作方式</h4><p>GNU 的 make 工作时的执行步骤入下： </p>
<ol>
<li>读入所有的 Makefile。</li>
<li>读入被 include 的其它 Makefile。</li>
<li>初始化文件中的变量。</li>
<li>推导隐晦规则，并分析所有规则。</li>
<li>为所有的目标文件创建依赖关系链。</li>
<li>根据依赖关系，决定哪些目标要重新生成。</li>
<li>执行生成命令。</li>
</ol>
<h3 id="第五章书写规则"><a href="#第五章书写规则" class="headerlink" title="第五章	书写规则"></a>第五章	书写规则</h3><p>在 Makefile 中，规则的顺序是很重要的，因为，Makefile 中只应该有一个最终目标，其它的目标都是被这个目标所连带出来的，所以一定要让 make 知道你的最终目标是什么。一般来说，定义在 Makefile 中的目标可能会有很多，但是第一条规则中的目标将被确立为最终的目标。 </p>
<h4 id="规则语法"><a href="#规则语法" class="headerlink" title="规则语法"></a>规则语法</h4><p>第一种写法：</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">targets</span> <span class="token punctuation">:</span> prerequisites
	command <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p> 第二种写法：</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">targets</span> <span class="token punctuation">:</span> prerequisites <span class="token punctuation">;</span> command<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果命令太长，你可以使用反斜框（‘\’）作为换行符。</p>
<h4 id="在规则中使用通配符"><a href="#在规则中使用通配符" class="headerlink" title="在规则中使用通配符"></a>在规则中使用通配符</h4><p>make 支持三种通配符： <code>*</code>，<code>?</code>和<code>[]</code>。 波浪号（“<del>”）字符在文件名中也有比较特殊的用途。如果是“</del>&#x2F;test”，这就表示当前用户的$HOME 目录下的 test 目录。而“~hchen&#x2F;test”则表示用户 hchen 的宿主目录下的 test 目录。 在 Windows 下则指的是环境变量“HOME”  。</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">objects <span class="token operator">=</span> *.o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>此时objects的值就是*.o，如果需要objects的值是所有.o文件的集合，那么需要用到<code>wildcard</code>关键字，即 <code>objects := $(wildcard *.o)</code>。</p>
<h4 id="文件搜寻"><a href="#文件搜寻" class="headerlink" title="文件搜寻"></a>文件搜寻</h4><p>在一些大的工程中，有大量的源文件，我们通常的做法是把这许多的源文件分类，并存放在不同的目录中。所以，当 make 需要去找寻文件的依赖关系时，你可以在文件前加上路径，但最好的方法是把一个路径告诉 make，让 make 在自动去找。  </p>
<p>Makefile 文件中的特殊变量“VPATH”就是完成这个功能的，如果没有指明这个变量，make 只会在当前的目录中去找寻依赖文件和目标文件。如果定义了这个变量，那么，make就会在当当前目录找不到的情况下，到所指定的目录中去找寻文件了。 </p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">VPATH <span class="token operator">=</span> src<span class="token punctuation">:</span>../headers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>另一个设置文件搜索路径的方法是使用 make 的“vpath”关键字 ，它的用法有三种：</p>
<ol>
<li><p><code>vpath &lt;pattern&gt; &lt;directories&gt;</code></p>
<p>为符合模式<pattern>的文件指定搜索目录<directories>。  </p>
</li>
<li><p><code>vpath &lt;pattern&gt;  </code></p>
</li>
</ol>
<p>   清除符合模式<pattern>的文件的搜索目录。  </p>
<ol start="3">
<li><p><code>vpath  </code></p>
<p>清除所有已被设置好了的文件搜索目录。</p>
</li>
</ol>
<p>vapth 使用方法中的<pattern>需要包含“%”字符。“%”的意思是匹配零或若干字符，例如，“%.h”表示所有以“.h”结尾的文件。<pattern>指定了要搜索的文件集，而<directories>则指定了<pattern>的文件集的搜索的目录。  </p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token keyword">vpath</span> %.h ../headers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>该语句表示，要求 make 在“..&#x2F;headers”目录下搜索所有以“.h”结尾的文件。（如果某文件在当前目录没有找到的话）  </p>
<h4 id="伪目标"><a href="#伪目标" class="headerlink" title="伪目标"></a>伪目标</h4><p>伪目标一般没有依赖的文件。但是，我们也可以为伪目标指定所依赖的文件。伪目标同样可以作为“默认目标”，只要将其放在第一个。一个示例就是，如果你的 Makefile 需要一口气生成若干个可执行文件，但你只想简单地敲一个 make 完事，并且，所有的目标文件都写在一个 Makefile 中，那么你可以使用“伪目标”这个特性：  </p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">all</span> <span class="token punctuation">:</span> prog1 prog2 prog3
<span class="token builtin-target builtin">.PHONY</span> <span class="token punctuation">:</span> all
<span class="token target symbol">prog1</span> <span class="token punctuation">:</span> prog1.o utils.o
	cc -o prog1 prog1.o utils.o
<span class="token target symbol">prog2</span> <span class="token punctuation">:</span> prog2.o
	cc -o prog2 prog2.o
<span class="token target symbol">prog3</span> <span class="token punctuation">:</span> prog3.o sort.o utils.o
	cc -o prog3 prog3.o sort.o utils.o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>伪目标同样也可成为依赖。看下面的例子：  </p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> cleanall cleanobj cleandiff
<span class="token target symbol">cleanall</span> <span class="token punctuation">:</span> cleanobj cleandiff
	rm program
<span class="token target symbol">cleanobj</span> <span class="token punctuation">:</span>
	rm *.o
<span class="token target symbol">cleandiff</span> <span class="token punctuation">:</span>
	rm *.diff<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们可以输入“make cleanall”和“make cleanobj”和“make cleandiff”命令来达到清除不同种类文件的目的。  </p>
<h4 id="多目标"><a href="#多目标" class="headerlink" title="多目标"></a>多目标</h4><p>Makefile 的规则中的目标可以不止一个，其支持多目标，有可能我们的多个目标同时依赖于一个文件，并且其生成的命令大体类似。于是我们就能把其合并起来。当然，多个目标的生成规则的执行命令是同一个，这可能会可我们带来麻烦，不过好在我们的可以使用一个自动化变量“$@”  ，这个变量表示着目前规则中所有的目标的集合。</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">bigoutput littleoutput</span> <span class="token punctuation">:</span> text.g
generate text.g -<span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">subst</span> output,<span class="token variable">$@</span><span class="token punctuation">)</span> > <span class="token variable">$@</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>  等价于：</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">bigoutput</span> <span class="token punctuation">:</span> text.g
generate text.g -big > bigoutput
<span class="token target symbol">littleoutput</span> <span class="token punctuation">:</span> text.g
generate text.g -little > littleoutput<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中，-$(subst output,$@)中的“$”表示执行一个 Makefile 的函数，函数名为 subst，后面的为参数。 这里的这个函数是截取字符串的意思，“$@”表示目标的集合，就像一个数组，“$@”依次取出目标，并执于命令。   </p>
<h4 id="静态模式"><a href="#静态模式" class="headerlink" title="静态模式"></a>静态模式</h4><p>静态模式可以更加容易地定义多目标的规则，可以让我们的规则变得更加的有弹性和灵活 。</p>
<p>语法：</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">&lt;targets ...></span> <span class="token punctuation">:</span> &lt;target-pattern><span class="token punctuation">:</span> &lt;prereq-patterns ...>
	&lt;commands><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>targets 定义了一系列的目标文件，可以有通配符。是目标的一个集合。</p>
<p>target-parrtern 是指明了 targets 的模式，也就是的目标集模式。</p>
<p>prereq-parrterns 是目标的依赖模式，它对 target-parrtern 形成的模式再进行一次依赖目标的定义。  </p>
<p>看一个例子：  </p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">objects <span class="token operator">=</span> foo.o bar.o
<span class="token target symbol">all</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>objects<span class="token punctuation">)</span>
<span class="token target symbol"><span class="token variable">$</span>(objects)</span><span class="token punctuation">:</span> %.o<span class="token punctuation">:</span> %.c
<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -c <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> <span class="token variable">$&lt;</span> -o <span class="token variable">$@</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面的例子中，指明了我们的目标从$object 中获取，“%.o”表明要所有以“.o”结尾的目标，也就是“foo.o bar.o”，也就是变量$object 集合的模式，而依赖模式“%.c”则取模式“%.o”的“%”，也就是“foo bar”，并为其加下“.c”的后缀，于是，我们的依赖目标就是“foo.c bar.c”。而命令中的“$&lt;”和“$@”则是自动化变量，<code>$&lt;</code>表示所有的依赖目标集（也就是“foo.c bar.c”）， <code>$@</code>表示目标集（也就是“foo.o bar.o”）。于是，上面的规则展开后等价于下面的规则：  </p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">foo.o</span> <span class="token punctuation">:</span> foo.c
<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -c <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> foo.c -o foo.o
<span class="token target symbol">bar.o</span> <span class="token punctuation">:</span> bar.c
<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -c <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> bar.c -o bar.o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果我们的“%.o”有几百个，那种我们只要用这种很简单的“静态模式规则”就可以写完一堆规则，实在是太有效率了。“静态模式规则”的用法很灵活，如果用得好，那会一个很强大的功能。再看一个例子：  </p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">files <span class="token operator">=</span> foo.elc bar.o lose.o
<span class="token target symbol"><span class="token variable">$</span>(filter %.o,<span class="token variable">$</span>(files))</span><span class="token punctuation">:</span> %.o<span class="token punctuation">:</span> %.c
<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -c <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> <span class="token variable">$&lt;</span> -o <span class="token variable">$@</span>
<span class="token target symbol"><span class="token variable">$</span>(filter %.elc,<span class="token variable">$</span>(files))</span><span class="token punctuation">:</span> %.elc<span class="token punctuation">:</span> %.el
emacs -f batch-byte-compile <span class="token variable">$&lt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="自动生成依赖"><a href="#自动生成依赖" class="headerlink" title="自动生成依赖"></a>自动生成依赖</h4><p>如果是一个比较大型的工程，你必需清楚哪些 C 文件包含了哪些头文件，并且，你在加入或删除头文件时，也需要小心地修改 Makefile，这是一个很没有维护性的工作。为了避免这种繁重而又容易出错的事情，我们可以使用 C&#x2F;C++编译的一个功能。大多数的C&#x2F;C++编译器都支持一个“-M”的选项，即自动找寻源文件中包含的头文件，并生成一个依赖关系。 </p>
<p> <code>如果你使用 GNU 的 C/C++编译器，你得用“-MM”参数，不然，“-M”参数会把一些标准库的头文件也包含进来。  </code></p>
<p>GNU 组织建议把编译器为每一个源 文件的自动生成的依赖关系放到一个文件中，为每一个“name.c”的文件都生成一个“name.d”的 Makefile 文件，[.d]文件中就存放对应[.c]文件的依赖关系。于是，我们可以写出[.c]文件和[.d]文件的依赖关系，并让 make 自动更新或自成[.d]文件，并把其包含在我们的Makefile 中，这样，我们就可以自动化地生成每个文件的依赖关系了。这里，我们给出了一个模式规则来产生[.d]文件：  </p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">%.d</span><span class="token punctuation">:</span> %.c
<span class="token operator">@</span>set -e<span class="token punctuation">;</span> rm -f <span class="token variable">$@;</span> \
<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -M <span class="token variable">$</span><span class="token punctuation">(</span>CPPFLAGS<span class="token punctuation">)</span> <span class="token variable">$&lt;</span> > <span class="token variable">$@.$$$$;</span> \
sed <span class="token string">'s,\($*\)\.o[ :]*,\1.o $@ : ,g'</span> &lt; <span class="token variable">$@.$$$$</span> > <span class="token variable">$@;</span> \
rm -f <span class="token variable">$@.$$$$</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这个规则的意思是，所有的[.d]文件依赖于[.c]文件，“rm -f $@”的意思是删除所有的目标，也就是[.d]文件，第二行的意思是，为每个依赖文件“$&lt;”，也就是[.c]文件生成依赖文件，“$@”表示模式“ %.d” 文件，如果有一个 C 文件是 name.c，那么“%”就是“name”，“$$$$”意为一个随机编号，第二行生成的文件有可能是“name.d.12345”，第三行使用 sed 命令做了一个替换。第四行就是删除临时文件。  </p>
<p>总而言之，这个模式要做的事就是在编译器生成的依赖关系中加入[.d]文件的依赖，即把依赖关系：  </p>
<p><code>main.o : main.c defs.h</code>转成：<code>main.o main.d : main.c defs.h  </code>。</p>
<p>于是，我们的[.d]文件也会自动更新了，并会自动生成了，当然，你还可以在这个[.d]文件中加入的不只是依赖关系，包括生成的命令也可一并加入，让每个[.d]文件都包含一个完赖的规则。一旦我们完成这个工作，接下来，我们就要把这些自动生成的规则放进我们的主 Makefile 中。 我们可以使用Makefile 的“include”命令，来引入别的 Makefile 文件，例如：</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">sources <span class="token operator">=</span> foo.c bar.c
<span class="token target symbol">include <span class="token variable">$</span>(sources</span><span class="token punctuation">:</span>.c<span class="token operator">=</span>.d<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>上述语句中的“$(sources:.c&#x3D;.d)”中的“.c&#x3D;.d”的意思是做一个替换，把变量$(sources)所有[.c]的字串都替换成[.d]。当然，你得注意次序，因为 include 是按次来载入文件，最先载入的[.d]文件中的目标会成为默认目标。    </p>
<h3 id="第六章常用命令"><a href="#第六章常用命令" class="headerlink" title="第六章	常用命令"></a>第六章	常用命令</h3><h4 id="显示提示的命令"><a href="#显示提示的命令" class="headerlink" title="显示提示的命令"></a>显示提示的命令</h4><p>通常，make 会把其要执行的命令行在命令执行前输出到屏幕上。当我们用“@”字符在命令行前，那么，这个命令将不被 make 显示出来，最具代表性的例子是，我们用这个功能来向屏幕显示一些信息。如：  </p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token operator">@</span>echo 正在编译 XXX 模块......<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>当 make 执行时，会输出“正在编译 XXX 模块……”字串，但不会输出命令，如果没有“@”，那么，make 将输出：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> 正在编译 XXX 模块<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>

正在编译 XXX 模块<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>如果 make 执行时，带入 make 参数“-n”或“–just-print”，那么其只是显示命令，但不会执行命令，这个功能很有利于我们调试我们的 Makefile，看看我们书写的命令是执行起来是什么样子的或是什么顺序的。  而 make 参数“-s”或“–slient”则是全面禁止命令的显示。  </p>
<h4 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h4><p>当依赖目标新于目标时，也就是当规则的目标需要被更新时，make 会一条一条的执行其后的命令。需要注意的是，如果你要让上一条命令的结果应用在下一条命令时，你应该使用分号分隔这两条命令。比如你的第一条命令是 cd 命令，你希望第二条命令得在 cd 之后的基础上运行，那么你就不能把这两条命令写在两行上，而应该把这两条命令写在一行上，用分号分隔。  如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 示例一：</span>
exec:
<span class="token builtin class-name">cd</span> /home/hchen
<span class="token builtin class-name">pwd</span>
<span class="token comment"># 示例二：</span>
exec:
<span class="token builtin class-name">cd</span> /home/hchen<span class="token punctuation">;</span> <span class="token builtin class-name">pwd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>当我们执行“make exec”时，第一个例子中的 cd 没有作用，pwd 会打印出当前的Makefile 目录，而第二个例子中，cd 就起作用了，pwd 会打印出“&#x2F;home&#x2F;hchen”。  </p>
<h4 id="命令出错"><a href="#命令出错" class="headerlink" title="命令出错"></a>命令出错</h4><p>每当命令运行完后，make 会检测每个命令的返回码，如果命令返回成功，那么 make 会执行下一条命令，当规则中所有的命令成功返回后，这个规则就算是成功完成了。如果一个规则中的某个命令出错了（命令退出码非零），那么 make 就会终止执行当前规则，这将有可能终止所有规则的执行。 </p>
<p> 有些时候，命令的出错并不表示就是错误的。  为了忽略命令的出错，我们可以在 Makefile 的命令行前加一个减号“-”（在 Tab 键之后），标记为不管命令出不出错都认为是成功的。还有一个全局的办是，给 make 加上“-i”或是“ –ignore-errors”参数，那么，Makefile 中所有命令都会忽略错误。 而如果一个规则是以“.IGNORE”作为目标的，那么这个规则中的所有命令将会忽略错误。还有一个要提一下的 make 的参数的是“-k”或是“–keep-going”，这个参数的意思是，如果某规则中的命令出错了，那么就终止该规则的执行，但继续执行其它规则。</p>
<h4 id="嵌套执行make"><a href="#嵌套执行make" class="headerlink" title="嵌套执行make"></a>嵌套执行make</h4><p>在一些大的工程中，我们会把我们不同模块或是不同功能的源文件放在不同的目录中，我们可以在每个目录中都书写一个该目录的 Makefile，这有利于让我们的 Makefile 变得更加地简洁，而不至于把所有的东西全部写在一个 Makefile 中，这样会很难维护我们的Makefile，这个技术对于我们模块编译和分段编译有着非常大的好处。  </p>
<p>例如，我们有一个子目录叫 subdir，这个目录下有个 Makefile 文件，来指明了这个目录下文件的编译规则。那么我们总控的 Makefile 可以这样书写：  </p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">subsystem</span><span class="token punctuation">:</span>
	cd subdir &amp;&amp; <span class="token variable">$</span><span class="token punctuation">(</span>MAKE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>等价于：</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">subsystem</span><span class="token punctuation">:</span>
	<span class="token variable">$</span><span class="token punctuation">(</span>MAKE<span class="token punctuation">)</span> -C subdir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>如果你要传递变量到下级 Makefile 中，那么你可以使用这样的声明：<code>export &lt;variable ...&gt;</code></p>
<p>如果你不想让某些变量传递到下级 Makefile 中，那么可以这样声明：<code>unexport &lt;variable ...&gt;  </code></p>
<p>需要注意的是，有两个变量，一个是 SHELL，一个是 MAKEFLAGS，这两个变量不管你是否 export，其总是要传递到下层 Makefile 中，特别是 MAKEFILES 变量，其中包含了 make的参数信息，如果我们执行“总控 Makefile”时有 make 参数或是在上层 Makefile 中定义了这个变量，那么 MAKEFILES 变量将会是这些参数，并会传递到下层 Makefile 中，这是一个系统级的环境变量 。但是 make 命令中的有几个参数并不往下传递，它们是“-C”,“-f”,“-h”“-o”和“-W”  ,如果你不想往下层传递参数，那么，你可以这样来：</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">subsystem</span><span class="token punctuation">:</span>
	cd subdir &amp;&amp; <span class="token variable">$</span><span class="token punctuation">(</span>MAKE<span class="token punctuation">)</span> MAKEFLAGS<span class="token operator">=</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="命令包"><a href="#命令包" class="headerlink" title="命令包"></a>命令包</h4><p>如果 Makefile 中出现一些相同命令序列，那么我们可以为这些相同的命令序列定义一个变量。定义这种命令序列的语法以“define”开始，以“endef”结束，如：  </p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token keyword">define</span> run-yacc
yacc <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">firstword</span> <span class="token variable">$^</span><span class="token punctuation">)</span>
mv y.tab.c <span class="token variable">$@</span>
<span class="token keyword">endef</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里，“ run-yacc”是这个命令包的名字，其不要和 Makefile 中的变量重名。在“define”和“endef”中的两行就是命令序列。这个命令包中的第一个命令是运行 Yacc程序，因为 Yacc 程序总是生成“y.tab.c”的文件，所以第二行的命令就是把这个文件改改名字。 </p>
<h3 id="第七章变量"><a href="#第七章变量" class="headerlink" title="第七章	变量"></a>第七章	变量</h3><blockquote>
<p>变量是大小写敏感的  </p>
</blockquote>
<h4 id="变量的嵌套使用"><a href="#变量的嵌套使用" class="headerlink" title="变量的嵌套使用"></a>变量的嵌套使用</h4><p>第一种方式，也就是简单的使用“&#x3D;”号，在“&#x3D;”左侧是变量，右侧是变量的值，右侧变量的值可以定义在文件的任何一处，也就是说，右侧中的变量不一定非要是已定义好的值，其也可以使用后面定义的值。  </p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">foo <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span>
bar <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>ugh<span class="token punctuation">)</span>
ugh <span class="token operator">=</span> Huh?
<span class="token target symbol">all</span><span class="token punctuation">:</span>
	echo <span class="token variable">$</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>第二种方式，使用:&#x3D;操作符，如：</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">x <span class="token operator">:=</span> foo
y <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> bar
x <span class="token operator">:=</span> later
其等价于：
y <span class="token operator">:=</span> foo bar
x <span class="token operator">:=</span> later<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>还有一个比较有用的操作符是“?&#x3D;”  ,如：</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">FOO <span class="token operator">?=</span> bar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>其含义是，如果 FOO 没有被定义过，那么变量 FOO 的值就是“bar”，如果 FOO 先前被定义过，那么这条语将什么也不做。  </p>
<h4 id="变量的高级用法"><a href="#变量的高级用法" class="headerlink" title="变量的高级用法"></a>变量的高级用法</h4><p>第一种是变量值的替换。  如：</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">foo <span class="token operator">:=</span> a.o b.o c.o
bar <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span>foo<span class="token punctuation">:</span>.o<span class="token operator">=</span>.c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>这个示例中，我们先定义了一个“$(foo)”变量，而第二行的意思是把“$(foo)”中所有以“.o”字串“结尾”全部替换成“.c”，所以我们的“$(bar)”的值就是“a.c b.c c.c”。 </p>
<p>另外一种变量替换的技术是以“静态模式”  ，如：</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">foo <span class="token operator">:=</span> a.o b.o c.o
bar <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span>foo<span class="token punctuation">:</span>%.o<span class="token operator">=</span>%.c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>第二种高级用法是——“把变量的值再当成变量”。  如：</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">x <span class="token operator">=</span> y
y <span class="token operator">=</span> z
a <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token variable">$</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="追加变量值"><a href="#追加变量值" class="headerlink" title="追加变量值"></a>追加变量值</h4><p>我们可以使用“+&#x3D;”操作符给变量追加值，  如：</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">objects <span class="token operator">=</span> main.o foo.o bar.o utils.o
objects <span class="token operator">+=</span> another.o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="override-指示符"><a href="#override-指示符" class="headerlink" title="override 指示符"></a>override 指示符</h4><p>如果有变量是通常 make 的命令行参数设置的，那么 Makefile 中对这个变量的赋值会被忽略。如果你想在 Makefile 中设置这类参数的值，那么，你可以使用“override”指示符。其语法是：</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token keyword">override</span> &lt;variable> <span class="token operator">=</span> &lt;value>
<span class="token keyword">override</span> &lt;variable> <span class="token operator">:=</span> &lt;value>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="多行变量"><a href="#多行变量" class="headerlink" title="多行变量"></a>多行变量</h4><p>还有一种设置变量值的方法是使用 define 关键字。 使用 define 关键字设置变量的值可以有换行，这有利于定义一系列的命令 。</p>
<p>define 指示符后面跟的是变量的名字，而重起一行定义变量的值，定义是以 endef 关键字结束。其工作方式和“&#x3D;”操作符一样。变量的值可以包含函数、命令、文字，或是其它变量。 因为命令需要以[Tab]键开头， 所以如果你用 define 定义的命令变量中没有以[Tab]键开头，那么 make 就不会把其认为是命令。  </p>
<h4 id="目标变量"><a href="#目标变量" class="headerlink" title="目标变量"></a>目标变量</h4><p>目标变量的作用范围只在这条规则以及连带规则中。语法是：<br><code>&lt;target ...&gt; : &lt;variable-assignment&gt; &lt;target ...&gt; : overide &lt;variable-assignment&gt;</code></p>
<p>  如：</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">prog</span> <span class="token punctuation">:</span> CFLAGS <span class="token operator">=</span> -g
<span class="token target symbol">prog</span> <span class="token punctuation">:</span> prog.o foo.o bar.o
	<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> prog.o foo.o bar.o
<span class="token target symbol">prog.o</span> <span class="token punctuation">:</span> prog.c
	<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> prog.c
<span class="token target symbol">foo.o</span> <span class="token punctuation">:</span> foo.c
	<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> foo.c
<span class="token target symbol">bar.o</span> <span class="token punctuation">:</span> bar.c
	<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> bar.c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="模式变量"><a href="#模式变量" class="headerlink" title="模式变量"></a>模式变量</h4><p>通过上面的目标变量中，我们知道，变量可以定义在某个目标上。模式变量的好处就是，我们可以给定一种“模式”，可以把变量定义在符合这种模式的所有目标上。  如：给所有以[.o]结尾的目标定义目标变量 。</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">%.o</span> <span class="token punctuation">:</span> CFLAGS <span class="token operator">=</span> -O<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="第八章条件判断"><a href="#第八章条件判断" class="headerlink" title="第八章	条件判断"></a>第八章	条件判断</h3><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">libs_for_gcc <span class="token operator">=</span> -lgnu
normal_libs <span class="token operator">=</span>
<span class="token target symbol">foo</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>objects<span class="token punctuation">)</span>
<span class="token keyword">ifeq</span> <span class="token punctuation">(</span><span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span>,gcc<span class="token punctuation">)</span>
	<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -o foo <span class="token variable">$</span><span class="token punctuation">(</span>objects<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>libs_for_gcc<span class="token punctuation">)</span>
<span class="token keyword">else</span>
	<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -o foo <span class="token variable">$</span><span class="token punctuation">(</span>objects<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>normal_libs<span class="token punctuation">)</span>
<span class="token keyword">endif</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>特别注意的是，make 是在读取 Makefile 时就计算条件表达式的值，并根据条件表达式的值来选择语句，所以，你最好不要把自动化变量（如“$@”等）放入条件表达式中，因为自动化变量是在运行时才有的。  </p>
<h3 id="第九章函数"><a href="#第九章函数" class="headerlink" title="第九章	函数"></a>第九章	函数</h3><p>语法：<code>$(&lt;function&gt; &lt;arguments&gt;)  </code>或者是<code>$&#123;&lt;function&gt; &lt;arguments&gt;&#125;  </code>。</p>
<h4 id="foreach函数"><a href="#foreach函数" class="headerlink" title="foreach函数"></a>foreach函数</h4><p>语法：<code>$(foreach &lt;var&gt;,&lt;list&gt;,&lt;text&gt;)  </code>。如：</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">names <span class="token operator">:=</span> a b c d
files <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">foreach</span> n,<span class="token variable">$</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span>,<span class="token variable">$</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>.o<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="if函数"><a href="#if函数" class="headerlink" title="if函数"></a>if函数</h4><p>语法：<code>$(if &lt;condition&gt;,&lt;then-part&gt;)  </code>或者是<code>$(if &lt;condition&gt;,&lt;then-part&gt;,&lt;else-part&gt;)  </code></p>
<h4 id="call函数"><a href="#call函数" class="headerlink" title="call函数"></a>call函数</h4><p>call 函数是唯一一个可以用来创建新的参数化的函数。</p>
<p>语法：<code>$(call &lt;expression&gt;,&lt;parm1&gt;,&lt;parm2&gt;,&lt;parm3&gt;...)  </code></p>
<h4 id="origin-函数"><a href="#origin-函数" class="headerlink" title="origin 函数"></a>origin 函数</h4><p>origin 函数不像其它的函数，他并不操作变量的值，他只是告诉你你的这个变量是哪里来的。</p>
<ol>
<li>undefined  ：未定义的</li>
<li>default：默认的  </li>
<li>file：表示定义在makefile中</li>
<li>command line：定义在命令行中</li>
<li>override：表示是被override重写的</li>
<li>automatic：表示是自动化变量</li>
</ol>
<h4 id="Shell函数"><a href="#Shell函数" class="headerlink" title="Shell函数"></a>Shell函数</h4><p>操作系统 Shell 的命令 。如：</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">contents <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">shell</span> cat foo<span class="token punctuation">)</span>
files <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">shell</span> echo *.c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="控制make的函数"><a href="#控制make的函数" class="headerlink" title="控制make的函数"></a>控制make的函数</h4><p>make 提供了一些函数来控制 make 的运行。通常，你需要检测一些运行 Makefile 时的运行时信息，并且根据这些信息来决定，你是让 make 继续执行，还是停止。  </p>
<ol>
<li><p>error  </p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token keyword">ifdef</span> ERROR_001
<span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">error</span> error is <span class="token variable">$</span><span class="token punctuation">(</span>ERROR_001<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">endif</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>warning</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token keyword">ifdef</span> WARNING_001
<span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">warning</span> warning is <span class="token variable">$</span><span class="token punctuation">(</span>WARNING_001<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">endif</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h3 id="第十章make的运行"><a href="#第十章make的运行" class="headerlink" title="第十章	make的运行"></a>第十章	make的运行</h3><h4 id="make的退出码"><a href="#make的退出码" class="headerlink" title="make的退出码"></a>make的退出码</h4><p>make 命令执行后有三个退出码：</p>
<p>0 - 表示成功执行。</p>
<p>1 - 如果 make 运行时出现任何错误，其返回 1。</p>
<p>2 - 如果你使用了 make 的“-q”选项，并且 make 使得一些目标不需要更新，那么返回 2。  </p>
<h4 id="指定目标"><a href="#指定目标" class="headerlink" title="指定目标"></a>指定目标</h4><p>一般来说，make 的最终目标是 makefile 中的第一个目标，而其它目标一般是由这个目标连带出来的。这是 make 的默认行为。当然，一般来说，你的 makefile 中的第一个目标是由许多个目标组成，你可以指示 make，让其完成你所指定的目标。要达到这一目的很简单，需在 make 命令后直接跟目标的名字就可以完成 。如：<code>make clean</code>。</p>
<p>有一个 make 的环境变量叫“MAKECMDGOALS”，这个变量中会存放你所指定的终极目标的列表，如果在命令行上，你没有指定目标，那么，这个变量是空值。  如：</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">sources <span class="token operator">=</span> foo.c bar.c
<span class="token keyword">ifneq</span> <span class="token punctuation">(</span> <span class="token variable">$</span><span class="token punctuation">(</span>MAKECMDGOALS<span class="token punctuation">)</span>,clean<span class="token punctuation">)</span>
<span class="token target symbol">include <span class="token variable">$</span>(sources</span><span class="token punctuation">:</span>.c<span class="token operator">=</span>.d<span class="token punctuation">)</span>
<span class="token keyword">endif</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="第六关：CMake"><a href="#第六关：CMake" class="headerlink" title="第六关：CMake"></a>第六关：CMake</h2><h3 id="CMake安装"><a href="#CMake安装" class="headerlink" title="CMake安装"></a>CMake安装</h3><p>对于Windows操作系统进入到CMake的官网下载<a href="https://github.com/Kitware/CMake/releases/download/v3.24.1/cmake-3.24.1-windows-x86_64.msi">CMake</a>。下载完毕后直接进行安装即可</p>
<h3 id="第一个CMake项目"><a href="#第一个CMake项目" class="headerlink" title="第一个CMake项目"></a>第一个CMake项目</h3><ol>
<li>进入项目目录，新建一个build文件夹，因为CMake会产生很多中间文件</li>
<li>执行<code>cmake ../</code>就会在build目录下产生项目文件，windows默认生成VS项目</li>
<li>要产生其他编译器的makefile，就需要使用-G命令进行指定<code>cmkae -G &quot;MinGW Makefiles&quot; ../</code></li>
<li>可以使用<code>cmake --help</code>来查看使用编译器的名字</li>
<li>生成项目工程文件或者makefile后，就可以使用相应的编译器来编译项目</li>
</ol>
<h3 id="CMake命令选项设置"><a href="#CMake命令选项设置" class="headerlink" title="CMake命令选项设置"></a>CMake命令选项设置</h3><ol>
<li>指定构建系统：<code>-G</code>：可以使用该命令指定编译器</li>
<li>CMakeCache.txt文件</li>
</ol>
<ul>
<li>当cmake第一次运行一个空构建时，就会创建一个CMakeCache.txt文件，文件里存放了一些可以用来制定工程的设置</li>
<li>对于同一个变量，如果CMakeCache.txt里有设置，那么CMakeLists.txt会优先使用Cacahe文件里的同名变量。</li>
<li>CMakeLists.txt里要是设置了一个Cache里没有的变量，那么就将这个变量的值写入到Cache里面</li>
</ul>
<ol start="3">
<li>添加到Cache文件中：-D：<code>cmake  -DCMAKE_BUILD_TYPE:STRING=Debug</code></li>
<li>从Cache中删除变量：-U：支持使用*和&#x2F;</li>
<li>CMake命令行模式：-E</li>
<li>打印每一行CMake：使用<code>--trace</code>或者<code>--trace-source=&#39;filename&#39;</code></li>
<li>设置编译参数<ul>
<li>add_definitions	(-DENABLED)，当CMake添加这一段定义时，如果代码里定义了#ifdef ENABLED #endif，这一段代码就会生效</li>
<li>&#x2F;&#x2F;add_definitions( “-Wall -ansi –pedantic –g”)</li>
</ul>
</li>
<li>设置默认命令：option:<code>option(MY-MESSAGE &quot;this is my message&quot; ON) </code></li>
</ol>
<h3 id="CMake基本知识"><a href="#CMake基本知识" class="headerlink" title="CMake基本知识"></a>CMake基本知识</h3><ol>
<li>每一个CMake.txt的第一行都会写：<code>cmake_minimum_required(VERSION 3.1)</code>，该命令指定了CMake的最低版本是3.1</li>
<li>设置生成项目名称：<code>project（MyProject）</code> ,使用该指令之后系统会自动创建两个变量:<projectname>_BINARY_DIR:二进 制文件保存路径、<projectname>_SOURCE_DIR：源代码路径 </li>
<li>生成可执行文件 :<code>add_executable(exename srcname) </code></li>
<li>获取文件路径中的所有源文件：<code>aux_sourcr_directory(&lt;dir&gt; &lt;variable&gt;) </code></li>
<li>生成lib库：<code>add_library(libname [SHARED|STATIC|MODULE] [EXCLUDE_FROM_ALL] source1 source2 ... sourceN) </code></li>
<li>添加头文件目录：<code>target_include_directories(&lt;target&gt;[SYSTEM][BEFORE]&lt;INTERFACE|PUBLIC|PRIVATE&gt;[items1...]&lt;INTERFACE|PUBLIC|PRIVATE&gt;[ [items2...] ...]))</code>或者<code>include_directories([AFTER|BEFORE] [SYSTEM] dir1 [dir2 …])  </code></li>
<li>添加需要链接的库文件：<code>target_link_libraries(&lt;target&gt; [item1 [item2 [...]]] [[debug|optimized|general] &lt;item&gt;] ...)  </code>或者<code>link_libraries() </code></li>
<li>添加需要链接的库文件目录：<code>link_directories（添加需要链接的库文件目录）  </code></li>
</ol>
<h3 id="控制目标属性"><a href="#控制目标属性" class="headerlink" title="控制目标属性"></a>控制目标属性</h3><p>如果需要单独的设置target的属性，需要使用命令：</p>
<p><code>set_target_properties(target1 target2 ... PROPERTIES 属性名称1 值 属性名称2 值 ... )</code></p>
<p>控制编译选项的属性是：COMPILE_FLAGS</p>
<p>控制链接选项的属性是：LINK_FLAGS</p>
<p>控制输出路径的属性：EXECUTABLE_OUTPUT_PATH（exe的输出路径）、LIBRARY_OUTPUT_PATH（库文件的输出路径）  </p>
<h3 id="变量和缓存"><a href="#变量和缓存" class="headerlink" title="变量和缓存"></a>变量和缓存</h3><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>设置变量：<code>set(MY_VARIABLE &quot;value&quot;)  </code></p>
<p>访问变量：<code>$&#123;MY_VARIABLE&#125;  </code></p>
<h4 id="缓存变量"><a href="#缓存变量" class="headerlink" title="缓存变量"></a>缓存变量</h4><p>缓存变量就是cache变量，相当于全局变量，都是在第一个执行的CMakeLists.txt里面被设置的，不过在子项目的CMakeLists.txt文件里面也是可以修改这个变量的，此时会影响父目录CMakeLists.txt，这些变量用来配置整个工程，配置好之后对整个工程使用。  </p>
<p>设置缓存变量：<code>set(MY_CACHE_VALUE &quot;cache_value&quot; CACHE INTERNAL &quot;THIS IS MY CACHE VALUE&quot;)  </code></p>
<h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><p>设置环境变量：<code>set(ENV&#123;variable_name&#125; value)  </code></p>
<p>获取环境变量：<code>$ENV&#123;variable_name&#125;  </code></p>
<h4 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h4><ol>
<li>CMAKE_C_COMPILER：指定C编译器  </li>
<li>CMAKE_CXX_COMPILER：指定C++编译器  </li>
<li>EXECUTABLE_OUTPUT_PATH：指定可执行文件的存放路径  </li>
<li>LIBRARY_OUTPUT_PATH：指定库文件的放置路径  </li>
<li>CMAKE_CURRENT_SOURCE_DIR：当前处理的CMakeLists.txt所在的路径</li>
<li>CMAKE_BUILD_TYPE：控制构建的时候是Debug还是Release</li>
<li>CMAKE_SOURCR_DIR：无论外部构建还是内部构建，都指的是工程的顶层目录</li>
<li>CMAKE_BINARY_DIR：内部构建指的是工程顶层目录，外部构建指的是工程发生编译的目录（参考project命令执行之后，生成的_BINARY_DIR以及CMake预定义的变量PROJECT_BINARY_DIR）</li>
<li>CMAKE_CURRENT_LIST_LINE：输出这个内置变量所在的行</li>
</ol>
<h3 id="CMake基本控制语法"><a href="#CMake基本控制语法" class="headerlink" title="CMake基本控制语法"></a>CMake基本控制语法</h3><h4 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h4><p><code>if (expression) COMMAND1(ARGS ...) COMMAND2(ARGS ...) ... else (expression) COMMAND1(ARGS ...) COMMAND2(ARGS ...) ... endif (expression)</code><br>注意：ENDIF要和IF对应  </p>
<h4 id="While"><a href="#While" class="headerlink" title="While"></a>While</h4><p><code>WHILE(condition) COMMAND1(ARGS ...) COMMAND2(ARGS ...) ... ENDWHILE(condition)  </code></p>
<h5 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h5><p>列表循环</p>
<p><code>FOREACH(loop_var arg1 arg2 ...) COMMAND1(ARGS ...) COMMAND2(ARGS ...) ... ENDFOREACH(loop_var)  </code></p>
<p>范围循环</p>
<p><code>FOREACH(loop_var RANGE total) COMMAND1(ARGS ...) COMMAND2(ARGS ...) ... ENDFOREACH(loop_var)  </code></p>
<p>范围步进循环</p>
<p><code>FOREACH(loop_var RANGE start stop [step]) COMMAND1(ARGS ...) COMMAND2(ARGS ...) ... ENDFOREACH(loop_var)  </code></p>
<h3 id="项目构建规范以及属性"><a href="#项目构建规范以及属性" class="headerlink" title="项目构建规范以及属性"></a>项目构建规范以及属性</h3><ul>
<li><code>target_include_directories(&lt;target&gt; [SYSTEM] [BEFORE]&lt;INTERFACE|PUBLIC|PRIVATE&gt; [items1...] [&lt;INTERFACE|PUBLIC|PRIVATE&gt;[items2...] ...])  </code></li>
<li><code>target_compile_definitions(&lt;target&gt; &lt;INTERFACE|PUBLIC|PRIVATE&gt;[items1...][ [items2...] ...])  </code></li>
<li><code>target_compile_options(&lt;target&gt; [BEFORE]&lt;INTERFACE|PUBLIC|PRIVATE&gt; [items1...] [&lt;INTERFACE|PUBLIC|PRIVATE&gt;[items2...] ...]  </code></li>
</ul>
<p>以上的额三个命令会生成INCLUDE_DIRECTORIES, COMPILE_DEFINITIONS, COMPILE_OPTIONS变量的<br>值,或者INTERFACE_INCLUDE_DIRECTORIES,INTERFACE_COMPILE_DEFINITIONS,INTERFACE_COMPILE_OPTIONS的值.  </p>
<h3 id="宏和函数"><a href="#宏和函数" class="headerlink" title="宏和函数"></a>宏和函数</h3><p>CMake里面可以定义自己的函数（function）和宏（macro）  </p>
<h5 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h5><p><code>macro( [arg1 [arg2 [arg3 ...]]]) COMMAND1(ARGS ...) COMMAND2(ARGS ...) ... endmacro()  </code></p>
<h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><p><code>function( [arg1 [arg2 [arg3 ...]]]) COMMAND1(ARGS ...) COMMAND2(ARGS ...)</code></p>
<p><code>endfunction()</code>  </p>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ GUI</title>
    <url>/2022/07/04/CodeBlocks/</url>
    <content><![CDATA[<h1 id="C-GUI库学习"><a href="#C-GUI库学习" class="headerlink" title="C++ GUI库学习"></a>C++ GUI库学习</h1><h2 id="wxWidgets入门：VS2019配置wxWidgets库"><a href="#wxWidgets入门：VS2019配置wxWidgets库" class="headerlink" title="wxWidgets入门：VS2019配置wxWidgets库"></a>wxWidgets入门：VS2019配置wxWidgets库</h2><blockquote>
<p>系统环境：Win10专业版</p>
<p>VStudio版本：2019</p>
<p>wxWidgets版本：3.2.2.1</p>
</blockquote>
<h3 id="wxWidgets历史"><a href="#wxWidgets历史" class="headerlink" title="wxWidgets历史"></a>wxWidgets历史</h3><p>WxWidgets 是一个开源的C++框架，允许用C++和其他语言编写具有本地外观的跨平台GUI应用程序。</p>
<p>与其他类似的库相比，wxWidgets具有以下优点：</p>
<ol>
<li>唯一一个通过包装原生GUI小部件构建的C++ GUI库，在每个平台上都能产生最佳的用户体验。</li>
<li>只使用标准C++编写，不依赖任何自定义扩展或预处理。</li>
<li>开源并且可以免费在商业项目中使用。</li>
</ol>
<p>了解了这些后。Let’s Go！首先去下载<a href="https://www.wxwidgets.org/downloads/">wxWidgets</a>的源码，这里我选择的是7z格式。</p>
<h3 id="编译wxWidgets源代码"><a href="#编译wxWidgets源代码" class="headerlink" title="编译wxWidgets源代码"></a>编译wxWidgets源代码</h3><p>找到wx_vc17.sln，然后使用VS2019打开。</p>
<p><img src="/../img/wxWidgets/build.png" class="lazyload placeholder" data-srcset="/../img/wxWidgets/build.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230411233638500"></p>
<p>选择批生成，全选，然后点击生成按钮：</p>
<p><img src="/../img/wxWidgets/build2.png" class="lazyload placeholder" data-srcset="/../img/wxWidgets/build2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230411233926968"></p>
<p>生成结束后新建一个Windows桌面应用程序。</p>
<p><img src="/../img/wxWidgets/programmer.png" class="lazyload placeholder" data-srcset="/../img/wxWidgets/programmer.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230412001701450"></p>
<p>删除其中的文件夹，然后新建一个类。添加头文件目录<code>D:\gitRep\wxWidgets\include和D:\gitRep\wxWidgets\include\msvc</code>；然后添加lib库目录<code>D:\gitRep\wxWidgets\lib\vc_lib</code>即可。</p>
<p>创建一个Hello World界面！代码如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;wx/wxprec.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">WX_PRECOMP</span></span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;wx/wx.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">wxApp</span></span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">OnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">MyFrame</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">wxFrame</span></span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">MyFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">OnHello</span><span class="token punctuation">(</span>wxCommandEvent<span class="token operator">&amp;</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">OnExit</span><span class="token punctuation">(</span>wxCommandEvent<span class="token operator">&amp;</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">OnAbout</span><span class="token punctuation">(</span>wxCommandEvent<span class="token operator">&amp;</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">enum</span>
<span class="token punctuation">&#123;</span>
    ID_Hello <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token function">wxIMPLEMENT_APP</span><span class="token punctuation">(</span>MyApp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> <span class="token class-name">MyApp</span><span class="token double-colon punctuation">::</span><span class="token function">OnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    MyFrame <span class="token operator">*</span>frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MyFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    frame<span class="token operator">-></span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">MyFrame</span><span class="token double-colon punctuation">::</span><span class="token function">MyFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token function">wxFrame</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> wxID_ANY<span class="token punctuation">,</span> <span class="token string">"Hello World"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    wxMenu <span class="token operator">*</span>menuFile <span class="token operator">=</span> <span class="token keyword">new</span> wxMenu<span class="token punctuation">;</span>
    menuFile<span class="token operator">-></span><span class="token function">Append</span><span class="token punctuation">(</span>ID_Hello<span class="token punctuation">,</span> <span class="token string">"&amp;Hello...\tCtrl-H"</span><span class="token punctuation">,</span>
                     <span class="token string">"Help string shown in status bar for this menu item"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    menuFile<span class="token operator">-></span><span class="token function">AppendSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    menuFile<span class="token operator">-></span><span class="token function">Append</span><span class="token punctuation">(</span>wxID_EXIT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    wxMenu <span class="token operator">*</span>menuHelp <span class="token operator">=</span> <span class="token keyword">new</span> wxMenu<span class="token punctuation">;</span>
    menuHelp<span class="token operator">-></span><span class="token function">Append</span><span class="token punctuation">(</span>wxID_ABOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    wxMenuBar <span class="token operator">*</span>menuBar <span class="token operator">=</span> <span class="token keyword">new</span> wxMenuBar<span class="token punctuation">;</span>
    menuBar<span class="token operator">-></span><span class="token function">Append</span><span class="token punctuation">(</span>menuFile<span class="token punctuation">,</span> <span class="token string">"&amp;File"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    menuBar<span class="token operator">-></span><span class="token function">Append</span><span class="token punctuation">(</span>menuHelp<span class="token punctuation">,</span> <span class="token string">"&amp;Help"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SetMenuBar</span><span class="token punctuation">(</span> menuBar <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CreateStatusBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SetStatusText</span><span class="token punctuation">(</span><span class="token string">"Welcome to wxWidgets!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Bind</span><span class="token punctuation">(</span>wxEVT_MENU<span class="token punctuation">,</span> <span class="token operator">&amp;</span>MyFrame<span class="token double-colon punctuation">::</span>OnHello<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> ID_Hello<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Bind</span><span class="token punctuation">(</span>wxEVT_MENU<span class="token punctuation">,</span> <span class="token operator">&amp;</span>MyFrame<span class="token double-colon punctuation">::</span>OnAbout<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> wxID_ABOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Bind</span><span class="token punctuation">(</span>wxEVT_MENU<span class="token punctuation">,</span> <span class="token operator">&amp;</span>MyFrame<span class="token double-colon punctuation">::</span>OnExit<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> wxID_EXIT<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token class-name">MyFrame</span><span class="token double-colon punctuation">::</span><span class="token function">OnExit</span><span class="token punctuation">(</span>wxCommandEvent<span class="token operator">&amp;</span> event<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">Close</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token class-name">MyFrame</span><span class="token double-colon punctuation">::</span><span class="token function">OnAbout</span><span class="token punctuation">(</span>wxCommandEvent<span class="token operator">&amp;</span> event<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">wxMessageBox</span><span class="token punctuation">(</span><span class="token string">"This is a wxWidgets Hello World example"</span><span class="token punctuation">,</span>
                 <span class="token string">"About Hello World"</span><span class="token punctuation">,</span> wxOK <span class="token operator">|</span> wxICON_INFORMATION<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token class-name">MyFrame</span><span class="token double-colon punctuation">::</span><span class="token function">OnHello</span><span class="token punctuation">(</span>wxCommandEvent<span class="token operator">&amp;</span> event<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">wxLogMessage</span><span class="token punctuation">(</span><span class="token string">"Hello world from wxWidgets!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行成功后如下：</p>
<p><img src="/../img/wxWidgets/sucess.png" class="lazyload placeholder" data-srcset="/../img/wxWidgets/sucess.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230412002217028"></p>
<h2 id="FLTK踩坑之路：CodeBlocks配置FLTK库"><a href="#FLTK踩坑之路：CodeBlocks配置FLTK库" class="headerlink" title="FLTK踩坑之路：CodeBlocks配置FLTK库"></a>FLTK踩坑之路：CodeBlocks配置FLTK库</h2><h3 id="FLTK库"><a href="#FLTK库" class="headerlink" title="FLTK库"></a>FLTK库</h3><blockquote>
<p>系统环境：Win7旗舰版</p>
<p>CodeBlocks版本：20.3</p>
<p>FLTK版本：1.3.8</p>
<p>Mingw版本：4.2.1（CodeBlocks自带的编译器，无需额外配置编译器）</p>
</blockquote>
<span id="more"></span>

<h4 id="FLTK历史"><a href="#FLTK历史" class="headerlink" title="FLTK历史"></a>FLTK历史</h4><p>FLTK正如他的名字Fast Light Tool Kit，是一个跨平台C++的GUI工具包，适用于 UNIX&#x2F;Linux、Windows和Mac OS；FLTK 提供了很多GUI 功能，并通过 OpenGL及其内置的 GLUT 仿真支持 3D 图形。</p>
<h4 id="FLTK特点"><a href="#FLTK特点" class="headerlink" title="FLTK特点"></a>FLTK特点</h4><ol>
<li>兼容GLUT库</li>
<li>兼容XForms库</li>
<li>支持 X11 和 WIN32 上的 OpenGL</li>
<li>非常小且快速的便携式二维绘图库</li>
<li>交互式用户界面构建器程序</li>
<li>sizeof(Fl_Widget) &#x3D;&#x3D;64</li>
<li>直接在核心库上编写以实现最高速度，并针对代码大小和性能进行了优化</li>
</ol>
<h4 id="FLTK缺点"><a href="#FLTK缺点" class="headerlink" title="FLTK缺点"></a>FLTK缺点</h4><ol>
<li>不支持GB2312&#x2F;GBK中文字符编码</li>
<li>对于大型复杂的GUI比较吃力，推荐使用QT</li>
</ol>
<h4 id="CodeBlocks集成FLTK"><a href="#CodeBlocks集成FLTK" class="headerlink" title="CodeBlocks集成FLTK"></a>CodeBlocks集成FLTK</h4><p>在官网<a href="https://www.fltk.org/">FLTK</a> 下载FLTK的源码，我下载的是<a href="https://www.fltk.org/pub/fltk/1.3.8/fltk-1.3.8-source.tar.gz"><code>fltk-1.3.8-source.tar.gz</code></a>，下载完后进行解压，使用CMake进行编译，然后使用codeblocks打开，FLTK.cbp文件进行编译，得到编译后的文件如下：</p>
<p><img src="https://s1.ax1x.com/2022/07/07/jwPqLd.png" class="lazyload placeholder" data-srcset="https://s1.ax1x.com/2022/07/07/jwPqLd.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="编译文件"></p>
<p>在编译的build文件夹下新建一个文件夹include，将FLTK的源文件的头文件FLTK复制到新建的文件夹include下面。打开CodeBlocks进行库的配置，添加头文件到搜索目录，添加库文件到搜索目录，链接库文件。</p>
<h4 id="第一个FLTK程序"><a href="#第一个FLTK程序" class="headerlink" title="第一个FLTK程序"></a>第一个FLTK程序</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FL/Fl.H></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FL/Fl_Window.H></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FL/Fl_Box.H></span></span>
<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//创建窗体:宽340,高180，窗体名为“Hello”</span>
    Fl_Window <span class="token operator">*</span>window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Window</span><span class="token punctuation">(</span><span class="token number">340</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//创建弹性盒子，内容为“Hello World”</span>
    Fl_Box <span class="token operator">*</span>box <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Box</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"Hello, World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置盒子的类型</span>
    box<span class="token operator">-></span><span class="token function">box</span><span class="token punctuation">(</span>FL_UP_BOX<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置盒子的字体样式</span>
    box<span class="token operator">-></span><span class="token function">labelfont</span><span class="token punctuation">(</span>FL_BOLD <span class="token operator">+</span> FL_ITALIC<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置盒子字体大小</span>
    box<span class="token operator">-></span><span class="token function">labelsize</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置盒子标签的类型</span>
    box<span class="token operator">-></span><span class="token function">labeltype</span><span class="token punctuation">(</span>FL_SHADOW_LABEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//窗体内容结束</span>
    window<span class="token operator">-></span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//显示窗口并进行事件循环</span>
    window<span class="token operator">-></span><span class="token function">show</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Fl</span><span class="token double-colon punctuation">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/../img/hello.png" class="lazyload placeholder" data-srcset="/../img/hello.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220709125525502"></p>
<h4 id="FLTK按钮"><a href="#FLTK按钮" class="headerlink" title="FLTK按钮"></a>FLTK按钮</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FL/Fl.H></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FL/Fl_Window.H></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FL/Fl_Button.H></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FL/Fl_Return_Button.H></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FL/Fl_Light_Button.H></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FL/Fl_Repeat_Button.H></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FL/Fl_Round_Button.H></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FL/Fl_Check_Button.H></span></span>
Fl_Box <span class="token operator">*</span>box <span class="token operator">=</span> <span class="token punctuation">(</span>Fl_Box<span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">confirm_cb</span><span class="token punctuation">(</span>Fl_Widget <span class="token operator">*</span>w<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>data <span class="token operator">=</span> <span class="token string">"I Am Sad!"</span><span class="token punctuation">;</span>
    <span class="token comment">//创建窗体:宽340,高180，窗体名为“Demo02”</span>
    Fl_Window <span class="token operator">*</span>window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Window</span><span class="token punctuation">(</span><span class="token number">340</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token string">"Demo02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//创建弹性盒子</span>
    box <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Box</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"I Am Happy!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    box<span class="token operator">-></span><span class="token function">box</span><span class="token punctuation">(</span>FL_UP_BOX<span class="token punctuation">)</span><span class="token punctuation">;</span>
    box<span class="token operator">-></span><span class="token function">labelfont</span><span class="token punctuation">(</span>FL_BOLD <span class="token operator">+</span> FL_ITALIC<span class="token punctuation">)</span><span class="token punctuation">;</span>
    box<span class="token operator">-></span><span class="token function">labelsize</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    box<span class="token operator">-></span><span class="token function">labeltype</span><span class="token punctuation">(</span>_FL_SHADOW_LABEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    box<span class="token operator">-></span><span class="token function">labelcolor</span><span class="token punctuation">(</span>FL_BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//创建标准按钮</span>
    Fl_Button <span class="token operator">*</span>btn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Button</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"Change Mood"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    btn<span class="token operator">-></span><span class="token function">color</span><span class="token punctuation">(</span>FL_WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    btn<span class="token operator">-></span><span class="token function">labelfont</span><span class="token punctuation">(</span>FL_BOLD<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//绑定快捷键</span>
    btn<span class="token operator">-></span><span class="token function">shortcut</span><span class="token punctuation">(</span>FL_CTRL <span class="token operator">+</span> <span class="token char">'t'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    btn<span class="token operator">-></span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Fl_Callback<span class="token operator">*</span><span class="token punctuation">)</span>confirm_cb<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//创建返回按钮</span>
    Fl_Return_Button <span class="token operator">*</span>retBtn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Return_Button</span><span class="token punctuation">(</span><span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"Return"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    retBtn<span class="token operator">-></span><span class="token function">color</span><span class="token punctuation">(</span>FL_WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    retBtn<span class="token operator">-></span><span class="token function">labelfont</span><span class="token punctuation">(</span>FL_BOLD<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//创建重复按钮</span>
    Fl_Repeat_Button <span class="token operator">*</span>repBtn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Repeat_Button</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"Repeat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    repBtn<span class="token operator">-></span><span class="token function">color</span><span class="token punctuation">(</span>FL_WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    repBtn<span class="token operator">-></span><span class="token function">labelfont</span><span class="token punctuation">(</span>FL_BOLD<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//创建开关按钮</span>
    Fl_Light_Button <span class="token operator">*</span>lgBtn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Light_Button</span><span class="token punctuation">(</span><span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"Light"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lgBtn<span class="token operator">-></span><span class="token function">color</span><span class="token punctuation">(</span>FL_WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    lgBtn<span class="token operator">-></span><span class="token function">labelfont</span><span class="token punctuation">(</span>FL_BOLD<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//创建单选按钮(矩形)</span>
    Fl_Round_Button <span class="token operator">*</span>rouBtn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Round_Button</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"Round"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rouBtn<span class="token operator">-></span><span class="token function">color</span><span class="token punctuation">(</span>FL_WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    rouBtn<span class="token operator">-></span><span class="token function">labelfont</span><span class="token punctuation">(</span>FL_BOLD<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//创建单选按钮(圆形)</span>
    Fl_Check_Button <span class="token operator">*</span>checkBtn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Check_Button</span><span class="token punctuation">(</span><span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"Check"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    checkBtn<span class="token operator">-></span><span class="token function">color</span><span class="token punctuation">(</span>FL_WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    checkBtn<span class="token operator">-></span><span class="token function">labelfont</span><span class="token punctuation">(</span>FL_BOLD<span class="token punctuation">)</span><span class="token punctuation">;</span>
    window<span class="token operator">-></span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//显示窗口并进行事件循环</span>
    window<span class="token operator">-></span><span class="token function">show</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Fl</span><span class="token double-colon punctuation">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">confirm_cb</span><span class="token punctuation">(</span>Fl_Widget <span class="token operator">*</span>w<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        box<span class="token operator">-></span><span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        box<span class="token operator">-></span><span class="token function">label</span><span class="token punctuation">(</span><span class="token string">"I Am Happy!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/../img/buttons.png" class="lazyload placeholder" data-srcset="/../img/buttons.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220709125429727"></p>
<h4 id="FLTK文本框"><a href="#FLTK文本框" class="headerlink" title="FLTK文本框"></a>FLTK文本框</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FL/Fl.H></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FL/Fl_Window.H></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FL/Fl_Input.H></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FL/Fl_Output.H></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FL/Fl_Multiline_Input.H></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FL/Fl_Multiline_Output.H></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FL/Fl_Text_Editor.H></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FL/Fl_Help_View.H></span></span>
<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//创建窗体:宽340,高180，窗体名为“Demo03”</span>
    Fl_Window <span class="token operator">*</span>window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Window</span><span class="token punctuation">(</span><span class="token number">340</span><span class="token punctuation">,</span> <span class="token number">540</span><span class="token punctuation">,</span> <span class="token string">"Demo03"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//创建普通输入文本框(可以修改文本框的值)</span>
    Fl_Input <span class="token operator">*</span>input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Input</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"Enter a Value:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    input<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">"I am input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//创建普通输出文本框</span>
    Fl_Output <span class="token operator">*</span>output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Output</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"Print a Value:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    output<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">"I am output"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//创建多行输入文本框</span>
    Fl_Multiline_Input <span class="token operator">*</span>multiInput <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Multiline_Input</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"Enter a Value:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    multiInput<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">"I am multinput"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//创建多行输出文本框</span>
    Fl_Multiline_Output <span class="token operator">*</span>multioutput <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Multiline_Output</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"Print a Value:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    multioutput<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">"I am multioutput!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//创建Text展板</span>
    Fl_Text_Buffer <span class="token operator">*</span>buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Text_Buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Fl_Text_Display <span class="token operator">*</span>disp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Text_Display</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">,</span> <span class="token number">340</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"Text Display"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    disp<span class="token operator">-></span><span class="token function">buffer</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>
    buff<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"line one\nline two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    disp<span class="token operator">-></span><span class="token function">linenumber_width</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//创建一个带滚动的多行input框</span>
    Fl_Help_View <span class="token operator">*</span>help <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Help_View</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">440</span><span class="token punctuation">,</span> <span class="token number">340</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"Help View Display"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    help<span class="token operator">-></span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"./main.cpp.save"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//窗体内容结束</span>
    window<span class="token operator">-></span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//显示窗口并进行事件循环</span>
    window<span class="token operator">-></span><span class="token function">show</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Fl</span><span class="token double-colon punctuation">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/../img/input.png" class="lazyload placeholder" data-srcset="/../img/input.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220711152309741"></p>
<h4 id="FLTK滑块"><a href="#FLTK滑块" class="headerlink" title="FLTK滑块"></a>FLTK滑块</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FL/Fl.H></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FL/Fl_Window.H></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FL/Fl_Box.H></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FL/Fl_Counter.H></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FL/Fl_Dial.H></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FL/Fl_Roller.H></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FL/Fl_Scrollbar.H></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FL/Fl_Slider.H></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FL/Fl_Value_Slider.H></span></span>
<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//创建窗体:宽340,高180，窗体名为“Slider”</span>
    Fl_Window <span class="token operator">*</span>window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Window</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">,</span> <span class="token string">"Slider"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Fl_Box <span class="token operator">*</span>item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Box</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">,</span> <span class="token string">"ItemOne"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">color</span><span class="token punctuation">(</span>FL_WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">box</span><span class="token punctuation">(</span>FL_UP_BOX<span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token operator">-></span><span class="token function">align</span><span class="token punctuation">(</span>FL_ALIGN_BOTTOM<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//创建box</span>
    Fl_Box <span class="token operator">*</span>box <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Box</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token string">"Fl_Slider"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    box<span class="token operator">-></span><span class="token function">color</span><span class="token punctuation">(</span>FL_WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    box<span class="token operator">-></span><span class="token function">box</span><span class="token punctuation">(</span>FL_UP_BOX<span class="token punctuation">)</span><span class="token punctuation">;</span>
    box<span class="token operator">-></span><span class="token function">align</span><span class="token punctuation">(</span>FL_ALIGN_BOTTOM<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//Fl_Slider</span>
    Fl_Slider <span class="token operator">*</span>slider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Slider</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    slider<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span>FL_VERTICAL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    slider<span class="token operator">-></span><span class="token function">color</span><span class="token punctuation">(</span>FL_RED<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Fl_Slider <span class="token operator">*</span>sliderTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Slider</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sliderTwo<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span>FL_VERT_FILL_SLIDER<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Fl_Slider <span class="token operator">*</span>sliderThree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Slider</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sliderThree<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span>FL_VERT_NICE_SLIDER <span class="token punctuation">)</span><span class="token punctuation">;</span>
    Fl_Slider <span class="token operator">*</span>sliderFour <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Slider</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sliderFour<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span>FL_VERT_NICE_SLIDER <span class="token punctuation">)</span><span class="token punctuation">;</span>
    Fl_Slider <span class="token operator">*</span>sliderFive <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Slider</span><span class="token punctuation">(</span><span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sliderFive<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span>FL_HORIZONTAL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Fl_Slider <span class="token operator">*</span>sliderSix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Slider</span><span class="token punctuation">(</span><span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sliderSix<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span>FL_HOR_FILL_SLIDER<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Fl_Slider <span class="token operator">*</span>sliderSeven <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Slider</span><span class="token punctuation">(</span><span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sliderSeven<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span>FL_HOR_NICE_SLIDER<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//Fl_Scrollbar</span>
    Fl_Box <span class="token operator">*</span>boxScorll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Box</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token string">"Fl_Scrollbar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    boxScorll<span class="token operator">-></span><span class="token function">color</span><span class="token punctuation">(</span>FL_WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    boxScorll<span class="token operator">-></span><span class="token function">box</span><span class="token punctuation">(</span>FL_UP_BOX<span class="token punctuation">)</span><span class="token punctuation">;</span>
    boxScorll<span class="token operator">-></span><span class="token function">align</span><span class="token punctuation">(</span>FL_ALIGN_BOTTOM<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Fl_Scrollbar <span class="token operator">*</span>sbar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Scrollbar</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Fl_Scrollbar <span class="token operator">*</span>sbarTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Scrollbar</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sbarTwo<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span>FL_HORIZONTAL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//Fl_Counter</span>
    Fl_Box <span class="token operator">*</span>boxCot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Box</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token string">"Fl_Counter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    boxCot<span class="token operator">-></span><span class="token function">color</span><span class="token punctuation">(</span>FL_WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    boxCot<span class="token operator">-></span><span class="token function">box</span><span class="token punctuation">(</span>FL_UP_BOX<span class="token punctuation">)</span><span class="token punctuation">;</span>
    boxCot<span class="token operator">-></span><span class="token function">align</span><span class="token punctuation">(</span>FL_ALIGN_BOTTOM<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Fl_Counter <span class="token operator">*</span>cot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Counter</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Fl_Counter <span class="token operator">*</span>cotTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Counter</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">390</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cotTwo<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span>FL_SIMPLE_COUNTER<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Fl_Box <span class="token operator">*</span>itemTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Box</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">,</span> <span class="token string">"ItemTwo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    itemTwo<span class="token operator">-></span><span class="token function">color</span><span class="token punctuation">(</span>FL_WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    itemTwo<span class="token operator">-></span><span class="token function">box</span><span class="token punctuation">(</span>FL_UP_BOX<span class="token punctuation">)</span><span class="token punctuation">;</span>
    itemTwo<span class="token operator">-></span><span class="token function">align</span><span class="token punctuation">(</span>FL_ALIGN_BOTTOM<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//Fl_Roller</span>
    Fl_Box <span class="token operator">*</span>boxRoller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Box</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token string">"Fl_Roller"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    boxRoller<span class="token operator">-></span><span class="token function">color</span><span class="token punctuation">(</span>FL_WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    boxRoller<span class="token operator">-></span><span class="token function">box</span><span class="token punctuation">(</span>FL_UP_BOX<span class="token punctuation">)</span><span class="token punctuation">;</span>
    boxRoller<span class="token operator">-></span><span class="token function">align</span><span class="token punctuation">(</span>FL_ALIGN_BOTTOM<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Fl_Roller <span class="token operator">*</span>roller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Roller</span><span class="token punctuation">(</span><span class="token number">280</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Fl_Roller <span class="token operator">*</span>rollerTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Roller</span><span class="token punctuation">(</span><span class="token number">320</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rollerTwo<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span>FL_HORIZONTAL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//Fl_Dial</span>
    Fl_Box <span class="token operator">*</span>boxDial <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Box</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token string">"Fl_Dial"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    boxDial<span class="token operator">-></span><span class="token function">color</span><span class="token punctuation">(</span>FL_WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    boxDial<span class="token operator">-></span><span class="token function">box</span><span class="token punctuation">(</span>FL_UP_BOX<span class="token punctuation">)</span><span class="token punctuation">;</span>
    boxDial<span class="token operator">-></span><span class="token function">align</span><span class="token punctuation">(</span>FL_ALIGN_BOTTOM<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Fl_Dial <span class="token operator">*</span>dial <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Dial</span><span class="token punctuation">(</span><span class="token number">280</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Fl_Dial <span class="token operator">*</span>dialTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Dial</span><span class="token punctuation">(</span><span class="token number">330</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dialTwo<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span>FL_LINE_DIAL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Fl_Dial <span class="token operator">*</span>dialThree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Dial</span><span class="token punctuation">(</span><span class="token number">380</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dialThree<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span>FL_FILL_DIAL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//Fl_Value_Slider</span>
    Fl_Box <span class="token operator">*</span>boxValue_Slider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Box</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token string">"Fl_Value_Slider"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    boxValue_Slider<span class="token operator">-></span><span class="token function">color</span><span class="token punctuation">(</span>FL_WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    boxValue_Slider<span class="token operator">-></span><span class="token function">box</span><span class="token punctuation">(</span>FL_UP_BOX<span class="token punctuation">)</span><span class="token punctuation">;</span>
    boxValue_Slider<span class="token operator">-></span><span class="token function">align</span><span class="token punctuation">(</span>FL_ALIGN_BOTTOM<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Fl_Value_Slider <span class="token operator">*</span>vSlider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Value_Slider</span><span class="token punctuation">(</span><span class="token number">280</span><span class="token punctuation">,</span> <span class="token number">340</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Fl_Value_Slider <span class="token operator">*</span>vSliderTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Fl_Value_Slider</span><span class="token punctuation">(</span><span class="token number">320</span><span class="token punctuation">,</span> <span class="token number">380</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    vSliderTwo<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span>FL_HORIZONTAL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//窗体内容结束</span>
    window<span class="token operator">-></span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//显示窗口并进行事件循环</span>
    window<span class="token operator">-></span><span class="token function">show</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Fl</span><span class="token double-colon punctuation">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/../img/slider.png" class="lazyload placeholder" data-srcset="/../img/slider.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220711171656646"></p>
]]></content>
      <categories>
        <category>IDE</category>
      </categories>
      <tags>
        <tag>IDE</tag>
        <tag>CodeBlocks</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机等级考试</title>
    <url>/2023/03/24/ComputeRankExam/</url>
    <content><![CDATA[<h1 id="计算机三级填空题汇总"><a href="#计算机三级填空题汇总" class="headerlink" title="计算机三级填空题汇总"></a>计算机三级填空题汇总</h1><ul>
<li><p>设有课程表（课程号，课程名，学分，先修课程号)，已知某应用程序需要列出数据库原理’课程的一门先修课程，查询结果要求输出（课程名，学分，先修课名称，先修课学分)，可以用<code>自</code>连接操作在一个查询中实现此功能。</p>
</li>
<li><p>当用户在一个关系表的某一列上建立一个非聚集索引(该表没有聚集索引)时，数据库管理系统会自动为该索引维护一个索引结构。该索引结构中的记录是由<code>索引列列值</code>和它相对应的指针构成的。</p>
</li>
<li><p>数据仓库是一个面向主题、集成的、时变的、非易失的数据集合，支持管理部门的决策过程，数据仓库通过数据转移从多个数据源提取数据，为了解决不同数据源格式上的不统一，需要进行的数据操作是<code>转换</code>。</p>
</li>
<li><p>Google的云数据库是一个分布式的结构化数据存储系统，称作<code>Big Table</code>。</p>
</li>
<li><p>在T-SQL中，提取cur1游标中相对于当前行向下第5行数据的语句是：FETCH  <code>RELATIVE</code> 5 FROM cur1 …</p>
</li>
<li><p>数据库管理系统提供了数据定义语言(DDL)，用于定义各种数据库对象。数据定义语句经DDL编译器编译后，各种对象的描述信息存放在数据库的<code>数据字典</code>中。</p>
</li>
<li><p>关系数据库中要求关系的主码不能为空，这属于数据模型三要素中的<code>完整性约束</code>。</p>
</li>
<li><p>设有商品表（商品号，商品名，商品类别），其中商品号为主码，商品名和商品类别不为空。现要统计商品数量最多的前3类商品（包括并列情况），希望列出商品类别和商品数量。请补全下列语句：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>TOP 3 WITH TIES<span class="token punctuation">`</span></span> 商品类别，<span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> 商品数量
<span class="token keyword">FROM</span> 商品表
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 商品类别
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>在SQL Server2008中，每个数据页可存储8060字节的数据。设表T有10000行数据，每行占用4031字节，则存储该表数据大约需要<code>80MB</code>存储空间，其空间利用率大约是<code>50</code>%。（存储空间和空间利用率均保留到整数，小数点后按四舍五入处理）</p>
</li>
<li><p>使用约束可以保证数据库中数据的正确性，其中<code>UNIQUE</code>约束允许出现空值但不允许出现重复值。</p>
</li>
<li><p>在SQL Server2008中，设log1是SQL Server身份验证模式的数据库服务器登录帐户。现要授予1og1具有创建数据库的权限，请补全下列语句：EXEC sp_addsrvrolemember  ‘log1’, ‘<code>dbcreator</code>‘。</p>
</li>
<li><p>数据库管理系统一般通过周期性检查<code>事务等待</code>图来实现死锁检测。</p>
</li>
<li><p>一个事务执行过程中，其正在访问的数据被其他事务修改，导致处理结果不正确。这是由于不满足并发事务间的<code>隔离</code>性而引起的。</p>
</li>
<li><p>在数据库系统出现系统故障后进行恢复时，对于事务T,如果在日志文件中有BEGIN TRANSACTION记录，也有COMMIT记录，但其对数据的修改没有写到数据库中，则数据库管理系统处理这种事务时应执行的操作是<br><code>REDO</code>。</p>
</li>
<li><p>设某并行数据库采用一台具有14个刀片的刀片服务器，每个刀片具有独立的内存和磁盘，各刀片之间通过刀片服务器上的以太网交换机实现通信，则该并行数据库采用的体系结构是<code>无共享</code>结构。</p>
</li>
<li><p>数据仓库是一个面向<code>主题</code>的、正确的、集成的、非易失的、且随时间变化的数据集合。</p>
</li>
<li><p>粒度是反映数据库系统中综合程度的指标。设有表T1(商品标识，销售时间，销售量)、T2(商品标识，日期，总销售量)和T3(商品类别，月份，总销售量)，其中粒度最大的表是<code>T3</code>。</p>
</li>
<li><p>数据库管理系统为三级模式结构提供了两层映像机制，其中模式&#x2F;内模式映像提供了<code>物理</code>独立性。</p>
</li>
<li><p>按照数据库应用系统生命周期模型，系统设计阶段细分为概念设计、<code>逻辑</code>设计和物理设计三个步骤。</p>
</li>
<li><p>设用UL设计某数据库应用系统，设计人员规划了一组应用程序集，该集合由动态链接库和可执行程序构成。为了展现这些应用程序集间的组织和依赖关系以对源代码、可执行程序的发布等进行系统建模，应采用的UL图是<code>组件</code>图。</p>
</li>
<li><p>设有学生表（学号，姓名，所在系名）和选课表（学号，课程号，成绩）。现要建立统计每个系选课人数的视图。请补全下列语句：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> V1<span class="token punctuation">(</span>系名，人数<span class="token punctuation">)</span> <span class="token keyword">AS</span> 
<span class="token keyword">SELECT</span> 所在系名， <span class="token identifier"><span class="token punctuation">`</span>COUNT(DISTINCT 选课表.学号)<span class="token punctuation">`</span></span>
<span class="token keyword">FROM</span> 选课表 <span class="token keyword">JOIN</span> 学生表 <span class="token keyword">ON</span> 选课表<span class="token punctuation">.</span>学号<span class="token operator">=</span>学生表<span class="token punctuation">.</span>学号
<span class="token identifier"><span class="token punctuation">`</span>GROUP BY 所在系名<span class="token punctuation">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>设有课程表(课程号，课程名，学分，先修课程号)，已知某应用程序需要列出”数据库原理”课程的一门先修课程，查询结果要求输出（课程名，学分，先修课名称，先修课学分)，可以用<code>自</code>连接操作在一个查询中实现此功能。</p>
</li>
<li><p>在SQL Server2008的某用户数据库中，设有T表，现要在T表的c1列和c2列上建立一个复合唯一聚集索引，其c1列值重复率为20%，c2列为10%。请补全下列语句建立一个性能最优的索引：CREATE UNIQUE CLUSTERED INDEX Idx1 ON T(<code>c2,c1</code>)。</p>
</li>
<li><p>在SQL Server2008中，现要将T1表的C1列(int类型)定义为标识列，初值和增量值均为1。请补全下列语句：<br>CREATE TABLE T1 (C1 int <code>IDENTITY</code> (1,1)…)</p>
</li>
<li><p>在SQL Server2008中，设U1是SQL Server身份验证模式的数据库服务器登录账户，现希望U1在该数据库服务器上具有系统管理员权限。请补全下列语句：EXEC sp_addsrvrolemember ‘U1’,’<code>sysadmin</code>’</p>
</li>
<li><p>数据库管理系统中的加锁协议规定了事务的加锁时间、持锁时间和释放锁时间，其中<code>三级加锁或三级封锁</code>协议可以完全保证并发事务数据的一致性。</p>
</li>
<li><p>在数据库系统出现系统故障后进行恢复时，对于事务T,如果日志文件中有BEGIN TRANSACTION记录，而没有COMMIT或ROLLBACK记录，则数据库管理系统处理这种事务时应执行的操作是<code>UNDO</code>。</p>
</li>
<li><p>在动态转储中，利用转储文件只能将数据库恢复到转储过程中的某个状态，且转储文件中的数据可能不一致，只有和<code>日志</code>文件综合起来使用，才能将数据库恢复到一致状态。</p>
</li>
<li><p>通常数据库的转储机制有三种，分别是完全转储、差量转储和<code>增量</code>转储。</p>
</li>
<li><p>数据仓库是面向主题的、<code>集成</code>的、非易失的、随时间变化的数据集合，用来支持管理人员的决策。</p>
</li>
<li><p>在数据仓库设计和建设过程中，设计者需要调查用户的决策或数据处理需求，并将功能相近且需要相关联数据支持的需求进行归类，得到不同的需求集合，并在企业数据模型中寻找能够满足各个需求集合的数据集合，然后针对各个数据集合开展数据仓库数据模型的设计。这种设计方法称为<code>面向主题</code>的设计方法。</p>
</li>
<li><p>如果数据文件中数据记录排列顺序与索引文件中索引项的排列顺序一致，则此种索引被称为<code>聚集</code>索引。</p>
</li>
<li><p>关系数据库中的视图提供了<code>逻辑</code>数据独立性。</p>
</li>
<li><p>在UML中，用例模型由用例、系统和<code>角色</code>三部分组成。</p>
</li>
<li><p>在SQL Server2008中，用于判断游标数据提取状态的全局变量是<code>@@FETCH_STATUS</code>。</p>
</li>
<li><p>设在SQL Server2008某数据库中有购买表（顾客号，商品号，购买时间），现要查询C01顾客购买过但C02顾客没有购买过的商品。请补全下列语句。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>商品号<span class="token keyword">FROM</span>购买表VHERE顾客号<span class="token operator">=</span><span class="token string">'CO1'</span> 
<span class="token identifier"><span class="token punctuation">`</span>EXCEPT<span class="token punctuation">`</span></span>
<span class="token keyword">SELECT</span>商品号<span class="token keyword">FROM</span>购买表<span class="token keyword">WHERE</span>顾客号<span class="token operator">=</span><span class="token string">'CO2'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>在SQL Server2008中，计算两个日期之差的函数是<code>datediff()</code>。</p>
</li>
<li><p>设在SQL Server2008某数据库中有按如下格式定义的存储过程首部：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROC</span> P1
<span class="token variable">@x</span> <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token variable">@y</span> <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token variable">@z</span> <span class="token keyword">int</span> output <span class="token keyword">AS</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
请补全下列调用该存储过程的语句。
<span class="token keyword">DECLARE</span> <span class="token variable">@S</span> <span class="token keyword">int</span>
<span class="token keyword">EXEC</span> P120<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token variable">@S37</span>
<span class="token identifier"><span class="token punctuation">`</span>output<span class="token punctuation">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>在SQL Server2008中，每个数据页可存储8060字节的数据。设表T有10000行数据，每行占用3000字节，则存储该表数据大约需要<code>40</code>MB存储空间。(存储空间保留到整数，小数点后按四舍五入处理)</p>
</li>
<li><p>在SQL Server2008中，只具有修改数据库中全部用户表数据权限的系统角色是<code>db_datawriter</code>。</p>
</li>
<li><p>应用程序编写不当可能导致数据库中出现死锁，由于死锁导致的事务回滚属于数据库故障中的<code>事务内部</code>故障。</p>
</li>
<li><p>两阶段加锁协议可以保证事务调度的<code>可串行</code>性。</p>
</li>
<li><p>只复制最近一次数据库完全转储以来发生变化的数据的转储方式称为<code>差量</code>转储。</p>
</li>
<li><p>在分布式数据库中，采用<code>半</code>连接操作可以减少场地之间的数据传输量。</p>
</li>
<li><p>在进行多维分析时，如果将年销售额投影到每个月上来进行观察，这种分析动作被称为<code>钻取</code>。</p>
</li>
<li><p>在数据仓库中，元数据主要分为<code>技术</code>元数据和业务元数据两类。</p>
</li>
<li><p>数据库管理系统为用户和应用程序提供了<code>DDL</code>语言，用比语言可以定义数据库的模式结构，但此语言执行后的结果不能回滚。</p>
</li>
<li><p>当用户在一个关系表的某一列上建立一个非聚集索引（该表没有聚集索引）时，数据库管理系统会自动为该索引维护一个索引结构。该索引结构中的记录是由<code>索引列列值</code>和它相对应的指针构成的。</p>
</li>
<li><p>在UML中，当要描述状态之间的转换时，可通过<code>时间</code>图来体现时间因子的作用。</p>
</li>
<li><p>现要查询C01课程考试成绩最高的前3名学生的学号和成绩（包括并列的情况）。请补全下列语句：<br>SELECT <code>TOP </code>3 学号，成绩 FROM 选课表<br>WHERE 课程号 &#x3D; ‘C01<br>ORDER BY 成绩 DESC</p>
</li>
<li><p>在SQL Server2008中，能够出现在SELECT语句目标列中的用户自定义函数是<code>标量</code>函数。</p>
</li>
<li><p>设要在表T上建立一个针对插入操作的前触发器，请补全下列语句：<br>CREATE TRIGGER tri_insert ON T36 <code>INSTEAD OF</code> INSERT</p>
</li>
<li><p>SQL Server2008中声明游标的语句为：DECLARE x cursor37 <code>FOR</code> SELECT..</p>
</li>
<li><p>在SQL Server2008中，用户数据库中主要数据文件的扩展名为.<code>MDF或mdf</code>。</p>
</li>
<li><p>设在SQL Server2008某数据库中，要设置不允许用户U1获得对表T数据的删除权限，请补全实现该授权操作的SQL语句：<code>DENY DELETE</code> ON T TO U1</p>
</li>
<li><p>优化SQL语句执行效率属于数据库应用系统<code>运行管理与维护</code>阶段的任务。</p>
</li>
<li><p>为避免活锁现象的发生，数据库管理系统采用<code>先来先服务</code>策略处理事务的加锁请求。</p>
</li>
<li><p>数据库系统出现故障是不可避免的。当数据库系统出现事务故障和系统故障时需使用数据库的<code>日志</code>文件进行恢复。</p>
</li>
<li><p>分布式数据库的<code>分片</code>透明性是最高级别的透明性，它使得在编写程序时用户只需要对全局关系进行操作，这样简化了应用程序的维护。</p>
</li>
<li><p>在OLAP的实现方式中，以多维数组作为存储结构的被称作<code>M</code>OLAP。</p>
</li>
<li><p>在数据仓库环境中，粒度是一个重要的设计问题。粒度越<code>小</code>，细节程度越高，能回答的查询就越多，数据量就比较大。</p>
</li>
<li><p>在数据库事务<code>概要</code>设计阶段，使用read和write原语来表达存取操作。</p>
</li>
<li><p>数据库在运行过程中，由于突然停电等情况，导致系统停止运行的故障称为<code>系统</code>故障。</p>
</li>
<li><p>分布式数据库系统由局部数据库管理系统、<code>全局数据库管理系统</code>、全局数据字典、通信管理四部分组成。</p>
</li>
<li><p>在数据库性能优化中，建立物化视图和聚集(Cluster) 属于<code>存储</code>优化方法。</p>
</li>
<li><p>数据库维护过程中，管理员应定期对数据库进行<code>重组</code>，即对数据库进行整理回收碎块,重新安排数据的存储，重建索引等操作。</p>
</li>
<li><p><code>局部数据模型透明性</code>处于分配模式与局部概念模式之间,它使用户在编写应用程序时不但要了解全局数据的分片情况，还要了解各片段的副本复制情况及各片段和它们副本的场地位置分配情况，但是不需要了解各场地上数据库的数据模型。</p>
</li>
<li><p>在分布式数据库的数据分配中，若全局数据存在多个副本,在每个物理场地中都保存一个完整的数据副本, 本策略属于<code>全复制</code>式。</p>
</li>
<li><p>在UML提供的图中，<code>活动</code>图主要用于描述系统、用例和程序模块中逻辑流程的先后或并行执行次序。</p>
</li>
<li><p>在数据库操作过程中，因发生了违反完整性约束而导致事务中止的故障属于<code>非预期</code>的事务内部故障。</p>
</li>
<li><p>在SQL Server 2008中，请补全下列声明游标MyYB的语句:DECLARE MyYB<code> cursor</code> FOR SELECT * FROM T1</p>
</li>
<li><p>在SQL Server 2008中，事务日志备份仅可用在完整恢复模式和<code>大容量日志</code>恢复模式中。</p>
</li>
<li><p>从安全性角度考虑,防火墙技术是用来保证数据库应用系统的<code>网络</code>环境安全的。</p>
</li>
<li><p>在SQL Server 2008中，若要提取游标cur1当前行指针所指的前一行数据,使用的选项是: FETCH <code>PRIOR </code>FROM cur1</p>
</li>
<li><p>在关联规则挖掘中，关联规则的成立与否一般用<code>支持度</code>和置信度两个指标进行描述。</p>
</li>
<li><p>在UML图中，描述系统中硬件和软件的物理配置情况和系统体系结构的图称为<code>部署</code>图。</p>
</li>
<li><p>将经常一起使用的多个表中的数据行按照其公共列值存储在一起，这种表存储方法为<code>聚集</code>。</p>
</li>
<li><p>在SQL Server 2008中，使用T-SQL语句进行数据库备份操作,需要使用 <code>DIFFERENTIAL</code>关键词指定该备份为差异备份。</p>
</li>
<li><p>在数据仓库的导出数据或物化视图(实视图)的维护策略中，只在用户查询时发现数据已经过期才进行更新的策略称<code>延时</code>维护策略。</p>
</li>
<li><p>SQL Server 2008提供了4个排名函数,其中<code>RANK</code>函数返回结果集中每行数据在每个分区内的排名,組每个分区内的排名从1开始,但排名中间数值可能有间断。</p>
</li>
<li><p>SQL Server 2008提供了4个排名函数,其中<code>DENSE _RANK</code>函数返回结果集中每行数据在每个分区内的排名,并且每个分区内行的排名从1开始,排名可重复且不间断。</p>
</li>
<li><p>在数据库恢复过程中，检查点技术大幅度减少了数据库恢复时执行的日志<code>恢复</code>操作数量。</p>
</li>
<li><p>分布式数据库中，位置独立性、数据分片独立性和数据复制独立性形成了分布式数据库系统中的<code>分布</code>透明性。</p>
</li>
<li><p>对一个数据集的数据进行分组，使得每一组内的数据尽可能相似而不同组间的数据尽可能的不同, 这样数据挖掘方法称为<code>聚类</code>算法。</p>
</li>
<li><p>SQL Server 2008中有3种类型的事务日志备份,对可能损坏的数据库进行日志备份的方式是尾部日志备份。</p>
</li>
<li><p>在数据仓库环境中,数据的粒度设计是一 种重要的设计问题，它会影响到数据仓库中数据量以及系统能回答的查询的类型。</p>
</li>
<li><p>在SQL Server 2008中，数据库镜像分为<code>高可用</code>操作模式、<code>高保护</code>操作模式和<code>高性能</code>操作模式。</p>
</li>
<li><p>并行数据库有多种体系结构,其中所有处理机通过网络共享一个公共的主存储器的结构称为<code>共享内存</code>结构。</p>
</li>
<li><p>设在SQL Server某数据库中有表选课（(学号，课程号，成绩)，现要定义不能删除成绩不及格学生的选课记录的触发器。请补全下列语句:</p>
<p>CREATE TRIGGER tri_del ON 选课 AFTER DELETE AS</p>
<p>IF EXISTS( SELECT FROM <code>DELETED</code> WHERE成绩&lt;60 )</p>
<p>ROLLBACK</p>
</li>
<li><p>根据事物发展的延续性和规律性，基于变量历史时间点上的顺序数据，推测变量未来后续时间点的发展趋势的任务称为<code>时间序列</code>分析。</p>
</li>
<li><p>为经常作为查询条件的列建立索引的调优方法是典型的以空间换<code>时间</code>的调优方法。</p>
</li>
<li><p>在SQL Server 2008中，用户定义的角色属于<code>数据库</code>级别的角色。</p>
</li>
<li><p>SQL Server 2008支持的备份类型包括数据库备份、文件备份以及<code>事务日志</code>备份几种方式。</p>
</li>
<li><p>分片透明性是最高级别的透明性，位于全局概念模式与<code>分片</code>模式之间。</p>
</li>
<li><p>混合型OLAP是指将基于多维数据库的OLAP和基于<code>关系</code>数据库的OLAP结合起来。</p>
</li>
<li><p>SQL Server 2008中，记录SQL Server实例中所有系统级信息的系统数据库是<code>master</code>。</p>
</li>
<li><p>在并行数据库的数据划分策略中，散列划分和范围划分都有利于<code>点</code>查询。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机等级考试</category>
      </categories>
      <tags>
        <tag>Exam</tag>
      </tags>
  </entry>
  <entry>
    <title>Cpp学习</title>
    <url>/2022/06/19/Cpp/</url>
    <content><![CDATA[<h1 id="C-学习"><a href="#C-学习" class="headerlink" title="C++学习"></a>C++学习</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><blockquote>
<p>方便存放同类型的元素</p>
</blockquote>
<h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><p>一维数组数组名代表数组的首地址</p>
<p>一维数组名可以计算出数组在内存空间所占内存大小</p>
<h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><p>二维数组名代表二维数组的首地址，也可以查看某行的首地址</p>
<p>二维数组可以计算出数组在内存空间所占内存大小，也可以计算出某行所占内存大小</p>
<span id="more"></span>

<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><blockquote>
<p>作用：保存地址</p>
</blockquote>
<p>指针的定义：数据类型	*指针变量名<br>32位操作系统指针所占内存空间：4个字节</p>
<p>64位操作系统指针所占内存空间：8个字节</p>
<h3 id="指针的两大类型"><a href="#指针的两大类型" class="headerlink" title="指针的两大类型"></a>指针的两大类型</h3><p>空指针：</p>
<ol>
<li>指针变量指向内存编号为0的空间</li>
<li><strong>空指针指向内存无法访问</strong>，0~255内存编号给系统占用的，无法访问</li>
<li>可用于给指针变量初始化</li>
</ol>
<p>野指针：指针变量指向非法空间，要尽量避免</p>
<h3 id="const与指针结合"><a href="#const与指针结合" class="headerlink" title="const与指针结合"></a>const与指针结合</h3><p>const修饰指针称为常量指针:<strong>指针指向的值不能变，指针的指向可以变</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//	常量指针：指针指向的值不能变，指针的指向可以变</span>
	<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
	<span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span>
	p<span class="token operator">=</span><span class="token operator">&amp;</span>b<span class="token punctuation">;</span><span class="token comment">//指针的指向可以改，由指向a修改为指向b </span>
<span class="token comment">//	*p=b; 指向的值不能改 </span>
	cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>p<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>const修饰常量称为指针常量(此处为简称，为了方便记忆，事实上这样的称呼是不准确的，因为编译器可能每次为该变量分配的内存地址都不一样)：<strong>指针指向的值可以改，指针的指向不可以修改</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//	指针常量：指针指向的值可以改，指针的指向不可以修改</span>
	<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> <span class="token operator">*</span> <span class="token keyword">const</span> p<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
	<span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>p<span class="token operator">=</span>b<span class="token punctuation">;</span> <span class="token comment">//指向的值可以改</span>
<span class="token comment">//	p=&amp;b;//指针的指向不能改</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>p<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>const既修饰常量又修饰指针：指针的指向不能改，指针指向的值也不能改</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//	const既修饰常量又修饰指针：指针的指向不能改，指针指向的值也不能改</span>
	<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span> <span class="token keyword">const</span> p<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
	<span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span>
<span class="token comment">//	*p=b; //指向的值不可以改</span>
<span class="token comment">//	p=&amp;b;//指针的指向不能改</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>p<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="指针与数组"><a href="#指针与数组" class="headerlink" title="指针与数组"></a>指针与数组</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//	访问数组的第一种方式</span>
	<span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"利用指针访问数组元素:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> 
	p<span class="token operator">=</span>array<span class="token punctuation">;</span>
<span class="token comment">//	利用指针访问数组元素</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>p<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		p<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="指针与函数"><a href="#指针与函数" class="headerlink" title="指针与函数"></a>指针与函数</h3><p>值传递：不会改变实参的值</p>
<p>地址传递（引用传递）：会改变实参的值</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">swap2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//	指针函数</span>
<span class="token comment">//	值传递:不改变实参的值</span>
	<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"交换前:a:"</span><span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span><span class="token string">" b:"</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"交换后:a:"</span><span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span><span class="token string">" b:"</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token comment">//	引用传递：改变实参的值</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"交换前:a:"</span><span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span><span class="token string">" b:"</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token function">swap2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"交换后:a:"</span><span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span><span class="token string">" b:"</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> temp<span class="token punctuation">;</span>
	temp<span class="token operator">=</span>a<span class="token punctuation">;</span>
	a<span class="token operator">=</span>b<span class="token punctuation">;</span>
	b<span class="token operator">=</span>temp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">swap2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> temp<span class="token punctuation">;</span>
	temp<span class="token operator">=</span><span class="token operator">*</span>a<span class="token punctuation">;</span>
	<span class="token operator">*</span>a<span class="token operator">=</span><span class="token operator">*</span>b<span class="token punctuation">;</span>
	<span class="token operator">*</span>b<span class="token operator">=</span>temp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><blockquote>
<p>属于用户自定义的数据类型</p>
</blockquote>
<p>结构体定义语法：struct 结构体名 {结构体成员列表}；</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">people</span> <span class="token punctuation">&#123;</span>
	string name<span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
	<span class="token keyword">int</span> sex<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> p3<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>people p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//	1. struct 结构体名	变量名；</span>
	<span class="token keyword">struct</span> <span class="token class-name">people</span> p1<span class="token punctuation">;</span>
	p1<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"张三"</span><span class="token punctuation">;</span>
	p1<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>
	p1<span class="token punctuation">.</span>sex<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token function">display</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//	2. struct 结构体名	变量名=&#123;值1，值2&#125;；</span>
	<span class="token keyword">struct</span> <span class="token class-name">people</span> p2<span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token function">display</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//	3. 定义结构体时顺便创建变量；</span>
	p3<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"王五"</span><span class="token punctuation">;</span>
	p3<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">26</span><span class="token punctuation">;</span>
	p3<span class="token punctuation">.</span>sex<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
	<span class="token function">display</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>people p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"name:"</span><span class="token operator">&lt;&lt;</span>p<span class="token punctuation">.</span>name<span class="token operator">&lt;&lt;</span><span class="token string">" age:"</span><span class="token operator">&lt;&lt;</span>p<span class="token punctuation">.</span>age<span class="token operator">&lt;&lt;</span><span class="token string">" sex:"</span><span class="token operator">&lt;&lt;</span>p<span class="token punctuation">.</span>sex<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">people</span> <span class="token punctuation">&#123;</span>
	string name<span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//	结构体数组定义</span>
	people ps<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">&#123;</span>
		<span class="token punctuation">&#123;</span><span class="token string">"刘邦"</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span><span class="token string">"周瑜"</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">//	结构体遍历 </span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token string">"name:"</span><span class="token operator">&lt;&lt;</span>ps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token operator">&lt;&lt;</span><span class="token string">" age:"</span><span class="token operator">&lt;&lt;</span>ps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h3><p>作用：通过指针访问结构体中的成员</p>
<p>结构体变量通过.操作符访问，结构体指针通过-&gt;访问结构体成员</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">people</span> <span class="token punctuation">&#123;</span>
	string name<span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	people p1<span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	people <span class="token operator">*</span>p<span class="token operator">=</span><span class="token operator">&amp;</span>p1<span class="token punctuation">;</span>
<span class="token comment">//	利用结构体指针进行访问</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"name:"</span><span class="token operator">&lt;&lt;</span>p<span class="token operator">-></span>name<span class="token operator">&lt;&lt;</span><span class="token string">" age:"</span><span class="token operator">&lt;&lt;</span>p<span class="token operator">-></span>age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="内存四区"><a href="#内存四区" class="headerlink" title="内存四区"></a>内存四区</h2><h3 id="代码区"><a href="#代码区" class="headerlink" title="代码区"></a>代码区</h3><p>用途：存放<strong>函数体的二进制代码</strong>，由操作系统进行管理</p>
<p>代码区是共享的，共享是针对需要频繁执行的程序，只需要在内存中有一份代码即可</p>
<p>代码区是只读的，只读为了防止程序意外修改了指令</p>
<h3 id="栈区"><a href="#栈区" class="headerlink" title="栈区"></a>栈区</h3><p>用途：有编译器自动分配释放，存放<strong>函数的参数值、局部变量</strong>等</p>
<h3 id="堆区"><a href="#堆区" class="headerlink" title="堆区"></a>堆区</h3><p>用途：由程序员分配和释放，若程序员不分配释放，程序结束时由操作系统回收</p>
<p>使用new关键字进行内存申请，使用delete关键字进行内存释放，数组需要使用delete[]进行释放</p>
<h3 id="全局区"><a href="#全局区" class="headerlink" title="全局区"></a>全局区</h3><p>用途：存放<strong>全局变量、静态变量以及常量</strong></p>
<p>包含常量区、字符串常量和其他常量</p>
<p>包括<strong>全局变量、全局常量、静态变量和字符串常量</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token comment">//	全局变量</span>
<span class="token keyword">int</span> g<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> h<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment">//	全局常量</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//	局部变量</span>
	<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"&amp;a="</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>a<span class="token operator">&lt;&lt;</span><span class="token string">" &amp;b="</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token comment">//	局部常量</span>
	<span class="token keyword">const</span> <span class="token keyword">int</span> c<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">int</span> d<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"&amp;c="</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>c<span class="token operator">&lt;&lt;</span><span class="token string">" &amp;d="</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>d<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token comment">//	静态变量</span>
	<span class="token keyword">static</span> <span class="token keyword">int</span> e<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">static</span> <span class="token keyword">int</span> f<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"&amp;e="</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>e<span class="token operator">&lt;&lt;</span><span class="token string">" &amp;f="</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>f<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"&amp;g="</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>g<span class="token operator">&lt;&lt;</span><span class="token string">" &amp;h="</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>h<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"&amp;i="</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" &amp;j="</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>j<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token comment">//	字符串常量</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"&amp;str="</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token string">"hello world"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="C-特点"><a href="#C-特点" class="headerlink" title="C++特点"></a>C++特点</h2><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><blockquote>
<p>给内存地址取别名，本质是指针常量</p>
</blockquote>
<p>基本语法：数据类型 &amp;别名&#x3D;原名</p>
<p>注意事项：引用必须初始化，一旦初始化不可更改</p>
<p>引用做函数参数：可以简化指针修改实参</p>
<p>引用做函数返回值：可以作为函数左值，但是不要返回局部变量的引用</p>
<p>常引用：可以防止形参改变实参，即变为只读状态</p>
<h3 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h3><p>函数默认参数：返回值类型	函数名（参数&#x3D;默认值）{}，如果某个参数有默认值那么从这个默认值开始从左向右都得有默认值；函数声明有默认值，那么实现就不能有默认值。</p>
<p>函数的占位参数：调用时必须传递实参。</p>
<p>函数重载：同一个作用域，函数名称相同，函数的参数类型不同或者个数不同或者顺序不同；返回值不作为函数重载的条件。</p>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>ex:设计圆类，通过半径求周长</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PI</span> <span class="token expression"><span class="token number">3.14</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token operator">:</span>
		<span class="token comment">//半径</span>
		<span class="token keyword">float</span> radius<span class="token punctuation">;</span>
		<span class="token keyword">float</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span>PI<span class="token operator">*</span>radius<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	Circle c<span class="token punctuation">;</span>
	c<span class="token punctuation">.</span>radius<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"圆的周长为："</span><span class="token operator">&lt;&lt;</span>c<span class="token punctuation">.</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>访问权限：</p>
<table>
<thead>
<tr>
<th>权限类型</th>
<th>类内</th>
<th>类外</th>
</tr>
</thead>
<tbody><tr>
<td>public</td>
<td>允许</td>
<td>允许</td>
</tr>
<tr>
<td>protected</td>
<td>允许</td>
<td>不允许</td>
</tr>
<tr>
<td>private</td>
<td>允许</td>
<td>不允许</td>
</tr>
</tbody></table>
<p>对于protected儿子可以访问父亲的保护内容</p>
<p>对于private儿子不可以访问父亲的保护内容</p>
<h3 id="对象特性"><a href="#对象特性" class="headerlink" title="对象特性"></a>对象特性</h3><blockquote>
<p>空对象占用1bit的内存空间，编译器会给每个空对象也分配一个字节，是为了区分空对象的位置</p>
</blockquote>
<h4 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h4><p>不提供构造函数和析构函数，编译器会默认提供空实现的构造函数和析构函数。</p>
<p>构造函数（进行初始化操作）：类名（）{}</p>
<p>构造函数的分类：</p>
<ol>
<li>有参构造和无参构造</li>
<li>普通构造和拷贝构造</li>
</ol>
<p>调用方法：</p>
<ol>
<li>括号法：调用无参构造函数时别带小括号，否则编译器会认为是函数的声明</li>
<li>显示法：不能用拷贝构造函数初始化匿名对象，编译器会默认忽视小括号，从而造成重定义</li>
<li>隐式法</li>
</ol>
<p>调用规则：</p>
<ol>
<li>如果用户自定义有参构造函数，C++就不再提供默认无参构造函数，但是会提供默认拷贝构造函数</li>
<li>如果用户自定义拷贝构造函数，C++不在提供其他构造函数</li>
</ol>
<p>析构函数（进行销毁操作）：~类名（）{}</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"无参构造函数调用"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">Man</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"有参构造函数调用"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">Man</span><span class="token punctuation">(</span><span class="token keyword">const</span> Man <span class="token operator">&amp;</span>m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>name<span class="token operator">=</span>m<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>age<span class="token operator">=</span>m<span class="token punctuation">.</span>age<span class="token punctuation">;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"拷贝构造函数调用"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token operator">~</span><span class="token function">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"析构函数调用"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token keyword">private</span><span class="token operator">:</span>
		string name<span class="token punctuation">;</span>
		<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">/**
		调用方式:
		括号法
		显示法
		隐式法
	*/</span>
<span class="token comment">//	方式一:括号法</span>
	Man m<span class="token punctuation">;</span>
	Man <span class="token function">m1</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Man <span class="token function">m2</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">/*注意：调用无参构造函数时别带小括号，这一点可Java有所不同，
			同时使用this->而不是this.*/</span>
<span class="token comment">//	方式二：显示法</span>
	Man m3<span class="token operator">=</span><span class="token function">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Man m4<span class="token operator">=</span><span class="token function">Man</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Man m5<span class="token operator">=</span><span class="token function">Man</span><span class="token punctuation">(</span>m4<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//	匿名对象</span>
	<span class="token function">Man</span><span class="token punctuation">(</span><span class="token string">"赵四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">/*不能用拷贝构造函数初始化匿名对象
	Man(m5)==Man m5,编译器会忽略小括号
	*/</span>
<span class="token comment">//	方式三：隐式法</span>
	Man m6<span class="token operator">=</span>m5<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>拷贝构造函数的作用：</p>
<ol>
<li>使用一个已经创建完毕的对象来初始化新对象</li>
<li>值传递的方式传参</li>
<li>值方式返回局部对象</li>
</ol>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"默认构造函数调用"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">People</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"有参构造函数调用"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">People</span><span class="token punctuation">(</span><span class="token keyword">const</span> People <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>name<span class="token operator">=</span>p<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>age<span class="token operator">=</span>p<span class="token punctuation">.</span>age<span class="token punctuation">;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"拷贝构造函数调用"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		string name<span class="token punctuation">;</span>
		<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>People p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>
People <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	People <span class="token function">p</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//	方式一：用一个已经创建好的对象来初始化新对象</span>
<span class="token comment">//	People p("张三",18);</span>
<span class="token comment">//	People p1(p);</span>
<span class="token comment">//	方式二：用于函数传参</span>
<span class="token comment">//	test(p);</span>
<span class="token comment">//	方式三：用于返回局部对象</span>
	People p1<span class="token operator">=</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"name:"</span><span class="token operator">&lt;&lt;</span>p1<span class="token punctuation">.</span>name<span class="token operator">&lt;&lt;</span><span class="token string">" age:"</span><span class="token operator">&lt;&lt;</span>p1<span class="token punctuation">.</span>age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h4><p>浅拷贝：简单的赋值操作，会导致内存重复释放</p>
<p>深拷贝：在堆区重新申请空间，进行拷贝操作</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"无参构造函数"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">People</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">,</span><span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>height<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"有参构造函数"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">People</span><span class="token punctuation">(</span><span class="token keyword">const</span> People <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>name<span class="token operator">=</span>p<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>age<span class="token operator">=</span>p<span class="token punctuation">.</span>age<span class="token punctuation">;</span>
<span class="token comment">//			this->height=p.height;//为了解决浅拷贝所带来的内存重复释放的问题，在拷贝时主动向堆区申请一块内存空间</span>
			<span class="token keyword">this</span><span class="token operator">-></span>height<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此语句解决浅拷贝所带的问题 </span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"拷贝构造函数"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token operator">~</span><span class="token function">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>height<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">delete</span> height<span class="token punctuation">;</span>
				height<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"析构函数调用"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		string name<span class="token punctuation">;</span><span class="token comment">//姓名</span>
		<span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment">//年龄</span>
		<span class="token keyword">int</span> <span class="token operator">*</span>height<span class="token punctuation">;</span><span class="token comment">//身高</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	People <span class="token function">p</span><span class="token punctuation">(</span><span class="token string">"张胜男"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">170</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"name:"</span><span class="token operator">&lt;&lt;</span>p<span class="token punctuation">.</span>name<span class="token operator">&lt;&lt;</span><span class="token string">" age:"</span><span class="token operator">&lt;&lt;</span>p<span class="token punctuation">.</span>age<span class="token operator">&lt;&lt;</span><span class="token string">" height:"</span><span class="token operator">&lt;&lt;</span><span class="token operator">*</span>p<span class="token punctuation">.</span>height<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	People <span class="token function">p1</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"name:"</span><span class="token operator">&lt;&lt;</span>p1<span class="token punctuation">.</span>name<span class="token operator">&lt;&lt;</span><span class="token string">" age:"</span><span class="token operator">&lt;&lt;</span>p1<span class="token punctuation">.</span>age<span class="token operator">&lt;&lt;</span><span class="token string">" height:"</span><span class="token operator">&lt;&lt;</span><span class="token operator">*</span>p1<span class="token punctuation">.</span>height<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> 
<span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">People</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span><span class="token keyword">int</span> sex<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">age</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">sex</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">int</span> age<span class="token punctuation">;</span>
		<span class="token keyword">int</span> sex<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	People <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h4><ul>
<li><p>静态成员变量</p>
<ul>
<li>所有对象共享一份数据</li>
<li>在编译阶段分配内存</li>
<li><code>类内声明，类外初始化</code></li>
</ul>
</li>
<li><p>静态成员函数：可以通过对象或类名访问</p>
<ul>
<li>所有对象共享同一个函数</li>
<li><code>静态成员函数只能访问静态成员变量</code>，不能访问非静态成员变量</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">People</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">int</span> age<span class="token punctuation">;</span>
		<span class="token keyword">static</span> <span class="token keyword">int</span> sex<span class="token punctuation">;</span>
		<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"性别是:"</span><span class="token operator">&lt;&lt;</span>sex<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">//  类外初始化</span>
<span class="token keyword">int</span> People<span class="token double-colon punctuation">::</span>sex<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//	方式一：对象名</span>
	People <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	p<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//	方式二：类名</span>
	<span class="token class-name">People</span><span class="token double-colon punctuation">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h4 id="this指针与空指针"><a href="#this指针与空指针" class="headerlink" title="this指针与空指针"></a>this指针与空指针</h4><p>this的用途：解决命名冲突和制造链式调用</p>
<p>空指针也能访问成员函数，需要加以判断保证代码的健壮性</p>
<h4 id="常函数和常对象"><a href="#常函数和常对象" class="headerlink" title="常函数和常对象"></a>常函数和常对象</h4><ol>
<li>常函数内不可以修改成员属性</li>
<li>成员属性加mutable后就可以修改属性</li>
</ol>
<p>常对象只能调用常函数</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">People</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span><span class="token keyword">int</span> sex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token operator">-</span>sex<span class="token operator">=</span>sex<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
<span class="token comment">//		常函数 ，加const后实际上修饰的是this，则this指向的内容也不可以改 </span>
		<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"age:"</span><span class="token operator">&lt;&lt;</span>age<span class="token operator">&lt;&lt;</span><span class="token string">" sex:"</span><span class="token operator">&lt;&lt;</span>sex<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">int</span> age<span class="token punctuation">;</span>
		<span class="token keyword">int</span> sex<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3><h4 id="全局函数做友元"><a href="#全局函数做友元" class="headerlink" title="全局函数做友元"></a>全局函数做友元</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//	告诉编译器goodBrother是People的友元函数，可以访问People的private变量</span>
		<span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token function">goodBrother</span><span class="token punctuation">(</span>People <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>sitroom<span class="token operator">=</span><span class="token string">"客厅"</span><span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>bedroom<span class="token operator">=</span><span class="token string">"卧室"</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		string sitroom<span class="token punctuation">;</span>
	<span class="token keyword">private</span><span class="token operator">:</span>
		string bedroom<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">goodBrother</span><span class="token punctuation">(</span>People <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"好兄弟正在进入你的"</span><span class="token operator">&lt;&lt;</span>p<span class="token punctuation">.</span>sitroom<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"好兄弟正在进入你的"</span><span class="token operator">&lt;&lt;</span>p<span class="token punctuation">.</span>bedroom<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	People p<span class="token punctuation">;</span>
	<span class="token function">goodBrother</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="友元类"><a href="#友元类" class="headerlink" title="友元类"></a>友元类</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Brother</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//		声明People是Brother的友元类</span>
		<span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">Brother</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			wc<span class="token operator">=</span><span class="token string">"厕所"</span><span class="token punctuation">;</span>
			bathroom<span class="token operator">=</span><span class="token string">"浴室"</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		string wc<span class="token punctuation">;</span>
	<span class="token keyword">private</span><span class="token operator">:</span>
		string bathroom<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			sittingroom<span class="token operator">=</span><span class="token string">"客厅"</span><span class="token punctuation">;</span>
			bedroom<span class="token operator">=</span><span class="token string">"卧室"</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		string sittingroom<span class="token punctuation">;</span>
		<span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>Brother <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"正在访问好兄弟的"</span><span class="token operator">&lt;&lt;</span>b<span class="token punctuation">.</span>bathroom<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token keyword">private</span><span class="token operator">:</span>
		string bedroom<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	Brother b<span class="token punctuation">;</span>
	People p<span class="token punctuation">;</span>
	p<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="成员函数做友元"><a href="#成员函数做友元" class="headerlink" title="成员函数做友元"></a>成员函数做友元</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span>
<span class="token comment">//成员函数做友元</span>
<span class="token keyword">class</span> <span class="token class-name">Building</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">GoodGay</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">GoodGay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">GoodGay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 让 visit 访问Building中的私有函数</span>
    <span class="token keyword">void</span> <span class="token function">visit2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 让 visit2 不可以访问Building中的私有函数</span>
    Building <span class="token operator">*</span>building<span class="token punctuation">;</span><span class="token comment">//指向对象的指针，在构造函数中要初始化指针</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Building</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//GoodGay类下的visit成员函数作为本类的好朋友，可以访问私有成员变量</span>
    <span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token class-name">GoodGay</span><span class="token double-colon punctuation">::</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    string m_SittingRoom<span class="token punctuation">;</span>
    <span class="token function">Building</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    string m_BedRoom<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token class-name">Building</span><span class="token double-colon punctuation">::</span><span class="token function">Building</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    m_SittingRoom <span class="token operator">=</span> <span class="token string">"客厅"</span><span class="token punctuation">;</span>
    m_BedRoom <span class="token operator">=</span> <span class="token string">"卧室"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">GoodGay</span><span class="token double-colon punctuation">::</span><span class="token function">GoodGay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//创建一个建筑物的对象</span>
    <span class="token comment">//用new再堆区中申请一片空间返回的是一个指针，用building来接受这个指针，完成building初始化</span>
    building <span class="token operator">=</span> <span class="token keyword">new</span> Building<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>
<span class="token class-name">GoodGay</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">GoodGay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">delete</span> building<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token class-name">GoodGay</span><span class="token double-colon punctuation">::</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"visit函数: Public "</span> <span class="token operator">&lt;&lt;</span> building<span class="token operator">-></span>m_SittingRoom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"visit函数: Private "</span> <span class="token operator">&lt;&lt;</span> building<span class="token operator">-></span>m_BedRoom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token class-name">GoodGay</span><span class="token double-colon punctuation">::</span><span class="token function">visit2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"visit2函数: Public "</span> <span class="token operator">&lt;&lt;</span> building<span class="token operator">-></span>m_SittingRoom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token comment">//visit2函数不是Building的友元函数，不能访问其私有变量m_BedRoom</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    GoodGay gg<span class="token punctuation">;</span>
    gg<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    gg<span class="token punctuation">.</span><span class="token function">visit2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><h4 id="加号运算符重载"><a href="#加号运算符重载" class="headerlink" title="加号运算符重载"></a>加号运算符重载</h4><p>成员函数重载+运算符和全局函数重载+运算符</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token comment">//	加号运算符重载</span>
<span class="token keyword">class</span> <span class="token class-name">Number</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>num<span class="token operator">=</span>n<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
<span class="token comment">//		成员函数重载+</span>
<span class="token comment">//		Number operator+(Number &amp;n) &#123;</span>
<span class="token comment">//			Number temp;</span>
<span class="token comment">//			temp.num=this->num+n.num;</span>
<span class="token comment">//			return temp;</span>
<span class="token comment">//		&#125;</span>
		<span class="token keyword">int</span> num<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">//	全局函数重载+</span>
Number <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span>Number <span class="token operator">&amp;</span>n1<span class="token punctuation">,</span>Number <span class="token operator">&amp;</span>n2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	Number n3<span class="token punctuation">;</span>
	n3<span class="token punctuation">.</span>num<span class="token operator">=</span> n1<span class="token punctuation">.</span>num<span class="token operator">+</span>n2<span class="token punctuation">.</span>num<span class="token punctuation">;</span>
	<span class="token keyword">return</span> n3<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	Number <span class="token function">n</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Number <span class="token function">n1</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Number n2<span class="token operator">=</span>n<span class="token operator">+</span>n1<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span>n2<span class="token punctuation">.</span>num<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="左移运算符重载"><a href="#左移运算符重载" class="headerlink" title="左移运算符重载"></a>左移运算符重载</h4><p>只能利用全局函数重载左移运算符</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token comment">//左移运算符重载&lt;&lt;</span>
<span class="token keyword">class</span> <span class="token class-name">Number</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//	如果数据私有可以使用友元</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>num<span class="token operator">=</span>n<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">int</span> num<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">//	全局函数重载&lt;&lt;运算符</span>
ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>cout<span class="token punctuation">,</span>Number <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	cout<span class="token operator">&lt;&lt;</span>n<span class="token punctuation">.</span>num<span class="token punctuation">;</span>
	<span class="token keyword">return</span> cout<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	Number <span class="token function">n1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span>n1<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="递增运算符重载"><a href="#递增运算符重载" class="headerlink" title="递增运算符重载"></a>递增运算符重载</h4><p>前置++运算符重载</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
class Number &#123;
	public :
		Number() &#123;

		&#125;
		Number(int num) &#123;
			this-&gt;num&#x3D;num;
		&#125;
		int num;
&#x2F;&#x2F;		前置++重载
		Number&amp; operator++() &#123;
			++num;
			return *this;
		&#125;
&#125;;
ostream&amp; operator&lt;&lt;(ostream &amp;cout,Number n) &#123;
	cout&lt;&lt;n.num;
	return cout;
&#125;
int main(int argc, char** argv) &#123;
	Number n(10);
	cout&lt;&lt;++(++n)&lt;&lt;endl;
	cout&lt;&lt;n&lt;&lt;endl;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>后置++运算符重载</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Number</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">friend</span> ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>cout<span class="token punctuation">,</span>Number n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token operator">:</span>
		<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

		<span class="token punctuation">&#125;</span>
		<span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>num<span class="token operator">=</span>num<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
<span class="token comment">//		前置++重载</span>
		Number<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token operator">++</span>num<span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
<span class="token comment">//		后置 ++重载</span>
		Number <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			Number temp<span class="token operator">=</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
			num<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> temp<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">int</span> num<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>cout<span class="token punctuation">,</span>Number n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	cout<span class="token operator">&lt;&lt;</span>n<span class="token punctuation">.</span>num<span class="token punctuation">;</span>
	<span class="token keyword">return</span> cout<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	Number <span class="token function">n</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span>n<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="赋值运算符重载"><a href="#赋值运算符重载" class="headerlink" title="赋值运算符重载"></a>赋值运算符重载</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">People</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			p_age<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token operator">~</span><span class="token function">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>p_age<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">delete</span> p_age<span class="token punctuation">;</span>
				p_age<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
<span class="token comment">//		=运算符重载</span>
		People<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>People <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//			如果自身有内存先释放干净</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>p_age<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">delete</span> p_age<span class="token punctuation">;</span>
				p_age<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>p_age<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">.</span>p_age<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">int</span> <span class="token operator">*</span>p_age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	People <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	People <span class="token function">p2</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	p2<span class="token operator">=</span>p1<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"age:"</span><span class="token operator">&lt;&lt;</span><span class="token operator">*</span>p2<span class="token punctuation">.</span>p_age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="关系运算符重载"><a href="#关系运算符重载" class="headerlink" title="关系运算符重载"></a>关系运算符重载</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

		<span class="token punctuation">&#125;</span>
		<span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
<span class="token comment">//	关系运算符重载</span>
		<span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span>Person <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token operator">==</span><span class="token keyword">this</span><span class="token operator">-></span>age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>cout<span class="token punctuation">,</span>Person <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	cout<span class="token operator">&lt;&lt;</span>p<span class="token punctuation">.</span>age<span class="token punctuation">;</span>
	<span class="token keyword">return</span> cout<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	Person <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span>p1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token string">"相等"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="函数调用运算符重载"><a href="#函数调用运算符重载" class="headerlink" title="函数调用运算符重载"></a>函数调用运算符重载</h4><p>又称为仿函数，写法很灵活</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Print</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>string valueString<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span>valueString<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	Print print<span class="token punctuation">;</span>
	<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>用处：去重，减少冗余</p>
<blockquote>
<p>语法:class 派生类：继承方式 	父类</p>
</blockquote>
<p>三种继承方式：（父类中的私有属性，子类无论哪种继承都访问不到）</p>
<ol>
<li>公共继承：父类的public和protected属性保持不变，私有属性访问不到</li>
<li>保护继承：父类的public和protected属性变为子类的protected属性，私有属性访问不到</li>
<li>私有继承：父类的public和protected属性变为子类的private属性，私有属性访问不到</li>
</ol>
<p><strong>父类中所有的非静态成员属性都会被子类继承下去，只是私有属性被编译器隐藏了，所以访问不到</strong></p>
<p>查看对象模型：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cl /dl reportSingleClassLayout类名 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="继承中的构造和析构的顺序"><a href="#继承中的构造和析构的顺序" class="headerlink" title="继承中的构造和析构的顺序"></a>继承中的构造和析构的顺序</h4><p>析构顺序与构造顺序相反</p>
<p>父类构造-&gt;子类构造-&gt;子类析构-&gt;父类析构</p>
<h4 id="子类继承访问同名成员的处理"><a href="#子类继承访问同名成员的处理" class="headerlink" title="子类继承访问同名成员的处理"></a>子类继承访问同名成员的处理</h4><ol>
<li>访问子类同名成员，直接访问即可</li>
<li>访问父类同名成员，加作用域即可</li>
<li>子类出现和父类同名的成员，子类会隐藏父类所有的同名成员函数</li>
</ol>
<h4 id="子类继承访问静态成员的处理"><a href="#子类继承访问静态成员的处理" class="headerlink" title="子类继承访问静态成员的处理"></a>子类继承访问静态成员的处理</h4><p>两种访问方式：对象名和类名</p>
<ol>
<li>访问子类同名成员，直接访问即可</li>
<li>访问父类同名成员，加作用域即可</li>
<li>子类出现和父类同名的静态成员，子类会隐藏父类所有的同名静态成员函数</li>
</ol>
<h4 id="多继承（不建议使用）"><a href="#多继承（不建议使用）" class="headerlink" title="多继承（不建议使用）"></a>多继承（不建议使用）</h4><blockquote>
<p>语法：class	子类：继承方式	父类1，继承方式	父类2</p>
</blockquote>
<h4 id="菱形继承"><a href="#菱形继承" class="headerlink" title="菱形继承"></a>菱形继承</h4><p>概念：两个类继承一个基类，又有一个类继承这两个派生类</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token comment">//动物类</span>
<span class="token comment">//通过使用virtual关键字解决菱形继承问题</span>
<span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">//羊类</span>
<span class="token keyword">class</span> <span class="token class-name">Sheep</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">Animal</span></span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">//驼类</span>
<span class="token keyword">class</span> <span class="token class-name">Tuo</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">Animal</span></span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">//羊驼类</span>
<span class="token keyword">class</span> <span class="token class-name">SheepTuo</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Sheep</span><span class="token punctuation">,</span><span class="token keyword">public</span> <span class="token class-name">Tuo</span></span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	SheepTuo st<span class="token punctuation">;</span>
	st<span class="token punctuation">.</span>Tuo<span class="token double-colon punctuation">::</span>age<span class="token operator">=</span><span class="token number">28</span><span class="token punctuation">;</span>
	st<span class="token punctuation">.</span>Sheep<span class="token double-colon punctuation">::</span>age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"st.Sheep::age:"</span><span class="token operator">&lt;&lt;</span>st<span class="token punctuation">.</span>Sheep<span class="token double-colon punctuation">::</span>age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"st.Tuo::age:"</span><span class="token operator">&lt;&lt;</span>st<span class="token punctuation">.</span>Tuo<span class="token double-colon punctuation">::</span>age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"st.age:"</span><span class="token operator">&lt;&lt;</span>st<span class="token punctuation">.</span>age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ol>
<li>静态多态：函数重载和运算符重载，编译阶段确定函数地址，地址早绑定</li>
<li>动态多态：派生类和虚函数，运行阶段确定函数地址，地址晚绑定</li>
</ol>
<h4 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
<span class="token comment">//		此刻地址早绑定</span>
<span class="token comment">//		void speak() &#123;</span>
<span class="token comment">//			cout&lt;&lt;"动物在说话"&lt;&lt;endl;</span>
<span class="token comment">//		&#125;</span>
<span class="token comment">//		加virtual变成虚函数地址晚绑定</span>
		<span class="token keyword">virtual</span>	<span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"动物在说话"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Animal</span></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token operator">:</span>
		<span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"喵喵~~"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Animal</span></span>  <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token operator">:</span>
		<span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"汪汪~~"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	Cat cat<span class="token punctuation">;</span>
	Dog dog<span class="token punctuation">;</span>
<span class="token comment">//	Animal &amp;animal=cat;</span>
	Animal <span class="token operator">&amp;</span>animal<span class="token operator">=</span>dog<span class="token punctuation">;</span>
	animal<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="纯虚函数和抽象类"><a href="#纯虚函数和抽象类" class="headerlink" title="纯虚函数和抽象类"></a>纯虚函数和抽象类</h4><p>有纯虚函数的类称为抽象类</p>
<p>语法：virtual 返回值类型	函数名（参数列表）&#x3D;0；</p>
<p>抽象类特点：</p>
<ol>
<li>无法实例化</li>
<li>子类必须重写抽象类的纯虚函数，否则子类也属于抽象类</li>
</ol>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
<span class="token comment">//		变成纯虚函数 </span>
		<span class="token keyword">virtual</span>	<span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Animal</span></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token operator">:</span>
		<span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"喵喵~~"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Animal</span></span>  <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token operator">:</span>
		<span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"汪汪~~"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	Cat cat<span class="token punctuation">;</span>
	Dog dog<span class="token punctuation">;</span>
<span class="token comment">//	Animal &amp;animal=cat;</span>
	Animal <span class="token operator">&amp;</span>animal<span class="token operator">=</span>dog<span class="token punctuation">;</span>
	animal<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="虚析构和纯虚析构"><a href="#虚析构和纯虚析构" class="headerlink" title="虚析构和纯虚析构"></a>虚析构和纯虚析构</h4><p>有纯虚析构的类也称为抽象类</p>
<blockquote>
<p>用处：如果子类属性开辟到堆区，那么父类指针在释放时无法调用子类的析构代码</p>
</blockquote>
<p>虚析构语法：virtual ~类名（）{}</p>
<p>纯虚析构：virtual ~类名（）&#x3D;0；必须要有具体实现</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"Animal构造函数调用"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
<span class="token comment">//		利用虚析构</span>
<span class="token comment">//		virtual ~Animal() &#123;</span>
<span class="token comment">//			cout&lt;&lt;"Animal析构函数调用"&lt;&lt;endl;</span>
<span class="token comment">//		&#125;</span>
<span class="token comment">//		利用纯虚析构</span>
		<span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Animal</span></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token operator">:</span>
		<span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"Cat构造函数调用"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">Cat</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>name<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">string</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"Cat有参构造函数调用"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token operator">~</span><span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">delete</span> name<span class="token punctuation">;</span>
				name<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"Cat析构函数调用"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		string <span class="token operator">*</span>name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token class-name">Animal</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"Animal析构函数调用"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	Animal <span class="token operator">*</span>animal<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token string">"小白"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">delete</span> animal<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="C-泛型编程"><a href="#C-泛型编程" class="headerlink" title="C++泛型编程"></a>C++泛型编程</h2><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><blockquote>
<p>用途：提高复用性</p>
</blockquote>
<h4 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h4><p>语法：template<typename T>，typename可以用class代替</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token comment">//利用模板</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>a<span class="token punctuation">,</span>T <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	T temp<span class="token punctuation">;</span>
	temp<span class="token operator">=</span>a<span class="token punctuation">;</span>
	a<span class="token operator">=</span>b<span class="token punctuation">;</span>
	b<span class="token operator">=</span>temp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>
	<span class="token keyword">float</span> c<span class="token operator">=</span><span class="token number">10.9</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token number">10.6</span><span class="token punctuation">;</span>
	<span class="token function">Swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span><span class="token string">" ,"</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token function">Swap</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span>c<span class="token operator">&lt;&lt;</span><span class="token string">" ,"</span><span class="token operator">&lt;&lt;</span>d<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="普通函数与模板函数的区别"><a href="#普通函数与模板函数的区别" class="headerlink" title="普通函数与模板函数的区别"></a>普通函数与模板函数的区别</h5><ul>
<li>普通函数可以自动类型转换</li>
<li>函数模板如果使用自动类型，不会发生自动类型转换</li>
<li>函数模板如果使用指定类型，会发生自动类型转换</li>
</ul>
<h5 id="普通函数与模板函数的调用规则"><a href="#普通函数与模板函数的调用规则" class="headerlink" title="普通函数与模板函数的调用规则"></a>普通函数与模板函数的调用规则</h5><ol>
<li>函数模板和普通函数都可以，优先调用普通函数</li>
<li>可以通过空模板参数列表来强制调用函数模板</li>
<li>函数模板也可以重载</li>
<li>如果函数模板能更好匹配，优先调用函数模板</li>
</ol>
<h5 id="模板的局限性"><a href="#模板的局限性" class="headerlink" title="模板的局限性"></a>模板的局限性</h5><p>对于数组和对象来说，可以使用template&lt;&gt;重写一个模板具体实现</p>
<h4 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">NameType</span><span class="token punctuation">,</span><span class="token keyword">class</span> <span class="token class-name">AgeType</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">People</span><span class="token punctuation">(</span>NameType name<span class="token punctuation">,</span>AgeType age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		NameType name<span class="token punctuation">;</span>
		AgeType age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	People<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span>p<span class="token punctuation">.</span>name<span class="token operator">&lt;&lt;</span>p<span class="token punctuation">.</span>age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="类模板的成员函数的创建时机"><a href="#类模板的成员函数的创建时机" class="headerlink" title="类模板的成员函数的创建时机"></a>类模板的成员函数的创建时机</h5><p>类模板中成员函数只在调用时才去创建</p>
<h5 id="类模板对象做函数参数"><a href="#类模板对象做函数参数" class="headerlink" title="类模板对象做函数参数"></a>类模板对象做函数参数</h5><p>传入方式</p>
<ol>
<li>指定传入方式</li>
<li>参数模板化</li>
<li>整个类模板化</li>
</ol>
<h5 id="类模板继承"><a href="#类模板继承" class="headerlink" title="类模板继承"></a>类模板继承</h5><ol>
<li>当子类继承父类是一个类模板时，子类在声明时，要指出父类中的数据类型</li>
<li>不指定，编译器无法给子类分配内存</li>
<li>如果要灵活支出父类中的数据类型，子类也要变成类模板</li>
</ol>
<h3 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h3><blockquote>
<p>查阅API即可，深入理解阅读《STL源码剖析》</p>
</blockquote>
<h4 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h4><h5 id="String"><a href="#String" class="headerlink" title="String"></a>String</h5><blockquote>
<p>string本质上是一个类，内部封装了char *,是一个char *的容器</p>
</blockquote>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	string str<span class="token operator">=</span><span class="token string">"hello"</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>ch<span class="token operator">=</span><span class="token string">"china"</span><span class="token punctuation">;</span>
	string  <span class="token function">str1</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
	string <span class="token function">str2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	str<span class="token operator">+=</span><span class="token string">"world"</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span>str<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>str1<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>str2<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h5><blockquote>
<p>功能：类似数组，又称为单端数组，可以动态扩展（找更大的内存空间，将数据拷贝，释放原空间）</p>
</blockquote>
<h6 id="vector存放内置数据类型"><a href="#vector存放内置数据类型" class="headerlink" title="vector存放内置数据类型"></a>vector存放内置数据类型</h6><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	cout<span class="token operator">&lt;&lt;</span>value<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//	vector容器，类似于数组</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itBegin<span class="token operator">=</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//起始迭代器，指向容器中第一个元素</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itEnd<span class="token operator">=</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结束迭代器，指向容器中最后一个元素的下一个位置</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"while循环遍历"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>itBegin<span class="token operator">!=</span>itEnd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>itBegin<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		itBegin<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"for循环遍历"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">!=</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"stl遍历算法"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>print<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h6 id="vector存放自定义数据类型"><a href="#vector存放自定义数据类型" class="headerlink" title="vector存放自定义数据类型"></a>vector存放自定义数据类型</h6><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">People</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		string name<span class="token punctuation">;</span>
		<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	People <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"李白"</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	People <span class="token function">p2</span><span class="token punctuation">(</span><span class="token string">"达摩"</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	People <span class="token function">p3</span><span class="token punctuation">(</span><span class="token string">"王昭君"</span><span class="token punctuation">,</span><span class="token number">900</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	People <span class="token function">p4</span><span class="token punctuation">(</span><span class="token string">"公孙离"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	People <span class="token function">p5</span><span class="token punctuation">(</span><span class="token string">"赵云"</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	vector<span class="token operator">&lt;</span>People<span class="token operator">></span> v<span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>
	vector<span class="token operator">&lt;</span>People<span class="token operator">*</span><span class="token operator">></span> v1<span class="token punctuation">;</span>
	v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>People<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">!=</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token string">"姓名:"</span><span class="token operator">&lt;&lt;</span>it<span class="token operator">-></span>name<span class="token operator">&lt;&lt;</span><span class="token string">" 年龄："</span><span class="token operator">&lt;&lt;</span>it<span class="token operator">-></span>age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"遍历自定义数据类型指针"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>People<span class="token operator">*</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">!=</span>v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token string">"姓名:"</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token operator">-></span>name<span class="token operator">&lt;&lt;</span><span class="token string">" 年龄："</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token operator">-></span>age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h6 id="vector容器嵌套"><a href="#vector容器嵌套" class="headerlink" title="vector容器嵌套"></a>vector容器嵌套</h6><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token comment">//vector容器嵌套</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> v<span class="token punctuation">;</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">;</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v2<span class="token punctuation">;</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v3<span class="token punctuation">;</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v4<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		v2<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		v3<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		v4<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">!=</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator vit<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> vit<span class="token operator">!=</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> vit<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>vit<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h6 id="vector容器插入和删除"><a href="#vector容器插入和删除" class="headerlink" title="vector容器插入和删除"></a>vector容器插入和删除</h6><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">!=</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h5><p>双端数组，可以对头端进行插入和删除</p>
<h5 id="List"><a href="#List" class="headerlink" title="List"></a>List</h5><p>注意：list不支持随机存取，所以没有[]和at的访问方式</p>
<h5 id="Set和Multiser"><a href="#Set和Multiser" class="headerlink" title="Set和Multiser"></a>Set和Multiser</h5><p>set结构会自动排序，底层是二叉树</p>
<ul>
<li>set中不允许有重复的值</li>
<li>multiset允许有重复的值</li>
</ul>
<h5 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h5><p>map中所以元素都是pair,底层为二叉树，可以根据key快速找到value</p>
<ul>
<li>map中不允许有重复key值元素</li>
<li>multimap中允许有重复key值元素</li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Cpp多线程</title>
    <url>/2023/08/06/CppConcurrency/</url>
    <content><![CDATA[<h1 id="Cpp并发编程"><a href="#Cpp并发编程" class="headerlink" title="Cpp并发编程"></a>Cpp并发编程</h1><blockquote>
<p>C++11首次实现了对多线程的支持</p>
</blockquote>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在计算机中并发就是指在单个系统里同时执行多个独立的任务,而非顺序的进行一些活动。</p>
<p>以前，大多数计算机只有一个处理器，具有单个处理单元(processingunit)或核心(core),如今还有很多这样的台式机。这种机器只能在某一时刻执行一个任务，不过它可以每秒进行多次任务切换。通过“这个任务做一会，再切换到别的任务，再做一会儿”的方式，让任务看起来是并行执行的。这种方式称为“任务切换(taskswitching)”。</p>
<p>在一个双核机器(具有两个处理核心)上，每个任务可以在各自的处理核心上执行。在单核机器上做任务切换时，每个任务的块交织进行。但它们中间有一小段分隔(图中所示灰色分隔条的厚度大于双核机器的分隔条);为了实现交织进行，系统每次从一个任务切换到另一个时都需要切换一次上下文，任务切换也有时间开销。进行上下文的切换时，操作系统必须为当前运行的任务保存CPU的状态和指令指针，并计算出要切换到哪个任务，并为即将切换到的任务重新加载处理器状态。然后，CPU可能要将新任务的指令和数据的内存载入到缓存中，这会阻止CPU执行任何指令，从而造成的更多的延迟。如下图所示:<br><img src="/../img/Concurry/%E5%B9%B6%E5%8F%91%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F.png" class="lazyload placeholder" data-srcset="/../img/Concurry/%E5%B9%B6%E5%8F%91%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="并发的两种方式"></p>
<span id="more"></span>

<ol>
<li><p>多进程并发</p>
<p>  将应用程序分成多个独立的进程，他们在同一时刻运行。独立的进程可以通过进程间常规的通信渠道传递信息。缺点是：进程间通信通常复杂并且速度慢。而且运行多个进程需要固定开销。优点是可以更容易编写安全的并发代码，并且可以使用远程连接。</p>
</li>
<li><p>多线程并发</p>
<p>  多线程并发指在单个进程中运行多个线程。线程很类似于轻量级的进程，每个线程相互独立运行。但是进程中的所有线程都共享地址空间，并且所有线程可以访问到大部分数据。</p>
</li>
</ol>
<h2 id="C-多线程历史"><a href="#C-多线程历史" class="headerlink" title="C++多线程历史"></a>C++多线程历史</h2><ol>
<li>C++98标准不承认线程的存在，并且各种语言要素的操作效果都以顺序抽象机的形式编写。不仅如此，内存模型也没有正式定义，所以在C++98标准下，没办法在缺少编译器相关扩展的情况下编写多线程应用程序。</li>
<li>随着C++11标准的发布，不仅有了一个全新的线程感知内存模型，C++标准库包含：用于管理线程、保护共享数据、线程间同步操作以及低级原子操作的各种类。</li>
</ol>
<h3 id="第一个多线程例子"><a href="#第一个多线程例子" class="headerlink" title="第一个多线程例子"></a>第一个多线程例子</h3><pre class="line-numbers language-Cpp" data-language="Cpp"><code class="language-Cpp">#include&lt;iostream&gt;
&#x2F;&#x2F; 导入管理线程的函数和类的头文件
#include&lt;thread&gt;
&#x2F;&#x2F; 创建线程的初始函数hello
void hello()&#123;
	std::cout&lt;&lt;&quot;hello Concurrent world!\n&quot;;
&#125;

int main()&#123;
	std::thread t(hello);
	&#x2F;&#x2F; 主线程等待t线程运行
	t.join();
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="线程管理"><a href="#线程管理" class="headerlink" title="线程管理"></a>线程管理</h2><blockquote>
<p>每个程序都至少有一个线程：执行main函数的线程，其余线程有各自的入口函数。</p>
</blockquote>
<pre class="line-numbers language-Cpp" data-language="Cpp"><code class="language-Cpp">#include&lt;iostream&gt;
#include&lt;thread&gt;
class back_task&#123;
	public:
		void do_something()const&#123;
			std::cout&lt;&lt;&quot;do something...\n&quot;;
		&#125;
		void operator()()const&#123;
			do_something();
		&#125;
&#125;;
int main()&#123;
	back_task b;
	std::thread  t(b);
	t.join();
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以把函数对象传入线程构造函数时，需要注意：<em>不能传递一个临时变量，而是要传递一个命名变量;传递临时变量时，C++编译器会将其解析为函数声明，而不是类型对象的定义。</em></p>
<p>可以使用lambda表达式避免这个问题：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;thread></span></span>
<span class="token keyword">void</span> <span class="token function">do_something</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"hello world!\n"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	std<span class="token double-colon punctuation">::</span>thread  <span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>
		<span class="token function">do_something</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><em>必须在<code>std::thread</code>对象销毁前进行join或者detach。</em></p>
<p>如果不等待线程，就必须保证线程结束之前，可访问的数据得有效性。下面这段代码oops函数已经结束，线程依旧还访问局部变量：</p>
<pre class="line-numbers language-Cpp" data-language="Cpp"><code class="language-Cpp">struct func
&#123;
	int&amp; i;
	func(int&amp; i_) : i(i_) &#123;&#125;
	void operator() ()
	&#123;
		for (unsigned j&#x3D;0 ; j&lt;1000000 ; ++j)
		&#123;
			do_something(i); &#x2F;&#x2F; 1. 潜在访问隐患： 悬空引用
		&#125;
	&#125;
&#125;;
void oops()
&#123;
	int some_local_state&#x3D;0;
	func my_func(some_local_state);
	std::thread my_thread(my_func);
	my_thread.detach(); &#x2F;&#x2F; 2. 不等待线程结束
&#125; &#x2F;&#x2F; 3. 新线程可能还在运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>处理这种情况的常规方法：使线程函数的功能齐全，将数据复制到线程中，而非复制到共享数据中。还可以通过join的方式来确保线程在函数完成前结束。</p>
<h3 id="等待线程完成"><a href="#等待线程完成" class="headerlink" title="等待线程完成"></a>等待线程完成</h3><p>如果需要等待线程完成，相关的thread实例可以使用<code>join()</code>，调用join()的行为，还清理了线程相关的存储部分。</p>
]]></content>
      <categories>
        <category>Cpp</category>
      </categories>
      <tags>
        <tag>Cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>Git学习</title>
    <url>/2022/06/19/Git/</url>
    <content><![CDATA[<h1 id="Git学习"><a href="#Git学习" class="headerlink" title="Git学习"></a>Git学习</h1><blockquote>
<p>学习git这一种主流的版本控制系统</p>
</blockquote>
<h2 id="什么是”版本控制”？"><a href="#什么是”版本控制”？" class="headerlink" title="什么是”版本控制”？"></a>什么是”版本控制”？</h2><p>版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。</p>
<span id="more"></span>

<h2 id="git的三种状态"><a href="#git的三种状态" class="headerlink" title="git的三种状态"></a>git的三种状态</h2><h3 id="已提交：commited"><a href="#已提交：commited" class="headerlink" title="已提交：commited"></a>已提交：commited</h3><p>已提交表示数据已经安全的保存在本地数据库中。</p>
<h3 id="已修改：modified"><a href="#已修改：modified" class="headerlink" title="已修改：modified"></a>已修改：modified</h3><p>已修改表示修改了文件，但还没保存到数据库中。</p>
<h3 id="已暂存：staged"><a href="#已暂存：staged" class="headerlink" title="已暂存：staged"></a>已暂存：staged</h3><p>已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</p>
<h2 id="git的三个工作区"><a href="#git的三个工作区" class="headerlink" title="git的三个工作区"></a>git的三个工作区</h2><p><img src="https://s1.ax1x.com/2022/06/19/XjBi0x.png" class="lazyload placeholder" data-srcset="https://s1.ax1x.com/2022/06/19/XjBi0x.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="git的三个工作区"></p>
<h3 id="git仓库"><a href="#git仓库" class="headerlink" title="git仓库"></a>git仓库</h3><p>Git 仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。这是 Git 中最重要的部分，其它计算机克隆仓库时，拷贝的就是这里的数据。</p>
<h3 id="工作目录"><a href="#工作目录" class="headerlink" title="工作目录"></a>工作目录</h3><p>工作目录是对项目的某个版本独立提取出来的内容。这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</p>
<h3 id="暂存区域"><a href="#暂存区域" class="headerlink" title="暂存区域"></a>暂存区域</h3><p>暂存区域是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。有时候也被称作”索引”，不过一般说法还是叫暂存区域。</p>
<h3 id="基本的-Git-工作流程"><a href="#基本的-Git-工作流程" class="headerlink" title="基本的 Git 工作流程"></a>基本的 Git 工作流程</h3><ol>
<li><p>在工作目录中修改文件。</p>
</li>
<li><p>暂存文件，将文件的快照放入暂存区域。</p>
</li>
<li><p>提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。</p>
</li>
</ol>
<h2 id="git的安装"><a href="#git的安装" class="headerlink" title="git的安装"></a>git的安装</h2><h3 id="Linux上安装"><a href="#Linux上安装" class="headerlink" title="Linux上安装"></a>Linux上安装</h3><p>以Fedora 上为例：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果你在基于 Debian 的发行版上：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="Mac上安装"><a href="#Mac上安装" class="headerlink" title="Mac上安装"></a>Mac上安装</h3><p>最简单的方法是安装 Xcode或者<a href="https://git-scm.com/">git官网</a> 下载二进制文件安装</p>
<h3 id="Windows上安装"><a href="#Windows上安装" class="headerlink" title="Windows上安装"></a>Windows上安装</h3><p>在 Windows 上安装 Git 也有几种安装方法。官方版本可以在 Git 官方网站下载。</p>
<h3 id="从源代码安装"><a href="#从源代码安装" class="headerlink" title="从源代码安装"></a>从源代码安装</h3><p>如果你想从源码安装 Git，需要安装 Git 依赖的库：curl、zlib、openssl、expat，还有libiconv。</p>
<p>如果你的系统上有 yum （如 Fedora）或者 apt-get（如基于 Debian 的系统），可以使用以下命令之一来安装最小化的依赖包来编译和安装Git的二进制版：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> curl-devel expat-devel gettext-devel openssl-devel zlib-devel
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libcurl4-gnutls-dev libexpat1-dev gettext  libz-dev libssl-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>为了能够添加更多格式的文档（如 doc, html, info），你需要安装以下的依赖包：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> asciidoc xmlto docbook2x
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> asciidoc xmlto docbook2x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>从 GitHub 网站上的镜像来获得最新发布版本的 tar 包</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxf git-2.0.0.tar.gz
<span class="token builtin class-name">cd</span> git-2.0.0
 <span class="token function">make</span> configure
 ./configure --prefix<span class="token operator">=</span>/usr
 <span class="token function">make</span> all doc info
 <span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span> install-doc install-html install-info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="git的配置"><a href="#git的配置" class="headerlink" title="git的配置"></a>git的配置</h2><h3 id="初次启动（配置环境变量）"><a href="#初次启动（配置环境变量）" class="headerlink" title="初次启动（配置环境变量）"></a>初次启动（配置环境变量）</h3><p>对于Linux系统，Git 自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量。这些变量存储在三个不同的位置：</p>
<ol>
<li><strong>&#x2F;etc&#x2F;gitconfig</strong> 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 –system 选项的git config 时，它会从此文件读写配置变量。</li>
<li>~&#x2F;.gitconfig 或 ~&#x2F;.config&#x2F;git&#x2F;config 文件：只针对当前用户。 可以传递 –global 选项让 Git读写此文件。</li>
<li>当前使用仓库的 Git 目录中的 config 文件（就是 .git&#x2F;config）：针对该仓库。</li>
</ol>
<p>每一个级别覆盖上一级别的配置，所以 .git&#x2F;config 的配置变量会覆盖 &#x2F;etc&#x2F;gitconfig 中的配置变量。</p>
<p>对于windows系统，Git 会查找 $HOME$ 目录下（一般情况下是 C:\Users\$USER$）的 .gitconfig 文件。</p>
<h3 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h3><p>每一次 Git 的提交都会使用这些信息，并且它会写入到你的每一次提交中，不可更改：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"Mr.W"</span>	<span class="token comment">#配置用户名</span>
<span class="token function">git</span> config --global user.email xxxxxxxx@qq.com	<span class="token comment">#配置邮箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>使用–global代表全局设置，该命令只需要运行一次，之后无论你在该系统上做任何事情， Git 都会使用这些信息。</p>
<p>当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行不带 –global 选项的命令来配置。</p>
<h3 id="指定文本编辑器"><a href="#指定文本编辑器" class="headerlink" title="指定文本编辑器"></a>指定文本编辑器</h3><p>Git 会使用操作系统默认的文本编辑器，通常是 Vim。如果你想使用不同的文本编辑器，例如 Emacs，可以这样做：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global core.editor emacs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="检查配置信息"><a href="#检查配置信息" class="headerlink" title="检查配置信息"></a>检查配置信息</h3><p>如果想要检查你的配置，可以使用 git config –list 命令来列出所有 Git 当时能找到的配置。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>可以通过输入 git config  <key>： 来检查 Git 的某一项配置：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config user.name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="获取帮助手册"><a href="#获取帮助手册" class="headerlink" title="获取帮助手册"></a>获取帮助手册</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token builtin class-name">help</span> <span class="token operator">&lt;</span>verb<span class="token operator">></span> <span class="token comment">#方式一</span>
<span class="token function">git</span> <span class="token operator">&lt;</span>verb<span class="token operator">></span> --help <span class="token comment">#方式二</span>
<span class="token function">man</span> git-<span class="token operator">&lt;</span>verb<span class="token operator">></span> <span class="token comment">#在linux上可以方式三</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="git基础"><a href="#git基础" class="headerlink" title="git基础"></a>git基础</h2><h3 id="获取git仓库"><a href="#获取git仓库" class="headerlink" title="获取git仓库"></a>获取git仓库</h3><ol>
<li>在现有项目或目录下导入所有文件到 Git 中</li>
<li>从一个服务器克隆一个现有的 Git 仓库</li>
</ol>
<h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><p>进入该项目目录并输入：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>该命令将创建一个名为 .git 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是Git 仓库的核心。</p>
<p>如果你是在一个已经存在文件的文件夹（而不是空文件夹）中初始化 Git 仓库来进行版本控制的话，你应该开始跟踪这些文件并提交。你可通过 git add 命令来实现对指定文件的跟踪，然后执行 git commit 提交：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> *.c
<span class="token function">git</span> <span class="token function">add</span> LICENSE
<span class="token function">git</span> commit -m <span class="token string">'initial project version'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h3><p>如果你想获得一份已经存在了的 Git 仓库的拷贝，比如说，你想为某个开源项目贡献自己的一份力，这时就要用到 git clone 命令。当执行 git clone 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token punctuation">[</span>url<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果你想在克隆远程仓库的时候，自定义本地仓库的名字，你可以使用如下命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token punctuation">[</span>url<span class="token punctuation">]</span> 本地仓库的名字<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>经常报错: <code>OpenSSL SSL_read: Connection was reset, errno 10054</code>解决方法如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global http.sslVerify <span class="token string">"false"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>Git 支持多种数据传输协议。上面的例子使用的是 https:&#x2F;&#x2F; 协议，不过你也可以使用 git:&#x2F;&#x2F; 协议或者使用SSH 传输协议，比如 user@server:path&#x2F;to&#x2F;repo.git </p>
<h3 id="记录每次更新到仓库"><a href="#记录每次更新到仓库" class="headerlink" title="记录每次更新到仓库"></a>记录每次更新到仓库</h3><p>工作目录下的每一个文件都不外乎这两种状态：已跟踪或未跟踪。<strong>已跟踪的文件</strong>是指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后，它们的状态可能处于未修改，已修改或已放 入暂存区。工作目录中除已跟踪文件以外的所有其它文件都属于<strong>未跟踪文件</strong>，它们既不存在于上次快照的记录中，也没有放入暂存区。初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态。</p>
<p>编辑过某些文件之后，由于自上次提交后你对它们做了修改，Git 将它们标记为已修改文件。我们逐步将这些修改过的文件放入暂存区，然后提交所有暂存了的修改，如此反复。使用 Git 时文件的生命周期如下：</p>
<p><img src="https://s1.ax1x.com/2022/06/19/XjBF76.png" class="lazyload placeholder" data-srcset="https://s1.ax1x.com/2022/06/19/XjBF76.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="记录每次更新到仓库"></p>
<h3 id="检查当前文件状态"><a href="#检查当前文件状态" class="headerlink" title="检查当前文件状态"></a>检查当前文件状态</h3><p>要查看哪些文件处于什么状态，可以用 git status 命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果在克隆仓库后立即使用此命令，会看到类似这样的输出：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">On branch master
nothing to commit, working directory clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>这说明你现在的工作目录相当干净。换句话说，所有已跟踪文件在上次提交后都未被更改过。此外，上面的信息 还表明，当前目录下没有出现任何处于未跟踪状态的新文件，否则 Git 会在这里列出来。最后，该命令还显示了当前所在分支，并告诉你这个分支同远程服务器上对应的分支没有偏离。现在，分支名是 “master”,这是默认的分支名。</p>
<h3 id="跟踪新文件"><a href="#跟踪新文件" class="headerlink" title="跟踪新文件"></a>跟踪新文件</h3><p>使用命令 git add 开始跟踪一个文件。所以，要跟踪 <code>README</code> 文件，运行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> README<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>此时再运行 git status 命令，会看到 <code>README</code> 文件已被跟踪，并处于暂存状态：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> status

On branch master
Changes to be committed:
  <span class="token punctuation">(</span>use <span class="token string">"git reset HEAD &lt;file>..."</span> to unstage<span class="token punctuation">)</span>
    new file: README<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>只要在 Changes to be committed 这行下面的，就说明是已暂存状态。如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。</p>
<h3 id="暂存已修改文件"><a href="#暂存已修改文件" class="headerlink" title="暂存已修改文件"></a>暂存已修改文件</h3><p>现在我们来修改一个已被跟踪的文件。如果你修改了一个名为 Git.md 的已被跟踪的文件，然后运行 git status 命令，会看到下面内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">On branch master
No commits yet
Changes to be committed:
  <span class="token punctuation">(</span>use <span class="token string">"git rm --cached &lt;file>..."</span> to unstage<span class="token punctuation">)</span>
        new file:   Git.md
        new file:   README
Changes not staged <span class="token keyword">for</span> commit:
  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file>..."</span> to update what will be committed<span class="token punctuation">)</span>
  <span class="token punctuation">(</span>use <span class="token string">"git restore &lt;file>..."</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span>
        modified:   Git.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>文件 <code>Git.md</code> 出现在 Changes not staged for commit 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。</p>
<p>要暂存这次更新，需要运行 git add 命令。这是个多功能命令：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。将这个命令理解为“添加内容到下一次提交中”而不是“将一个文件添加到项目中”要更加合适。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> Git.md
<span class="token function">git</span> status

On branch master
No commits yet
Changes to be committed:
  <span class="token punctuation">(</span>use <span class="token string">"git rm --cached &lt;file>..."</span> to unstage<span class="token punctuation">)</span>
        new file:   Git.md
        new file:   README<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在两个文件都已暂存，下次提交时就会一并记录到仓库。假设此时，你想要在 CONTRIBUTING.md 里再加条注释，重新编辑存盘后，准备好提交。不过且慢，再运行 git status 看看：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">On branch master
No commits yet
Changes to be committed:
  <span class="token punctuation">(</span>use <span class="token string">"git rm --cached &lt;file>..."</span> to unstage<span class="token punctuation">)</span>
        new file:   Git.md
        new file:   README
Changes not staged <span class="token keyword">for</span> commit:
  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file>..."</span> to update what will be committed<span class="token punctuation">)</span>
  <span class="token punctuation">(</span>use <span class="token string">"git restore &lt;file>..."</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span>
        modified:   Git.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在 <code>Git.md</code> 文件同时出现在暂存区和非暂存区。实际上 Git 只不过暂存了你运行 git add 命令时的版本，如果你现在提交，<code>Git.md</code> 的版本是你最后一次运行git add 命令时的那个版本，而不是你运行 git commit 时，在工作目录中的当前版本。所以，运行了 git add 之后又作了修订的文件，需要重新运行 git add 把最新版本重新暂存起来：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> Git.md
<span class="token function">git</span> status 

On branch master
No commits yet
Changes to be committed:
 <span class="token punctuation">(</span>use <span class="token string">"git rm --cached &lt;file>..."</span> to unstage<span class="token punctuation">)</span>
       new file:   Git.md
       new file:   README<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="状态简览"><a href="#状态简览" class="headerlink" title="状态简览"></a>状态简览</h3><p>git status 命令的输出十分详细，但其用语有些繁琐。如果你使用 git status -s 命令或 git status –short 命令，你将得到一种更为紧凑的格式输出。</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git status -s

 M README
MM Rakefile
A lib&#x2F;git.rb
M lib&#x2F;simplegit.rb
?? LICENSE.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>新添加的未跟踪文件前面有 ?? 标记，新添加到暂存区中的文件前面有 A 标记，修改过的文件前面有 M 标记。你可能注意到了 M 有两个可以出现的位置，出现在右边的 M 表示该文件被修改了但是还没放入暂存区，出现在靠左边的 M 表示该文件被修改了并放入了暂存区。例如，上面的状态报告显示： <code>README</code> 文件在工作区被修改了但是还没有将修改后的文件放入暂存区,<code>lib/simplegit.rb</code> 文件被修改了并将修改后的文件放入了暂存区。而<code>Rakefile</code> 在工作区被修改并提交到暂存区后又在工作区中被修改了，所以在暂存区和工作区都有该文件被修改了的记录。</p>
<h3 id="忽略文件-gitignore"><a href="#忽略文件-gitignore" class="headerlink" title="忽略文件(.gitignore)"></a>忽略文件(<code>.gitignore</code>)</h3><p>一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。通常都是些自动生成的文 件，比如日志文件，或者编译过程中创建的临时文件等。在这种情况下，我们可以创建一个名为 <code>.gitignore</code>的文件，列出要忽略的文件模式。来看一个实际的例子：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> .gitignore

*.<span class="token punctuation">[</span>oa<span class="token punctuation">]</span>
*~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>文件 <code>.gitignore</code> 的格式规范如下： </p>
<ul>
<li>所有空行或者以 <code>＃</code> 开头的行都会被 Git 忽略。 </li>
<li>可以使用标准的 glob 模式匹配。 </li>
<li>匹配模式可以以<code>/</code>开头防止递归。 </li>
<li>匹配模式可以以<code>/</code>结尾指定目录。 </li>
<li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。</li>
</ul>
<p>所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。星号<code>*</code>匹配零个或多个任意字符；<code>[abc]</code> 匹配任 何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号<code>?</code>只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 <code>[0-9]</code> 表示匹配所有 0 到 9 的数字）。使用两个星号<code>**</code> 表示匹配任意中间目录，比如<code>a/**/z</code> 可以匹配 <code>a/z</code>,<code>a/b/z</code> 或 <code>a/b/c/z</code>等。</p>
<h3 id="查看已暂存和未暂存的修改"><a href="#查看已暂存和未暂存的修改" class="headerlink" title="查看已暂存和未暂存的修改"></a>查看已暂存和未暂存的修改</h3><p>如果 git status 命令的输出对于你来说过于模糊，你想知道具体修改了什么地方，可以用 git diff 命令。git diff 将通过文件补丁的格式显示具体哪些行发生了改变。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">diff</span>

warning: LF will be replaced by CRLF <span class="token keyword">in</span> Git.md.
The <span class="token function">file</span> will have its original line endings <span class="token keyword">in</span> your working directory
<span class="token function">diff</span> --git a/Git.md b/Git.md
index b49f414<span class="token punctuation">..</span>661e036 <span class="token number">100644</span>
--- a/Git.md
+++ b/Git.md
@@ -1,3 +1,4 @@
 Git Test
 Modified
 Second Modified
+Third Modified<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>此命令比较的是工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化内容。</p>
<p>若要查看已暂存的将要添加到下次提交里的内容，可以使用 git diff –staged</p>
<h3 id="提交更新"><a href="#提交更新" class="headerlink" title="提交更新"></a>提交更新</h3><p>现在的暂存区域已经准备妥当可以提交了。在此之前，请一定要确认还有什么修改过的或新建的文件还没有 git add 过，否则提交的时候不会记录这些还没暂存起来的变化。所以，每次准备提交前，先用 git status 看下，是不是都已暂存起来了，然后再运行提交命令 git commit：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>默认的提交消息包含最后一次运行 git status 的输出，放在注释行里，另外开头还有一空行，供你输入提交说明。如果想要更详细的对修改了哪些内容的提示，可以用 -v 选项，这会将你所做的改变的 diff 输出放到编辑器中从而使你知道本次提交具体做了哪些修改。</p>
<p>另外，你也可以在 commit 命令后添加 -m 选项，将提交信息与命令放在同一行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit -m <span class="token string">"git second commit"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="跳过使用暂存区域"><a href="#跳过使用暂存区域" class="headerlink" title="跳过使用暂存区域"></a>跳过使用暂存区域</h4><p>尽管使用暂存区域的方式可以精心准备要提交的细节，但有时候这么做略显繁琐。Git 提供了一个跳过使用暂存区域的方式，只要在提交的时候，给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git commit -a -m &quot;git third commit&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="移除文件"><a href="#移除文件" class="headerlink" title="移除文件"></a>移除文件</h3><p>要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。<code>可以用 git rm 命令完成此项工作，并连带从工作目录中删除指定的文件</code>，这样以后就不会出现在未跟踪文件清单了。</p>
<p>如果只是简单地从工作目录中手工删除文件，运行 git status 时就会在 “Changes not staged for commit” 部分（也就是未暂存清单）看到：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">rm</span> README
<span class="token function">git</span> status

On branch master
Changes to be committed:
  <span class="token punctuation">(</span>use <span class="token string">"git restore --staged &lt;file>..."</span> to unstage<span class="token punctuation">)</span>
        deleted:    README<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>下一次提交时，该文件就不再纳入版本管理了。如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 <code>-f</code>。这是一种安全特性，用于防止误删还没有添加到快照的数据，<code>这样的数据不能被 git 恢复</code>。</p>
<p>另外一种情况是，<code>我们想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中</code>。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">rm</span> --cached test.txt
<span class="token function">git</span> status

On branch master
Changes to be committed:
 <span class="token punctuation">(</span>use <span class="token string">"git restore --staged &lt;file>..."</span> to unstage<span class="token punctuation">)</span>
       deleted:    test.txt
Untracked files:
 <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file>..."</span> to include <span class="token keyword">in</span> what will be committed<span class="token punctuation">)</span>
       test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">mv</span> Git.md git.md
<span class="token function">git</span> status

On branch master
Changes to be committed:
  <span class="token punctuation">(</span>use <span class="token string">"git restore --staged &lt;file>..."</span> to unstage<span class="token punctuation">)</span>
        renamed:    Git.md -<span class="token operator">></span> git.md
        deleted:    test.txt
Untracked files:
  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file>..."</span> to include <span class="token keyword">in</span> what will be committed<span class="token punctuation">)</span>
        test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其实，运行 git mv 就相当于运行了下面三条命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> README.md README
<span class="token function">git</span> <span class="token function">rm</span> README.md
<span class="token function">git</span> <span class="token function">add</span> README<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h3><p>在提交了若干更新，又或者克隆了某个项目之后，你也许想回顾下提交历史.完成这个任务最简单而又有效的工具是 git log 命令。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>默认不用任何参数的话，git log 会按提交时间列出所有的更新，最近的更新排在最上面。</p>
<p>git log 有许多选项可以帮助你搜寻你所要找的提交，接下来我们介绍些最常用的。一个常用的选项是 -p，用来显示每次提交的内容差异。你也可以加上 -2 来仅显示最近两次提交：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log -p -2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>你也可以为 git log 附带一系列的总结性选项。比如说，如果你想看到每次提交的简略的统计信息，你可以使用 –stat 选项：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log --stat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>另外一个常用的选项是 –pretty。这个选项可以指定使用不同于默认格式的方式展示提交历史。这个选项有一些内建的子选项供你使用。比如用 oneline 将每个提交放在一行显示，查看的提交数很大时非常有用。另外还有short，full 和 fuller 可以用，展示的信息或多或少有些不同。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log --pretty<span class="token operator">=</span>oneline<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>有用的是 format，可以定制要显示的记录格式。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log --pretty<span class="token operator">=</span>format:<span class="token string">"%h - %an, %ar : %s"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>git log –pretty&#x3D;format 常用的选项 列出了常用的格式占位符写法及其代表的意义。</p>
<p><img src="https://s1.ax1x.com/2022/06/19/XjBEtO.png" class="lazyload placeholder" data-srcset="https://s1.ax1x.com/2022/06/19/XjBEtO.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="git log"></p>
<p>当 oneline 或 format 与另一个 log 选项 –graph 结合使用时尤其有用。这个选项添加了一些ASCII字符串来形象地展示你的分支、合并历史：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log --pretty<span class="token operator">=</span>format:<span class="token string">"%h %s"</span> --graph<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>git log 的常用选项:</p>
<p><img src="https://s1.ax1x.com/2022/06/19/XjBVhD.png" class="lazyload placeholder" data-srcset="https://s1.ax1x.com/2022/06/19/XjBVhD.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="git log 的常用选项"></p>
<h4 id="限制输出长度"><a href="#限制输出长度" class="headerlink" title="限制输出长度"></a>限制输出长度</h4><p>除了定制输出格式的选项之外，git log 还有许多非常实用的限制输出长度的选项，也就是只输出部分提交信息。之前你已经看到过 -2 了，它只显示最近的两条提交，实际上，这是 -<n> 选项的写法，其中的 n 可以是任何整数，表示仅显示最近的若干条提交。不过实践中我们是不太用这个选项的，Git 在输出所有提交时会自动调 用分页程序，所以你一次只会看到一页的内容。</p>
<p>另外还有按照时间作限制的选项，比如 –since 和 –until 也很有用。例如，下面的命令列出所有最近两周内的提交：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log --since<span class="token operator">=</span><span class="token number">2</span>.weeks<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>另一个非常有用的筛选选项是 -S，可以列出那些添加或移除了某些字符串的提交。比如说，你想找出添加或移除了某一个特定函数的引用的提交，你可以这样使用：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git log -SModified<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p> 限制 git log 输出的选项:</p>
<p><img src="https://s1.ax1x.com/2022/06/19/XjBAAK.png" class="lazyload placeholder" data-srcset="https://s1.ax1x.com/2022/06/19/XjBAAK.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="限制 git log 输出的选项"></p>
<h3 id="撤消操作"><a href="#撤消操作" class="headerlink" title="撤消操作"></a>撤消操作</h3><p>在任何一个阶段，你都有可能想要撤消某些操作。这里，我们将会学习几个撤消你所做修改的基本工具。</p>
<p>有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。此时，可以运行带有 –amend 选项的提交命令尝试重新提交，这个命令会将暂存区中的文件提交。：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit --amend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果自上次提交以来你还未做任何修改（例如，在上次提交后马上执行了此命令），那么快照会保持不变，而你所修改的只是提交信息。</p>
<h4 id="取消暂存的文件"><a href="#取消暂存的文件" class="headerlink" title="取消暂存的文件"></a>取消暂存的文件</h4><p>例如，你已经修改了两个文件并且想要将它们作为两次独立的修改提交，但是却意外地输入了git add * 暂存了它们两个。如何只取消暂存两个中的一个呢？</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset HEAD CONTRIBUTING.md<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="撤消对文件的修改"><a href="#撤消对文件的修改" class="headerlink" title="撤消对文件的修改"></a>撤消对文件的修改</h4><p>如果你并不想保留对 CONTRIBUTING.md 文件的修改怎么办？你该如何方便地撤消修改 - 将它还原成上次提交时的样子（或者刚克隆完的样子，或者刚把它放入工作目录时的样子）？</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -- CONTRIBUTING.md<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="git远程仓库"><a href="#git远程仓库" class="headerlink" title="git远程仓库"></a>git远程仓库</h2><blockquote>
<p>远程仓库是指托管在因特网或其他网络中的你的项目的版本库。</p>
</blockquote>
<h3 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h3><p>如果想查看你已经配置的远程仓库服务器，可以运行 git remote 命令。它会列出你指定的每一个远程服务器的简写。如果你已经克隆了自己的仓库，那么至少应该能看到 origin - 这是 Git 给你克隆的仓库服务器的默认名字：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>你也可以指定选项 -v，会显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3><p>首先在github上创建一个仓库，然后clone到本地，再然后运行git remote add <shortname> <url> 添加一个新的远程 Git 仓库，同时指定一个你可以轻松引用的简写：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> gs https://github.com/mygit-WK/gStudy.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>现在你可以在命令行中使用字符串 gs来代替整个 URL。例如，如果你想拉取 Paul 的仓库中有但你没有的信息，可以运行 git fetch gs：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> fetch gs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="从远程仓库中抓取与拉取"><a href="#从远程仓库中抓取与拉取" class="headerlink" title="从远程仓库中抓取与拉取"></a>从远程仓库中抓取与拉取</h3><p>从远程仓库中获得数据，可以执行：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git fetch [remote-name]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这个命令会访问远程仓库，从中拉取所有你还没有的数据。执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。 </p>
<p>如果你使用 clone 命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以 “origin” 为简写。所以git fetch origin 会抓取克隆（或上一次抓取）后新推送的所有工作。必须注意 git fetch 命令会将数据拉取到你的本地仓库它并不会自动合并或修改你当前的工作。</p>
<p>如果你有一个分支设置为跟踪一个远程分支，可以使用 git pull 命令来自动的抓取然后合并远程分支到当前分支。默认情况下，git clone 命令会自动设置本地 master 分支跟踪克隆的远程仓库的 master 分支（或不管是什么名字的默认分支）。运行 git pull 通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支。</p>
<h3 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h3><p>当你想分享你的项目时，必须将其推送到上游。这个命令很简单：git push [remote-name] [branch-name]。当你想要将 master 分支推送到 origin 服务器时（再次说明，克隆时通常会自动帮你设置好那两个名字），那么运行这个命令就可以将你所做的备份到服务器：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>只有当你有所克隆服务器的写入权限，并且之前没有人推送过时，这条命令才能生效。当你和其他人在同一时间克隆，他们先推送到上游然后你再推送到上游，你的推送就会毫无疑问地被拒绝。你必须先将他们的工作拉取下来并将其合并进你的工作后才能推送。</p>
<h3 id="查看远程仓库-1"><a href="#查看远程仓库-1" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h3><p>如果想要查看某一个远程仓库的更多信息，可以使用 git remote show [remote-name] 命令。如果想以一个特定的缩写名运行这个命令，例如 origin，会得到像下面类似的信息：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git remote show origin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="远程仓库的移除与重命名"><a href="#远程仓库的移除与重命名" class="headerlink" title="远程仓库的移除与重命名"></a>远程仓库的移除与重命名</h3><p>如果想要重命名引用的名字可以运行 git remote rename 去修改一个远程仓库的简写名。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">rename</span> gs gitstudy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>可以使用 git remote rm 来移除远程仓库：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git remote rm gitstudy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="git标签"><a href="#git标签" class="headerlink" title="git标签"></a>git标签</h2><h3 id="列出标签"><a href="#列出标签" class="headerlink" title="列出标签"></a>列出标签</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git tag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h3><p>Git 使用两种主要类型的标签：轻量标签（lightweight）与附注标签（annotated）</p>
<p>在 Git 中创建一个附注标签是很简单的。最简单的方式是当你在运行 tag 命令时指定 -a 选项，-m 选项指定了一条将会存储在标签中的信息。如果没有为附注标签指定一条信息，Git 会运行编辑器要求你输入信息：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git tag -a v1.0 -m &#39;my version 1.0&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>通过使用 git show 命令可以看到标签信息与对应的提交信息：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git show v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>另一种给提交打标签的方式是使用轻量标签。轻量标签本质上是将提交校验和存储到一个文件中,没有保存任何其他信息。创建轻量标签，不需要使用 -a、-s 或 -m 选项，只需要提供标签名字：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git tag v1.0-lw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="后期打标签"><a href="#后期打标签" class="headerlink" title="后期打标签"></a>后期打标签</h3><p>你也可以对过去的提交打标签。现在，假设在 v1.2 时你忘记给项目打标签，也就是在 “updated rakefile” 提交。你可以在之后补上标签。要在那个提交上打标签，你需要在命令的末尾指定提交的校验和（或部分校验和）:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag -a v1.2 9fceb02<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="共享标签"><a href="#共享标签" class="headerlink" title="共享标签"></a>共享标签</h3><p>默认情况下，git push 命令并不会传送标签到远程仓库服务器上。在创建完标签后你必须显式地推送标签到共享服务器上。这个过程就像共享远程分支一样 - 你可以运行 git push origin [tagname]。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin v1.5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果想要一次性推送很多标签，也可以使用带有 –tags 选项的 git push 命令。这将会把所有不在远程仓库服务器上的标签全部传送到那里。</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git push origin --tags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="检出标签"><a href="#检出标签" class="headerlink" title="检出标签"></a>检出标签</h3><p>在 Git 中你并不能真的检出一个标签，因为它们并不能像分支一样来回移动。如果你想要工作目录与仓库中特定的标签版本完全一样，可以使用 git checkout -b [branchname] [tagname] 在特定的标签上创建一个新分支：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -b version2 v2.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="Git-别名"><a href="#Git-别名" class="headerlink" title="Git 别名"></a>Git 别名</h3><p>Git 并不会在你输入部分命令时自动推断出你想要的命令。如果不想每次都输入完整的 Git 命令，可以通过 gitconfig 文件来轻松地为每一个命令设置一个别名。这里有一些例子你可以试试：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global alias.co checkout
<span class="token function">git</span> config --global alias.br branch
<span class="token function">git</span> config --global alias.ci commit
<span class="token function">git</span> config --global alias.st status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>这意味着，当要输入 git commit<code>时，只需要输入 </code>git ci。</p>
<p>可以向 Git 中 添加你自己的取消暂存别名：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global alias.unstage <span class="token string">'reset HEAD --'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>等价于：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> unstage fileA
<span class="token function">git</span> reset HEAD -- fileA<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>通常也会添加一个 last 命令，可以轻松地看到最后一次提交：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git config --global alias.last &#39;log -1 HEAD&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>版本控制</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode</title>
    <url>/2023/02/28/LeetCode/</url>
    <content><![CDATA[<h1 id="LeetCode刷题"><a href="#LeetCode刷题" class="headerlink" title="LeetCode刷题"></a>LeetCode刷题</h1><span id="more"></span>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/2023/04/11/Docker/</url>
    <content><![CDATA[<h1 id="Docker学习"><a href="#Docker学习" class="headerlink" title="Docker学习"></a>Docker学习</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Docker是一个容器,容器是您的机器上的一个沙箱进程，它与主机上的所有其他进程隔离开来。</p>
<h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><p>使用默认源安装(版本可能比较老):<br><code>sudo apt-get install -y docker.io</code></p>
<p>使用脚本安装:<br><code>curl -k -sSl https://get.docker.com | sudo sh</code></p>
<p>使用<code>sudo docker run hello-world</code>测试Docker是否安装成功!</p>
<span id="more"></span>


]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2023/03/05/Linux/</url>
    <content><![CDATA[<h1 id="Linux进阶学习"><a href="#Linux进阶学习" class="headerlink" title="Linux进阶学习"></a>Linux进阶学习</h1><blockquote>
<p>记录学习Linux的路程</p>
</blockquote>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ol>
<li><p>显示时间与日期：<code>date</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@name ~<span class="token punctuation">]</span><span class="token comment"># date</span>
<span class="token number">2023</span>年 03月 <span class="token number">19</span>日 星期日 <span class="token number">11</span>:17:06 CST<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>显示日历：<code>cal</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@name ~<span class="token punctuation">]</span><span class="token comment"># cal</span>
      三月 <span class="token number">2023</span>     
日 一 二 三 四 五 六
          <span class="token number">1</span>  <span class="token number">2</span>  <span class="token number">3</span>  <span class="token number">4</span>
 <span class="token number">5</span>  <span class="token number">6</span>  <span class="token number">7</span>  <span class="token number">8</span>  <span class="token number">9</span> <span class="token number">10</span> <span class="token number">11</span>
<span class="token number">12</span> <span class="token number">13</span> <span class="token number">14</span> <span class="token number">15</span> <span class="token number">16</span> <span class="token number">17</span> <span class="token number">18</span>
<span class="token number">19</span> <span class="token number">20</span> <span class="token number">21</span> <span class="token number">22</span> <span class="token number">23</span> <span class="token number">24</span> <span class="token number">25</span>
<span class="token number">26</span> <span class="token number">27</span> <span class="token number">28</span> <span class="token number">29</span> <span class="token number">30</span> <span class="token number">31</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>使用计算器：<code>bc</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@name ~<span class="token punctuation">]</span><span class="token comment"># bc</span>
<span class="token function">bc</span> <span class="token number">1.06</span>.95
Copyright <span class="token number">1991</span>-1994, <span class="token number">1997</span>, <span class="token number">1998</span>, <span class="token number">2000</span>, <span class="token number">2004</span>, <span class="token number">2006</span> Free Software Foundation, Inc.
This is <span class="token function">free</span> software with ABSOLUTELY NO WARRANTY.
For details <span class="token builtin class-name">type</span> `warranty'. 
<span class="token number">1</span>+2
<span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>man</code>命令和<code>--help</code>命令</p>
</li>
<li><p>观察系统的使用状态</p>
<ol>
<li>查看谁在线：<code>who</code></li>
<li>查看网络的联机状态：<code>netstat -a</code></li>
<li>查看后台执行的程序：<code>ps -aux</code></li>
</ol>
</li>
<li><p>关机与重启：<code>shutdown</code>、<code>reboot</code></p>
</li>
<li><p>将数据同步写入磁盘：<code>sync</code></p>
</li>
</ol>
<span id="more"></span>

<h2 id="Linux权限"><a href="#Linux权限" class="headerlink" title="Linux权限"></a>Linux权限</h2><blockquote>
<p>默认情况下，所有系统上的账号和一般身份用户以及root用户的相关信息，都记录在<code>/etc/passwd</code>文件内，个人密码则记录在<code>/etc/shadow</code>文件内，Linux的所有组名都记录在<code>/etc/group</code>中。</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB</title>
    <url>/2023/03/31/MongoDB/</url>
    <content><![CDATA[<h1 id="MongoDB数据库"><a href="#MongoDB数据库" class="headerlink" title="MongoDB数据库"></a>MongoDB数据库</h1><h2 id="MongoDB概述"><a href="#MongoDB概述" class="headerlink" title="MongoDB概述"></a>MongoDB概述</h2><p>MongoDB是一种强大、灵活、可扩展的数据存储方式，拓展了关系型数据库的众多有用功能。比如：辅助索引、范围查询和排序。MongoDB是面向文档的数据库。</p>
<p>MongoDB具有的功能：（不支持联接和多行事务）</p>
<ol>
<li>索引：支持通用的辅助索引、提供唯一的、复合的和地理空间索引能力。</li>
<li>存储Javascript：可以直接在服务端存取Javascript的函数和值。</li>
<li>聚合：支持MapReduce和其他聚合工具。</li>
<li>固定集合：集合大小是有上限的。</li>
<li>文件存储：支持用一种容易试用的协议存储大型文件和文件的元数据。</li>
</ol>
<span id="more"></span>

<h2 id="文档的增删改查"><a href="#文档的增删改查" class="headerlink" title="文档的增删改查"></a>文档的增删改查</h2><h3 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h3><h5 id="使用insert插入一个文档"><a href="#使用insert插入一个文档" class="headerlink" title="使用insert插入一个文档"></a>使用insert插入一个文档</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>student<span class="token punctuation">.</span><span class="token keyword">insert</span><span class="token punctuation">(</span>&#123;<span class="token string">"name"</span>:<span class="token string">"张三"</span>&#125;<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="批量插入文档"><a href="#批量插入文档" class="headerlink" title="批量插入文档"></a>批量插入文档</h5><p><code>一次批量插入只是单次的TCP请求</code>，通过批量插入可以避免很多零散的请求所带来的开销。</p>
<h5 id="插入的原理和作用"><a href="#插入的原理和作用" class="headerlink" title="插入的原理和作用"></a>插入的原理和作用</h5><p>当执行插入时，使用的驱动程序会将数据转换成BSON的形式，然后将其送入数据库，由数据库进行解析，首先检测是否包含”_id”键，并且文档不超过4MB，但是除此之外不做别的数据验证，仅仅只是简单地将文档原样存入数据库中。</p>
<h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><h5 id="使用remove删除文档"><a href="#使用remove删除文档" class="headerlink" title="使用remove删除文档"></a>使用remove删除文档</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>student<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>&#123;&#125;<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="使用remove删除特定文档"><a href="#使用remove删除特定文档" class="headerlink" title="使用remove删除特定文档"></a>使用remove删除特定文档</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>student<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>&#123;<span class="token string">"name"</span>:<span class="token string">"张三"</span>&#125;<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><h5 id="set"><a href="#set" class="headerlink" title="$set"></a>$set</h5><p>$set用来指定一个键的值，如果键不存在，则创建它。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>student<span class="token punctuation">.</span><span class="token keyword">update</span><span class="token punctuation">(</span>&#123;<span class="token string">"name"</span>:<span class="token string">"张三"</span>&#125;<span class="token punctuation">,</span>&#123;<span class="token string">"$set"</span>:&#123;<span class="token string">"age"</span>:<span class="token number">20</span>&#125;&#125;<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="inc"><a href="#inc" class="headerlink" title="$inc"></a>$inc</h5><p>$inc用来增加已有键的值(只能为数字),或者在键不存在时创建一个键。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>student<span class="token punctuation">.</span><span class="token keyword">update</span><span class="token punctuation">(</span>&#123;<span class="token string">"name"</span>:<span class="token string">"张三"</span>&#125;<span class="token punctuation">,</span>&#123;<span class="token string">"$inc"</span>:&#123;<span class="token string">"age"</span>:<span class="token number">20</span>&#125;&#125;<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="数组修改器"><a href="#数组修改器" class="headerlink" title="数组修改器"></a>数组修改器</h4><h5 id="push"><a href="#push" class="headerlink" title="$push"></a>$push</h5><p>如果指定的键已经存在，$push会向已有数组的末尾加入一个元素，要是没有就会创建一个数组。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>student<span class="token punctuation">.</span><span class="token keyword">update</span><span class="token punctuation">(</span>&#123;<span class="token string">"name"</span>:<span class="token string">"张三"</span>&#125;<span class="token punctuation">,</span>&#123;<span class="token string">"$push"</span>:&#123;<span class="token string">"comment"</span>:&#123;<span class="token string">"name"</span>:<span class="token string">"Joe"</span>&#125;&#125;&#125;<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="ne-amp-amp-addToSet"><a href="#ne-amp-amp-addToSet" class="headerlink" title="$ne&amp;&amp;$addToSet"></a>$ne&amp;&amp;$addToSet</h5><p>如果一个值不在数组里面就把它加进去。$addToSet可以避免重复。将$addToSet与$each进行组合可以添加多个不同的值。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>student<span class="token punctuation">.</span><span class="token keyword">update</span><span class="token punctuation">(</span>&#123;<span class="token string">"name"</span>:<span class="token string">"张三"</span>&#125;<span class="token punctuation">,</span>&#123;<span class="token string">"$addToSet"</span>:&#123;<span class="token string">"email"</span>:&#123;<span class="token string">"each"</span>:<span class="token punctuation">[</span><span class="token string">"123456@qq.com"</span><span class="token punctuation">,</span><span class="token string">"666666@qq.com"</span><span class="token punctuation">]</span>&#125;&#125;&#125;<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="pop"><a href="#pop" class="headerlink" title="$pop"></a>$pop</h5><p>可以使用$pop从数组的任何一端删除元素。-1表示从头部删除，1表示从尾部删除。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>student<span class="token punctuation">.</span><span class="token keyword">update</span><span class="token punctuation">(</span>&#123;<span class="token string">"name"</span>:<span class="token string">"张三"</span>&#125;<span class="token punctuation">,</span>&#123;<span class="token string">"$pop"</span>:&#123;<span class="token string">"email"</span>:<span class="token operator">-</span><span class="token number">1</span>&#125;&#125;<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="pull"><a href="#pull" class="headerlink" title="$pull"></a>$pull</h5><p>$pull可以实现基于特定条件来删除元素。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token keyword">insert</span><span class="token punctuation">(</span>&#123; <span class="token string">"todo"</span>: <span class="token punctuation">[</span><span class="token string">"dishes"</span><span class="token punctuation">,</span> <span class="token string">"laundry"</span><span class="token punctuation">,</span> <span class="token string">"dry cleaning"</span><span class="token punctuation">]</span> &#125;<span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span>list<span class="token punctuation">.</span>find<span class="token punctuation">(</span>&#123;&#125;<span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token keyword">update</span><span class="token punctuation">(</span>&#123;&#125;<span class="token punctuation">,</span>&#123;<span class="token string">"$pull"</span>:&#123;<span class="token string">"todo"</span>:<span class="token string">"laundry"</span>&#125;&#125;<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h5 id="upsert"><a href="#upsert" class="headerlink" title="upsert"></a>upsert</h5><p>upsert是一种特殊的更新，要是没有文档符合更新条件，就会以这个条件和更新文档为基础创建一个新文档。如果找到了匹配的文档，则正常更新。update第三个参数指定为true则表示为upsert。</p>
<h5 id="save"><a href="#save" class="headerlink" title="save"></a>save</h5><p>save可以在文档不存在时插入，存在时更新。若文档含有“_id”，save会调用upsert，否则会调用插入。</p>
<h4 id="更新多个文档"><a href="#更新多个文档" class="headerlink" title="更新多个文档"></a>更新多个文档</h4><p>默认情况下，更新只对符合匹配条件的第一个文档执行操作，要使所有匹配到的文档都得到更新，可以设置update的第四个参数为true。</p>
<h4 id="返回已更新的文档"><a href="#返回已更新的文档" class="headerlink" title="返回已更新的文档"></a>返回已更新的文档</h4><p>使用findAndModify可以返回已更新的文档。</p>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>查询所有记录。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>student<span class="token punctuation">.</span>find<span class="token punctuation">(</span>&#123;&#125;<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="指定返回的键"><a href="#指定返回的键" class="headerlink" title="指定返回的键"></a>指定返回的键</h4><p>可以通过find的第二个参数来指定想要的键。值为0则表示剔除该键。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>student<span class="token punctuation">.</span>find<span class="token punctuation">(</span>&#123;&#125;<span class="token punctuation">,</span>&#123; <span class="token string">"name"</span>: <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"age"</span>: <span class="token number">1</span> &#125;<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="查询条件"><a href="#查询条件" class="headerlink" title="查询条件"></a>查询条件</h4><h5 id="比较查询"><a href="#比较查询" class="headerlink" title="比较查询"></a>比较查询</h5><ol>
<li>$lt相当于&lt;</li>
<li>$lte相当于&lt;&#x3D;</li>
<li>$gt相当于&gt;</li>
<li>$gte相当于&gt;&#x3D;</li>
<li>$ne相当于!&#x3D;</li>
</ol>
<h5 id="OR查询"><a href="#OR查询" class="headerlink" title="OR查询"></a>OR查询</h5><ol>
<li>$in：用来查询一个键的多个值。</li>
<li>$nin：与$in相对。</li>
<li>$or：对多个键进行or查询就是使用这个。</li>
</ol>
<h5 id="not进行取反"><a href="#not进行取反" class="headerlink" title="$not进行取反"></a>$not进行取反</h5><h5 id="对数组进行查询"><a href="#对数组进行查询" class="headerlink" title="对数组进行查询"></a>对数组进行查询</h5><ol>
<li>$all</li>
<li>$size</li>
<li>$slice</li>
</ol>
<h2 id="MongoDB主备"><a href="#MongoDB主备" class="headerlink" title="MongoDB主备"></a>MongoDB主备</h2><p>这里我采用的操作系统是<code>LinuxMint</code>,由于MongoDB4.x版本不在支持主备，所以这里暂不展示。</p>
<h2 id="MongoDB副本集"><a href="#MongoDB副本集" class="headerlink" title="MongoDB副本集"></a>MongoDB副本集</h2><blockquote>
<p>优点：主节点宕机后，会从副本节点中选举出新的主节点。</p>
<ul>
<li>数据冗余：副本集可以确保副本结点与主结点数据的更新，以防止单个数据库的服务宕机造成数据丢失的问题。这些副本结点可以和主结点位于同一个数据中心或出于安全考虑分布于其他数据中心。</li>
<li>主挂副顶：副本集没有固定的主结点，整个集群会选举出一个主结点，当这个主结点不会正常工作时，会选举一个副本结点切换为主结点，客户端会连接到这个新的主结点，并且数据和应用程序都将保持可用。MongoDB副本集实现这样的主&#x2F;副本切换是自动的，因此副本集是保证MongoDB高可用的基础。</li>
<li>读写分离：副本集可以将读取请求分流到所有副本集上，以减轻主结点的读写压力。</li>
</ul>
</blockquote>
<h3 id="副本集的角色"><a href="#副本集的角色" class="headerlink" title="副本集的角色"></a>副本集的角色</h3><h4 id="主结点"><a href="#主结点" class="headerlink" title="主结点"></a>主结点</h4><p>主结点是副本集中负责处理客户端请求和读写数据的主要成员。主节点通过iplog(操作日志)记录所有操作。副本集中有且只有一个主结点，如果当主结点不可用时，则会从副本结点中选举出新的主结点。</p>
<h4 id="副节点"><a href="#副节点" class="headerlink" title="副节点"></a>副节点</h4><p>副本结点定期轮询主结点来获取oplog记录的操作内容，然后对自己的数据副本执行这些操作，从而保证副本结点的数据副本与主结点保持一致。副本集中可以有一个或者多个副本结点。当主结点宕机时，副本集会根据副本结点的优先级进行选举，确定哪个副本结点成为新的主结点。</p>
<h4 id="仲裁节点"><a href="#仲裁节点" class="headerlink" title="仲裁节点"></a>仲裁节点</h4><p>仲裁结点不会同步主结点的数据副本，也不会被选举为主结点，它主要时参与选举投票。由于仲裁结点没有访问压力，比较空闲，因此仲裁结点需要的资源很小。 </p>
<h3 id="副本集部署"><a href="#副本集部署" class="headerlink" title="副本集部署"></a>副本集部署</h3><p>首先创建好四个文件夹，分别为27000，27001，27002，27003。里面包含<code>mongod</code>、<code>db</code>文件夹和一个配置文件。这里我们将27003作为仲裁者。</p>
<p>配置文件内容为：</p>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">port=27000                     
dbpath=./db
bind_ip=192.168.56.109
replSet=mongo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后执行：<code>./mongod --config=配置文件名</code>启动三个服务</p>
<p><img src="/../img/MongoDb/27000.png" class="lazyload placeholder" data-srcset="/../img/MongoDb/27000.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230408203924739"></p>
<p><img src="/../img/MongoDb/27001.png" class="lazyload placeholder" data-srcset="/../img/MongoDb/27001.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230408203945517"></p>
<p><img src="/../img/MongoDb/27002.png" class="lazyload placeholder" data-srcset="/../img/MongoDb/27002.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230408204001445"></p>
<p><img src="/../img/MongoDb/27003.png" class="lazyload placeholder" data-srcset="/../img/MongoDb/27003.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230408210359525"></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">//初始化集群</span>
rs<span class="token punctuation">.</span>initiate<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="/../img/MongoDb/27000-1.png" class="lazyload placeholder" data-srcset="/../img/MongoDb/27000-1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230408205142967"></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">//查看集群配置，此时只有一个服务</span>
rs<span class="token punctuation">.</span>conf<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="/../img/MongoDb/27000-2.png" class="lazyload placeholder" data-srcset="/../img/MongoDb/27000-2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230408205255942"></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">//向集群中添加members，此时有三个服务，分别为27000，27001，27002</span>
rs<span class="token punctuation">.</span><span class="token keyword">add</span><span class="token punctuation">(</span><span class="token string">"192.168.56.109:27001"</span><span class="token punctuation">)</span>
rs<span class="token punctuation">.</span><span class="token keyword">add</span><span class="token punctuation">(</span><span class="token string">"192.168.56.109:27002"</span><span class="token punctuation">)</span>
<span class="token comment">//再添加一个仲裁者</span>
rs<span class="token punctuation">.</span>addArb<span class="token punctuation">(</span><span class="token string">"192.168.56.109:27003"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/../img/MongoDb/27000-3.png" class="lazyload placeholder" data-srcset="/../img/MongoDb/27000-3.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230408205908464"></p>
<p>此时使用下面的语句查看集群状态，发现27000为主节点：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">//查看集群的状态</span>
rs<span class="token punctuation">.</span><span class="token keyword">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="/../img/MongoDb/27000-4.png" class="lazyload placeholder" data-srcset="/../img/MongoDb/27000-4.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230408210544451"></p>
<p>然后此时我们停止27000的服务，然后连接27001的服务，使用<code>rs.status()查看集群状态</code>发现27000出现连接不可达，27002通过选举成为了主节点。至此我们就实现了副本集的部署。</p>
<p><img src="/../img/MongoDb/27000-5.png" class="lazyload placeholder" data-srcset="/../img/MongoDb/27000-5.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230408210806783"></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习</title>
    <url>/2023/04/02/MachineLearning/</url>
    <content><![CDATA[<h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote>
<p>机器学习实际上就是找寻一个函数，给定一个输入，获得一个输出</p>
</blockquote>
<p>Regression:函数输出一个数值 </p>
<p>Classification:给定一些类别，选择一个输出</p>
<p>Structured Learning:创建一些结构化的东西</p>
<p>训练的步骤：</p>
<ul>
<li><p>步骤一:找一个带有未知参数的函数(Model)</p>
</li>
<li><p>步骤二:从训练数据中定义出损失函数(L(<em>b</em>,<em>w</em>))</p>
</li>
<li><p>步骤三:最优化</p>
<span id="more"></span></li>
</ul>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/2022/06/21/NetWork/</url>
    <content><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><blockquote>
<p>基于谢希仁老师的《计算机网络 第七版》的学习，了解后能够对于网络之间的交换有更加深入的理解，学习前后端必修之课</p>
</blockquote>
<h2 id="第一章-概述"><a href="#第一章-概述" class="headerlink" title="第一章 概述"></a>第一章 概述</h2><h3 id="互联网的历史和组成"><a href="#互联网的历史和组成" class="headerlink" title="互联网的历史和组成"></a>互联网的历史和组成</h3><span id="more"></span>

<h4 id="互联网的两个基本特点："><a href="#互联网的两个基本特点：" class="headerlink" title="互联网的两个基本特点："></a>互联网的两个基本特点：</h4><ol>
<li>连通性：互联网上的用户之间不管相隔多远，都可以非常方便的交换信息。</li>
<li>共享：主要指资源共享。包括文件共享，软件共享以及硬件共享。</li>
</ol>
<p>计算机网络是由若干结点(计算机、集线器、交换机或路由器)和连接这些结点的链路组成的。</p>
<h4 id="互联网发展的三个阶段："><a href="#互联网发展的三个阶段：" class="headerlink" title="互联网发展的三个阶段："></a>互联网发展的三个阶段：</h4><ol>
<li>第一阶段：从单个网络 ARPANET 向互连网发展。1969 年美国国防部创建了第一个分组交换网 ARPANET，刚开始只是简单的分组交换网。20 世纪 70 年代，单一的网络已经无法满足所有的通信问题，于是开始研究多种网络。1983 年 TCP&#x2F;IP 协议成为 ARPANET 的标准协议，于是 1983 年作为互联网的诞生时间。</li>
<li>第二阶段：建成了三级结构的互联网。1985 年起，NSF 围绕六个大型计算机中心建设计算机网络，即 NSFNET。三级计算机网络分为<code>主干网</code>、<code>地区网</code>、<code>校园网</code>。这种三级结构覆盖了全美国主要的大学和研究所。</li>
<li>第三阶段：逐渐形成了多层次的 ISP 结构的互联网。</li>
</ol>
<h4 id="互联网的标准"><a href="#互联网的标准" class="headerlink" title="互联网的标准"></a>互联网的标准</h4><p>所有的互联网表标准都是以 RFC 的形式在互联网上发表的。但并非所有的 RFC 都是互联网标准。互联网正式标准需要经历三个阶段：</p>
<ol>
<li>互联网草案：有效期只有六个月，此时还不能算 RFC 文档</li>
<li>建议标准：从这阶段开始成为 RFC 文档</li>
<li>互联网标准：达到正式标准后，每个标准就分配到一个编号。</li>
</ol>
<h4 id="互联网的组成"><a href="#互联网的组成" class="headerlink" title="互联网的组成"></a>互联网的组成</h4><ul>
<li><p>边缘部分：由所有连在互联网上的主机组成。</p>
<ul>
<li><p>C&#x2F;S 方式：客户端&#x2F;服务器方式</p>
</li>
<li><p>P2P 方式：对等连接方式(两台主机在通信时并不区分哪一个是服务请求方和服务提供方)</p>
</li>
</ul>
</li>
<li><p>核心部分：由大量网络和连接这些网络的路由器组成，主要为边缘部分提供服务。</p>
<ul>
<li>路由器：实现分组交换的关键构件，任务是<em>转发收到的分组</em>。</li>
</ul>
</li>
</ul>
<h5 id="分组交换的特点"><a href="#分组交换的特点" class="headerlink" title="分组交换的特点"></a>分组交换的特点</h5><p>分组交换采用存储转发技术。将一个报文(要发送的整块数据)划分为几个分组后再进行交换。分组又称为”包”，分组的首部又称为”包头”(包含了目的地址和源地址控制信息)。</p>
<p>分组交换的过程:路由器收到一个分组，先暂存一下(暂存的是短分组)，检查其首部，查找转发表，按照首部中的目的地址，找到合适的接口转发出去，把分组交给下一个路由器。</p>
<h5 id="分组交换的优点"><a href="#分组交换的优点" class="headerlink" title="分组交换的优点"></a>分组交换的优点</h5><ol>
<li>高效：在分组传输过程中动态分配传输带宽，对通信链路是逐段占用</li>
<li>灵活：为每一个分组独立地选择合适的转发路由</li>
<li>迅速：以分组作为传送单位，可以先不建立连接就能向其他主机发送分组</li>
<li>可靠：保证可靠性的网络协议，分布式多路由分组交换网</li>
</ol>
<h3 id="计算机网络的类别"><a href="#计算机网络的类别" class="headerlink" title="计算机网络的类别"></a>计算机网络的类别</h3><ol>
<li><p>按照网络作用范围分类</p>
<ol>
<li>广域网：作用范围大，任务是通过长距离运送主机所发送的数据。</li>
<li>城域网：一般是城市，可以是一个或几个单位，也可是一种公用设施</li>
<li>局域网：一般用于微型计算机或工作站通过高速链路相连</li>
<li>个人局域网：也称为无线个人局域网</li>
</ol>
</li>
<li><p>按照网络的使用者进行分类</p>
<ol>
<li>公用网</li>
<li>专用网</li>
</ol>
</li>
</ol>
<h3 id="计算机网络的性能指标"><a href="#计算机网络的性能指标" class="headerlink" title="计算机网络的性能指标"></a>计算机网络的性能指标</h3><h4 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h4><p>速率指数据的传送速率，也称为数据率或比特率。单位 bit&#x2F;s(或 b&#x2F;s，bps),提到速率时往往指的是额定速率或标称速率，并非实际运行的速率。</p>
<h4 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h4><p>计算机中带宽指的是某通道传送数据的能力，即单位时间内网络中某信道所能通过的最高数据率。</p>
<h4 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h4><p>吞吐量指单位时间内通过某个网络的实际数据量，受网络的带宽或网络的额定速率的限制。</p>
<h4 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h4><p>时延指数据从网络的一端传送到另一端所需时间。也被称为延迟。</p>
<h5 id="时延的组成"><a href="#时延的组成" class="headerlink" title="时延的组成"></a>时延的组成</h5><ol>
<li><p>发送时延：主机或路由器发送数据帧所需要的时间，又叫传输时延。</p>
</li>
<li><p>传播时延：传播时延是电磁波在信道传播一定距离需要花费的时间。与传输信道长度无关。信号传送距离越远，传播时延就越大。</p>
</li>
<li><p>处理时延：主机或路由器在收到分组需要花费一定时间进行处理。</p>
</li>
<li><p>排队时延：分组在传输过程中要经过许多路由器，进入路由器后要先在输入队列中排队等待处理。</p>
<p>总时延&#x3D;发送时延+传播时延+处理时延+排队时延</p>
</li>
</ol>
<h4 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h4><p>时延带宽积表示这个链路可以容纳的比特数</p>
<p>时延带宽积&#x3D;传播时延 x 带宽</p>
<h4 id="往返时间-RTT"><a href="#往返时间-RTT" class="headerlink" title="往返时间 RTT"></a>往返时间 RTT</h4><p>RTT 表示双向交互一次所需要的时间。</p>
<h4 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h4><p>信道利用率指出某信道有百分之几的时间是被利用的。网络利用率则是全网络的加权平均值。信道或网络利用率过高会产生非常大的时延。</p>
<h3 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h3><h4 id="OSI-七层参考模型"><a href="#OSI-七层参考模型" class="headerlink" title="OSI 七层参考模型"></a>OSI 七层参考模型</h4><p>1983 年正式形成了 OSI 模型，OSI 试图达到理想境界，因而全球计算机可以很方便的进行互连和数据交换。<br>OSI 失败原因：</p>
<ol>
<li>OSI 专家缺乏实际经验，缺乏商业驱动力</li>
<li>OSI 协议过于复杂，运行效率低</li>
<li>OSI 制定的周期太长</li>
<li>OSI 层次划分不太合理</li>
</ol>
<h4 id="五层参考模型"><a href="#五层参考模型" class="headerlink" title="五层参考模型"></a>五层参考模型</h4><ol>
<li>应用层：任务是通过应用进程间的交互来完成特定的网络应用。交互的数据单元称为报文。</li>
<li>运输层：任务是负责向两台主机中进程之间的通信提供通用的数据传输服务。包括 TCP，UDP 协议，传输数据的单位分别是报文段和用户数据报。</li>
<li>网络层：负责为分组交换网上的不同主机提供通信服务。数据传输单位是 IP 数据报。</li>
<li>数据链路层：数据传输单位是帧。</li>
<li>物理层：数据传输单位是 bit。</li>
</ol>
<h2 id="第二章-物理层"><a href="#第二章-物理层" class="headerlink" title="第二章 物理层"></a>第二章 物理层</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>物理层考虑的是怎么才能在连接各种计算机的传输媒介上传输数据比特流。物理层的作用是要尽可能的屏蔽掉这些传输媒体和通信手段的差异。</p>
<h3 id="数据通信模型"><a href="#数据通信模型" class="headerlink" title="数据通信模型"></a>数据通信模型</h3><p>一个数据通信系统可以划分为三大部分：即源系统（发送端）、传输系统和目的系统（接收端）</p>
<h3 id="通信的三种方式"><a href="#通信的三种方式" class="headerlink" title="通信的三种方式"></a>通信的三种方式</h3><ol>
<li>单向通信（单工通信）：只能有一个方向的通信而没有反方向的交互。</li>
<li>双向交替通信（半双工通信）：即通信双方都可以发送消息，但不能双方同时发送。也就是说一方发送一方接收，过一段时间后可以再反过来。</li>
<li>双向同时通信（全双工通信）：即通信双方可以同时发送和接收消息。</li>
</ol>
<h3 id="传输媒介"><a href="#传输媒介" class="headerlink" title="传输媒介"></a>传输媒介</h3><h4 id="导引型"><a href="#导引型" class="headerlink" title="导引型"></a>导引型</h4><ol>
<li>双绞线</li>
<li>同轴电缆</li>
<li>光纤</li>
</ol>
<h4 id="非导引型"><a href="#非导引型" class="headerlink" title="非导引型"></a>非导引型</h4><p>无线电波</p>
<h3 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h3><h4 id="频分复用"><a href="#频分复用" class="headerlink" title="频分复用"></a>频分复用</h4><p>用户在分配到一定的频带后，在通信过程中始终占用着这个频带。即所有用户在同样的时间段内占用着不同的带宽资源。</p>
<h4 id="时分复用"><a href="#时分复用" class="headerlink" title="时分复用"></a>时分复用</h4><p>时分复用是指所有用户在不同时间段内占用着相同的频带宽度。</p>
<h4 id="统计时分复用"><a href="#统计时分复用" class="headerlink" title="统计时分复用"></a>统计时分复用</h4><p>统计时分复用是一种改进的时分复用，他能明显的提高信道的利用率。</p>
<h4 id="波分复用"><a href="#波分复用" class="headerlink" title="波分复用"></a>波分复用</h4><p>波分复用就是光的频分复用。</p>
<h4 id="码分复用"><a href="#码分复用" class="headerlink" title="码分复用"></a>码分复用</h4><p>码分复用是另一种共享信道的方法。由于各用户使用经过特殊挑选的码型，因此各用户之间不会构成干扰。最初用于军事通讯。</p>
<h2 id="第三章-数据链路层"><a href="#第三章-数据链路层" class="headerlink" title="第三章 数据链路层"></a>第三章 数据链路层</h2><p><strong>数据链路层使用的信道主要是：点对点信道和广播信道</strong></p>
<h3 id="点对点信道"><a href="#点对点信道" class="headerlink" title="点对点信道"></a>点对点信道</h3><p>链路：指从一个结点到相邻结点的一端物理线路，而中间没有其他任何交换结点。</p>
<p>数据链路：除了需要一条物理线路外，还必须要有一些必要的通信协议来控制这些数据的传输。</p>
<p>点对点信道的协议数据单元是帧，数据链路层把网络层交下来的数据构成帧发送到链路上，以及把接收到的帧中的数据取出上交给网络层。</p>
<p>点对点信道的数据链路层进行通信的步骤：</p>
<ol>
<li>结点 A 的数据链路层把网络层交下来的 IP 数据报添加首部和尾部封装成帧。</li>
<li>结点 A 把封装好的帧发送给结点 B 的数据链路层</li>
<li>若结点 B 的数据链路层收到的帧无差错，则从收到的帧中提取出 IP 数据报交给上面的网络层，否则丢弃这个帧。</li>
</ol>
<h4 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h4><p>封装成帧就是在一端数据的前后分别添加首部和尾部，这样就够成了一个帧。接收端在收到物理层上交的比特流后，就能根据首部和尾部的标记，从收到的比特流中识别帧的开始和结束。</p>
<h4 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h4><p>由于帧的开始和结束的标记使用专门指明的控制字符，因此所传输的数据中任何 8 比特的组合一定不允许和用作帧定界的控制符的比特编码一样，否则会导致帧定界的错误。</p>
<p>当传输的帧是用文本文件组成的帧时，其数据部分显然不会出现 SOH 和 EOT 这样的帧定界符，这样的传输就叫做透明传输。但是当数据部分是 ASCII 码的文本文件时，就有可能会找到错误的帧界。为了解决这样的问题，可以在出现控制字符的地方加一个转义字符，即使用<code>字节填充法</code>。</p>
<h4 id="差错检测"><a href="#差错检测" class="headerlink" title="差错检测"></a>差错检测</h4><p>比特在传输过程中可能会产生差错：1 可以变成 0,0 可以变成 1。即出现<code>比特差错</code>。在一段时间内传输错误的比特所占传输比特总数的比率称为误码率 BER。</p>
<p>目前主要使用的是循环冗余检验 CRC 进行差错检测。</p>
<p>循环冗余 CRC 的原理：在数据(k 位数据)后面添加供差错检测用的 n 位冗余码，然后构成一个帧发送出去，一共发送 k+n 位。经过 CRC 检验后得出的余数 R 为 0，则说明传输过程无差错，否则认为出现了差错。</p>
<p>n 位冗余码：用二进制的模 2 运算，相当于在数据后面添加 n 个 0。得到的 k+n 位数除以收发双方事先商定的 n+1 位除数 P，得出商是 Q 而余数是 R。R 就是冗余码，又称为帧检验序列 FCS。</p>
<h4 id="PPP-协议"><a href="#PPP-协议" class="headerlink" title="PPP 协议"></a>PPP 协议</h4><p>定义：PPP 协议就是用户计算机和 ISP 进行通信时所使用的数据链路层协议。</p>
<h5 id="PPP-协议要满足的要求"><a href="#PPP-协议要满足的要求" class="headerlink" title="PPP 协议要满足的要求"></a>PPP 协议要满足的要求</h5><ol>
<li>简单</li>
<li>封装成帧</li>
<li>透明性</li>
<li>多种网络层协议</li>
<li>多种类型链路</li>
<li>差错检测</li>
<li>检测连接状态</li>
<li>最大传送单元</li>
<li>网络层地址协商</li>
<li>数据压缩协商</li>
</ol>
<h5 id="PPP-协议的组成"><a href="#PPP-协议的组成" class="headerlink" title="PPP 协议的组成"></a>PPP 协议的组成</h5><ol>
<li>一个将 IP 数据报封装到串行链路的方法。</li>
<li>一个用来建立、配置和测试数据链路连接的链路控制协议 LCP。</li>
<li>一套网络控制协议 NCP。</li>
</ol>
<h5 id="PPP-协议的帧格式"><a href="#PPP-协议的帧格式" class="headerlink" title="PPP 协议的帧格式"></a>PPP 协议的帧格式</h5><h6 id="各字段信息"><a href="#各字段信息" class="headerlink" title="各字段信息"></a>各字段信息</h6><p><img src="/../img/NetWork/image-20220302114351973.png" class="lazyload placeholder" data-srcset="/../img/NetWork/image-20220302114351973.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220302114351973"></p>
<p>首尾两个 F 表示标志位，用来表示一个帧的开始和结束；A，C 两个字段至今还未有定义；协议如果地址是 0xC021 则表示 LCP 的数据；如果是 0x0021 则表示携带的是 IP 数据报；如果是 0x8021 则表示携带的是网络层的控制数据；FCS 表示帧检测序列。</p>
<h6 id="字节填充"><a href="#字节填充" class="headerlink" title="字节填充"></a>字节填充</h6><p>当信息字段中出现和标志字段一样的比特组合时，就要采取一些措施来解决这个问题。</p>
<p>当 PPP 协议使用异步传输时，转义符定义为 0x7D，并使用字节填充。</p>
<h6 id="零比特填充"><a href="#零比特填充" class="headerlink" title="零比特填充"></a>零比特填充</h6><p>只要出现连续的 5 个 1 就在后面填充 1 个 0；这样就可以保证不会出现连续的 6 个 1。接收端在收到帧后，先找到标志字段 F 确定边界，当出现 5 个连续 1 时就将后面的 0 删除，将数据还原为原来的比特流。</p>
<h5 id="PPP-协议的工作状态"><a href="#PPP-协议的工作状态" class="headerlink" title="PPP 协议的工作状态"></a>PPP 协议的工作状态</h5><p><img src="/../img/NetWork/image-20220302115820623.png" class="lazyload placeholder" data-srcset="/../img/NetWork/image-20220302115820623.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220302115820623"></p>
<h3 id="广播信道"><a href="#广播信道" class="headerlink" title="广播信道"></a>广播信道</h3><p>局域网：网络为一个单位所有，且地理范围和站点数目有限。</p>
<p>局域网按网络拓扑分类：星形网；环形网；总线网。</p>
<h4 id="CSMA-x2F-CD-协议（载波监听多点接入、碰撞检测）"><a href="#CSMA-x2F-CD-协议（载波监听多点接入、碰撞检测）" class="headerlink" title="CSMA&#x2F;CD 协议（载波监听多点接入、碰撞检测）"></a>CSMA&#x2F;CD 协议（载波监听多点接入、碰撞检测）</h4><p>因为在同一时间只能允许一台计算机发送数据。于是 CSMA&#x2F;CD 协议就诞生了。</p>
<p>“多点接入”说明这是总线型网络，许多计算机以多点接入的方式连接在一根总线上。</p>
<p>“载波监听”就是指用电子技术检测总线上有无其他计算机也在发送。</p>
<p>“碰撞检测”就是边发送边监听。</p>
<h2 id="第四章-网络层"><a href="#第四章-网络层" class="headerlink" title="第四章 网络层"></a>第四章 网络层</h2><h3 id="IP-协议"><a href="#IP-协议" class="headerlink" title="IP 协议"></a>IP 协议</h3><h4 id="分类的-IP-地址"><a href="#分类的-IP-地址" class="headerlink" title="分类的 IP 地址"></a>分类的 IP 地址</h4><h5 id="IP-地址及其表示方法"><a href="#IP-地址及其表示方法" class="headerlink" title="IP 地址及其表示方法"></a>IP 地址及其表示方法</h5><p>整个互联网是一个单一的、抽象的网络。IP 地址就是给互联网上的每一台主机的每一个接口分配一个在全世界范围内的唯一的 32 位的标识符。IP 地址现在由互联网名字和数字分配机构进行分配。</p>
<blockquote>
<p>IP 地址的编址方法的历史过程</p>
</blockquote>
<h6 id="分类的-IP-地址-1"><a href="#分类的-IP-地址-1" class="headerlink" title="分类的 IP 地址"></a>分类的 IP 地址</h6><p>定义：分类的 IP 地址就是将 IP 地址划分为若干个固定类，每一类地址都由两个固定长度的字段组成。第一个字段是<code>网络号</code>，表示主机所连接到的网络。第二个字段是<code>主机号</code>，表示该主机或路由器。一台主机号在他前面的网络号所指明的网络范围内必须唯一。</p>
<p>记为：IP 地址：：&#x3D;{&lt;网络号&gt;，&lt;主机号&gt;}</p>
<p>IP 地址共分为 5 大类：</p>
<p><img src="/../img/NetWork/image-20220303131926640.png" class="lazyload placeholder" data-srcset="/../img/NetWork/image-20220303131926640.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220303131926640"></p>
<p>为了提高可读性，常把 32 位 IP 地址中的每 8 位插入一个空格，采用点分十进制记法。</p>
<h6 id="子网的划分"><a href="#子网的划分" class="headerlink" title="子网的划分"></a>子网的划分</h6><p>详情见第 135 页</p>
<p>IP 地址：：&#x3D;{&lt;网络号&gt;,&lt;子网号&gt;,&lt;主机号&gt;}</p>
<hr>
<p>子网掩码</p>
<p>使用子网掩码和 IP 地址进行与运算就可以得出网络地址</p>
<p><img src="/../img/NetWork/image-20220303141047407.png" class="lazyload placeholder" data-srcset="/../img/NetWork/image-20220303141047407.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220303141047407"></p>
<hr>
<p>使用子网时的分组转发</p>
<p>路由表必须包括：目的网络地址、子网掩码、下一跳地址</p>
<h6 id="构造超网（CIDR）"><a href="#构造超网（CIDR）" class="headerlink" title="构造超网（CIDR）"></a>构造超网（CIDR）</h6><p>IP 地址：：&#x3D;{&lt;网络前缀&gt;,&lt;主机号&gt;}</p>
<p>具体见书第 142 页</p>
<h5 id="常用的三种类别的-IP-地址"><a href="#常用的三种类别的-IP-地址" class="headerlink" title="常用的三种类别的 IP 地址"></a>常用的三种类别的 IP 地址</h5><h6 id="A-类"><a href="#A-类" class="headerlink" title="A 类"></a>A 类</h6><p>A 类地址网络号只有 7 位可用。可以指派 2^7-2 个网络号，第一，IP 地址全 0 的是保留地址表示本网络，第二，网络号位 127 的保留作为本地软件的环回测试。A 类地址主机号占 3 个字节，A 类网络的最大主机数位 2^24-2，第一，全 0 的主机号字段表示 IP 地址是本主机所连接到的单个网络地址，第二，全 1 的表示网络上的所有主机。</p>
<h6 id="B-类"><a href="#B-类" class="headerlink" title="B 类"></a>B 类</h6><p>B 类地址网络只有 14 位可用，因为 B 类地址不可能出现全 0 或全 1 的情况，所以网络号不存在少 2 的情况，实际上 128.0.0.0 是不指派的，所以可以指派的网络数为 2^14-1，即 16383 个；而 B 类最大主机数为 2^16-2 个，需要除去全 0 和全 1 的。B 类地址占整个 IP 空间的 25%。</p>
<h6 id="C-类"><a href="#C-类" class="headerlink" title="C 类"></a>C 类</h6><p>C 类地址有 3 个字节的网络号字段，除去前面的类别位，还有 21 位可用，C 类网络地址 192.0.0.0 也不指派，可以指派的最小网络地址为 192.0.1.0，因此 C 类地址可指派的网络总数是 2^21-1，每一个 C 类地址的最大主机数为 2^8-2，占整个 IP 地址的 12.5%。</p>
<p><img src="/../img/NetWork/image-20220303133601236.png" class="lazyload placeholder" data-srcset="/../img/NetWork/image-20220303133601236.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220303133601236"></p>
<h5 id="IP-地址的重要特点"><a href="#IP-地址的重要特点" class="headerlink" title="IP 地址的重要特点"></a>IP 地址的重要特点</h5><ol>
<li>每个 IP 地址都由网络号和主机号组成。IP 地址是一种分等级的地址结构。分等级后，第一，IP 地址管理机构在分配 IP 地址时只分配网络号，而剩下的主机号则由得到该网络号的单位自行分配。第二，路由器仅仅根据目的主机所连接的网络号来转发分组，可以使路由表的项目数大幅度减少，从而减少了路由表所占的内存以及查找路由表所需要的时间。</li>
<li>实际上 IP 地址时标志一台主机和一条链路的接口。</li>
<li>用转发器或网桥连接起来的若干局域网仍然为一个网络。</li>
<li>IP 地址内所分配得到的地址都是平等的。</li>
</ol>
<h5 id="IP-数据报格式"><a href="#IP-数据报格式" class="headerlink" title="IP 数据报格式"></a>IP 数据报格式</h5><p>IP 数据报格式能够说明 IP 协议具有什么功能</p>
<p><img src="/../img/NetWork/image-20220303135845208.png" class="lazyload placeholder" data-srcset="/../img/NetWork/image-20220303135845208.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220303135845208"></p>
<h6 id="IP-数据报具体部分"><a href="#IP-数据报具体部分" class="headerlink" title="IP 数据报具体部分"></a>IP 数据报具体部分</h6><p><strong>见书籍 128 页</strong></p>
<h4 id="地址解析协议-ARP"><a href="#地址解析协议-ARP" class="headerlink" title="地址解析协议 ARP"></a>地址解析协议 ARP</h4><h5 id="IP-地址与硬件地址"><a href="#IP-地址与硬件地址" class="headerlink" title="IP 地址与硬件地址"></a>IP 地址与硬件地址</h5><p>从层次角度看，物理地址是数据链路层和物理层使用的地址，而 IP 地址是指网络层和以上各层使用的地址，是一种逻辑地址。</p>
<h5 id="ARP-协议的概念及原理"><a href="#ARP-协议的概念及原理" class="headerlink" title="ARP 协议的概念及原理"></a>ARP 协议的概念及原理</h5><p>地址解析协议 ARP 就是用来解决同一个局域网上，知道一个机器的 IP 地址，找到其对应的 MAC 地址。</p>
<p>具体实现原理：每一台主机都设有一个 ARP 高速缓存，里面有本局域网上的各个主机和路由器的 IP 地址到硬件地址的映射表。</p>
<h4 id="网际控制报文协议-ICMP"><a href="#网际控制报文协议-ICMP" class="headerlink" title="网际控制报文协议 ICMP"></a>网际控制报文协议 ICMP</h4><p>为了更有效的转发 IP 数据报和提高交付成功的机会，在网际层使用了网际控制报文协议 ICMP。ICMP 允许主机或路由器报告差错情况和提供有关异常的情况。</p>
<h5 id="ICMP-报文种类"><a href="#ICMP-报文种类" class="headerlink" title="ICMP 报文种类"></a>ICMP 报文种类</h5><h6 id="ICMP-差错报告报文"><a href="#ICMP-差错报告报文" class="headerlink" title="ICMP 差错报告报文"></a>ICMP 差错报告报文</h6><ol>
<li>终点不可达</li>
<li>超时</li>
<li>参数问题</li>
<li>改变路由（重定向）</li>
</ol>
<h6 id="ICMP-询问报文"><a href="#ICMP-询问报文" class="headerlink" title="ICMP 询问报文"></a>ICMP 询问报文</h6><ol>
<li>回送请求和回答</li>
<li>时间戳请求和回答</li>
</ol>
<p>重要应用就是 PING，用来测试两台主机的连通性。</p>
<h2 id="网际组管理协议-IGMP"><a href="#网际组管理协议-IGMP" class="headerlink" title="网际组管理协议 IGMP"></a>网际组管理协议 IGMP</h2>]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs</title>
    <url>/2022/06/20/Nodejs/</url>
    <content><![CDATA[<h1 id="Nodejs学习"><a href="#Nodejs学习" class="headerlink" title="Nodejs学习"></a>Nodejs学习</h1><h2 id="Node简介"><a href="#Node简介" class="headerlink" title="Node简介"></a>Node简介</h2><blockquote>
<p>Nodejs是一个建立在Chrome的Javascript的V8引擎上的一个Javascript运行时环境。简单的说Nodejs就是运行在服务端的Javascript。其具有1）异步IO，2）事件与回调函数，3）单线程，4）跨平台的特点。</p>
</blockquote>
<h3 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/url'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'Node.js'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'收到响应'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'发出Ajax结束 '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>收到ֽ响应是在发出Ajax结束之后输出的。在使用$.post()后，后续代码是立即被执行的，而收到ֽ响应的执行时间是不被预期的。我们只知道它将在这个异步请求结束后执行但是并不知道具体的时间点。  </p>
<h3 id="事件与回调"><a href="#事件与回调" class="headerlink" title="事件与回调"></a>事件与回调</h3><p>Node创建一个Web服务器，并监听8080端口。对于服务器，绑定了request事件，对于请求对象，我们绑定了on和end事件。  </p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> querystring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> postData <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">trunk</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    	postData <span class="token operator">+=</span> trunk<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    	res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器启完成'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token string-property property">'url'</span><span class="token operator">:</span> <span class="token string">'/url'</span><span class="token punctuation">,</span>
    <span class="token string-property property">'method'</span><span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>
    <span class="token string-property property">'data'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token string-property property">'success'</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    	<span class="token comment">// success事件</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h3><p>Node保持了JavaScript在浏览器中单线程的特点。而且在Node中，JavaScript与其余线程是无法共享任何状态的。单线程的最大好处是不用像多线程编程那样处处在意状态的同步问题,这里没有死锁的存在，也没有线程上下文交换所带来的性能上的开销。</p>
<h3 id="跨平台"><a href="#跨平台" class="headerlink" title="跨平台"></a>跨平台</h3><p>兼容Windows和*nix平台主要得益于Node在架构层面的改动,它在操作系统与Node上层模块系统之间构建了一层平台层架构,即libuv。目前, libuv已经成为许多系统实现跨平台的基础组件。</p>
<h3 id="Node应用场景"><a href="#Node应用场景" class="headerlink" title="Node应用场景"></a>Node应用场景</h3><ol>
<li>I&#x2F;O密集型</li>
<li>是否不擅长I&#x2F;O密集型业务</li>
<li>分布式应用</li>
</ol>
<span id="more"></span>

<h2 id="模块机制"><a href="#模块机制" class="headerlink" title="模块机制"></a>模块机制</h2><h3 id="CommonJS规范"><a href="#CommonJS规范" class="headerlink" title="CommonJS规范"></a>CommonJS规范</h3><blockquote>
<p>CommonJS的提出是希望JS能够在任何地方运行。</p>
</blockquote>
<p>CommonJS中涵盖了模块、二进制、Buffer、字符集编码、IO流、进程环境、文件系统、套接字、单元测试、Web服务网关接口、包管理等。</p>
<h4 id="CommonJS模块规范"><a href="#CommonJS模块规范" class="headerlink" title="CommonJS模块规范"></a>CommonJS模块规范</h4><ol>
<li><p>模块引用</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> math<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'math'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>模块定义</p>
<p>在模块中，上下文使用require()方法来引入外部模块。对应于引入，exports对象用于导出当前模块的方法或者变量。在模块中还存在一个module对象，他代表模块自身，而exports是module的属性。在Node中，一个文件就是一个模块。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//math.js</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    args <span class="token operator">=</span> arguments<span class="token punctuation">,</span>
    l <span class="token operator">=</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> l<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        sum <span class="token operator">+=</span> args<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在另一个文件中，我们通过require()引入模块后，就能使用定义的属性和方法了。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// program.js</span>
<span class="token keyword">var</span> math <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'math'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>模块标识</p>
<p>模块标识就是传递给require()的参数，必须是小驼峰命名的字符串、相对路径或者绝对路径，可以不含后缀js。</p>
</li>
</ol>
<h2 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h2><h2 id="内存控制和理解Buffer"><a href="#内存控制和理解Buffer" class="headerlink" title="内存控制和理解Buffer"></a>内存控制和理解Buffer</h2><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h2 id="构建web"><a href="#构建web" class="headerlink" title="构建web"></a>构建web</h2><h2 id="实现进程"><a href="#实现进程" class="headerlink" title="实现进程"></a>实现进程</h2><h2 id="测试与产品化"><a href="#测试与产品化" class="headerlink" title="测试与产品化"></a>测试与产品化</h2>]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql</title>
    <url>/2023/03/16/MySql/</url>
    <content><![CDATA[<h1 id="MySql学习"><a href="#MySql学习" class="headerlink" title="MySql学习"></a>MySql学习</h1><blockquote>
<p>记录学习Mysql的过程</p>
</blockquote>
<span id="more"></span>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx</title>
    <url>/2023/04/09/Nginx/</url>
    <content><![CDATA[<h1 id="Nginx学习"><a href="#Nginx学习" class="headerlink" title="Nginx学习"></a>Nginx学习</h1><blockquote>
<p>本次主要是基于LinuxMint操作系统进行操作。LinuxMint操作系统类似于Ubuntu系统。</p>
</blockquote>
<h2 id="Nginx下载安装"><a href="#Nginx下载安装" class="headerlink" title="Nginx下载安装"></a>Nginx下载安装</h2><p>首先去官网下载<a href="https://nginx.org/download/nginx-1.22.1.tar.gz">nginx</a>安装包,这里我选择的是nginx1.22.1版本。</p>
<p>然后安装好相关依赖:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装pcre库</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libpcre3 libpcre3-dev -y
<span class="token comment"># 安装zlib库</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> zlib1g-dev -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 解压nginx压缩包</span>
<span class="token function">tar</span> -zxvf nginx-1.22.1.tar.gz
<span class="token comment"># 对nginx压缩包重命名</span>
<span class="token function">mv</span> nginx-1.22.1 nginx
<span class="token builtin class-name">cd</span> nginx
<span class="token comment"># 安装nginx</span>
./configure --prefix<span class="token operator">=</span>/usr/local/nginx
<span class="token function">make</span>
<span class="token function">make</span> <span class="token function">install</span>
<span class="token comment"># 进入安装的目录</span>
<span class="token builtin class-name">cd</span> /usr/local/nginx
<span class="token comment"># 启动nginx</span>
<span class="token function">sudo</span> ./nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 编写服务脚本</span>
<span class="token function">vim</span> /usr/lib/systemd/system/nginx.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt"># 内容如下
[Unit]                                                                                                                        
Description=nginx - web server
After=betwork.target remote-fs.target nss-lookup.target 
[Service]
Type=forking
PIDFile=/usr/local/nginx/logs/nginx.pid
ExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf
ExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf
ExecReload=/usr/local/nginx/sbin/nginx -s reload
ExecStop=/usr/local/nginx/sbin/nginx -s stop
ExecQuit=/usr/local/nginx/sbin/nginx -s quit
PrivateTmp=true 
[Install]
WantedBy=multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 重启服务</span>
systemctl daemon-reload
<span class="token comment"># 查看以及启动的nginx进程</span>
<span class="token function">ps</span> -ef <span class="token operator">|</span><span class="token function">grep</span> nginx
<span class="token comment"># 终止nginx进程</span>
<span class="token function">sudo</span> <span class="token function">kill</span> -9 nginx的进程号
<span class="token comment"># 启动nginx进程</span>
systemctl start nginx.service
<span class="token comment"># 设置开机自启动</span>
systemctl <span class="token builtin class-name">enable</span> nginx.service
<span class="token comment"># 查看nginx的状态</span>
systemctl status nginx.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Nginx响应流程"><a href="#Nginx响应流程" class="headerlink" title="Nginx响应流程"></a>Nginx响应流程</h2><p><img src="/../img/Nginx/Nginx%E5%93%8D%E5%BA%94%E5%9B%BE.png" class="lazyload placeholder" data-srcset="/../img/Nginx/Nginx%E5%93%8D%E5%BA%94%E5%9B%BE.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="nginx响应流程图"></p>
<h2 id="ServerName的匹配规则"><a href="#ServerName的匹配规则" class="headerlink" title="ServerName的匹配规则"></a>ServerName的匹配规则</h2><ol>
<li>完整匹配</li>
<li>通配符匹配</li>
<li>正则匹配</li>
</ol>
<h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p><img src="/../img/Nginx/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86.png" class="lazyload placeholder" data-srcset="/../img/Nginx/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="nginx反向代理"></p>
<p>可以通过proxy_pass反向代理到公网</p>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>使用upstream和proxy_pass实现负载均衡（默认情况是使用轮询，缺点是:无法保持会话）,nginx的配置文件如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#user  nobody;</span>
<span class="token comment"># 工作的进程的个数</span>
worker_processes  <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">#error_log  logs/error.log;</span>
<span class="token comment">#error_log  logs/error.log  notice;</span>
<span class="token comment">#error_log  logs/error.log  info;</span>
<span class="token comment">#pid        logs/nginx.pid;</span>
<span class="token comment"># 事件驱动模块</span>
events <span class="token punctuation">&#123;</span>
    <span class="token comment"># worker可以创建多少连接</span>
    worker_connections  <span class="token number">1024</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment"># http模块</span>
http <span class="token punctuation">&#123;</span>
    <span class="token comment"># 引入请求头文件</span>
    include       mime.types<span class="token punctuation">;</span>
    default_type  application/octet-stream<span class="token punctuation">;</span>
    <span class="token comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span>
    <span class="token comment">#                  '$status $body_bytes_sent "$http_referer" '</span>
    <span class="token comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span>
    <span class="token comment">#access_log  logs/access.log  main;</span>
    sendfile        on<span class="token punctuation">;</span>
    <span class="token comment">#tcp_nopush     on;</span>
    <span class="token comment">#keepalive_timeout  0;</span>
    keepalive_timeout  <span class="token number">65</span><span class="token punctuation">;</span>
    <span class="token comment">#gzip  on;</span>
    <span class="token comment">#与server同级</span>
    upstream tomcat<span class="token punctuation">&#123;</span>
        server <span class="token number">192.168</span>.56.109:8080<span class="token punctuation">;</span>
        server <span class="token number">192.168</span>.56.109:8081<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    server <span class="token punctuation">&#123;</span>
        listen       <span class="token number">80</span><span class="token punctuation">;</span>
        server_name  localhost<span class="token punctuation">;</span>
        <span class="token comment">#charset koi8-r;</span>
        <span class="token comment">#access_log  logs/host.access.log  main;</span>
        location / <span class="token punctuation">&#123;</span>
        	<span class="token comment"># 配置负载均衡</span>
            proxy_pass http://tomcat<span class="token punctuation">;</span>
            <span class="token comment">#root   html;</span>
            <span class="token comment">#index  index.html index.htm;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">#error_page  404              /404.html;</span>
        <span class="token comment"># redirect server error pages to the static page /50x.html</span>
        <span class="token comment">#</span>
        error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html<span class="token punctuation">;</span>
        location <span class="token operator">=</span> /50x.html <span class="token punctuation">&#123;</span>
            root   html<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span>
        <span class="token comment">#</span>
        <span class="token comment">#location ~ \.php$ &#123;</span>
        <span class="token comment">#    proxy_pass   http://127.0.0.1;</span>
        <span class="token comment">#&#125;</span>
        <span class="token comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span>
        <span class="token comment">#</span>
        <span class="token comment">#location ~ \.php$ &#123;</span>
        <span class="token comment">#    root           html;</span>
        <span class="token comment">#    fastcgi_pass   127.0.0.1:9000;</span>
        <span class="token comment">#    fastcgi_index  index.php;</span>
        <span class="token comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span>
        <span class="token comment">#    include        fastcgi_params;</span>
        <span class="token comment">#&#125;</span>
        <span class="token comment"># deny access to .htaccess files, if Apache's document root</span>
        <span class="token comment"># concurs with nginx's one</span>
        <span class="token comment">#</span>
        <span class="token comment">#location ~ /\.ht &#123;</span>
        <span class="token comment">#    deny  all;</span>
        <span class="token comment">#&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment"># another virtual host using mix of IP-, name-, and port-based configuration</span>
    <span class="token comment">#</span>
    <span class="token comment">#server &#123;</span>
    <span class="token comment">#    listen       8000;</span>
    <span class="token comment">#    listen       somename:8080;</span>
    <span class="token comment">#    server_name  somename  alias  another.alias;</span>
    <span class="token comment">#    location / &#123;</span>
    <span class="token comment">#        root   html;</span>
    <span class="token comment">#        index  index.html index.htm;</span>
    <span class="token comment">#    &#125;</span>
    <span class="token comment">#&#125;</span>
    <span class="token comment"># HTTPS server</span>
    <span class="token comment">#</span>
    <span class="token comment">#server &#123;</span>
    <span class="token comment">#    listen       443 ssl;</span>
    <span class="token comment">#    server_name  localhost;</span>
    <span class="token comment">#    ssl_certificate      cert.pem;</span>
    <span class="token comment">#    ssl_certificate_key  cert.key;</span>
    <span class="token comment">#    ssl_session_cache    shared:SSL:1m;</span>
    <span class="token comment">#    ssl_session_timeout  5m;</span>
    <span class="token comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span>
    <span class="token comment">#    ssl_prefer_server_ciphers  on;</span>
    <span class="token comment">#    location / &#123;</span>
    <span class="token comment">#        root   html;</span>
    <span class="token comment">#        index  index.html index.htm;</span>
    <span class="token comment">#    &#125;</span>
    <span class="token comment">#&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以通过在upstream模块中配置每台服务器的权重（值越大表示，权重越高）：<br>也可以使用down进行停用，使用backup进行备用。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">upstream tomcat<span class="token punctuation">&#123;</span>
        server <span class="token number">192.168</span>.56.109:8080 <span class="token assign-left variable">weight</span><span class="token operator">=</span><span class="token number">8</span> down<span class="token punctuation">;</span>
        server <span class="token number">192.168</span>.56.109:8081 <span class="token assign-left variable">weight</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
        server <span class="token number">192.168</span>.56.109:8083 <span class="token assign-left variable">weight</span><span class="token operator">=</span><span class="token number">1</span> backup<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其他负载均衡方式：（url_hash和fair需要第三方插件）</p>
<ol>
<li>ip_hash:根据客户端的ip地址转发同一服务器，可以保持会话。</li>
<li>least_conn:最少连接数访问。</li>
<li>url_hash:根据url进行定向转发。</li>
<li>fair:根据后端服务器的响应时间进行转发。</li>
</ol>
<h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><p>直接使用location进行配置即可。</p>
<h3 id="URLRewrite伪静态"><a href="#URLRewrite伪静态" class="headerlink" title="URLRewrite伪静态"></a>URLRewrite伪静态</h3><blockquote>
<p>可以隐藏url参数</p>
</blockquote>
<ol>
<li>last:继续向下匹配</li>
<li>break：不在继续匹配</li>
<li>redirect：302临时重定向</li>
<li>permanet：301永久重定向<br>在location中配置，如：<code>rewrite ^/([0-9]+).html$ /index.jsp?pageNum=$1 break</code></li>
</ol>
<h3 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h3><blockquote>
<p>配置在location下面</p>
</blockquote>
<ol>
<li>none:检测Referer头不存在的情况。</li>
<li>blocked: 检测Referer头的值被防火墙或者代理服务器删除或伪装的情况。</li>
<li>server_names:设置一个或多个URL,检测Referer头是否是URL中的一个。</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">location ~*/<span class="token punctuation">(</span>js<span class="token operator">|</span>img<span class="token operator">|</span>css<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	valid_refers <span class="token number">192.168</span>.56.109<span class="token punctuation">;</span>
	if<span class="token punctuation">(</span><span class="token variable">$valid_refers</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token builtin class-name">return</span> <span class="token number">403</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	root html<span class="token punctuation">;</span>
	index index.html index.htm<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="安装keepalived实现高可用"><a href="#安装keepalived实现高可用" class="headerlink" title="安装keepalived实现高可用"></a>安装keepalived实现高可用</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> keepalived -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机操作系统</title>
    <url>/2022/06/21/OperateSystem/</url>
    <content><![CDATA[<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><blockquote>
<p>本文为学习操作系统的基础</p>
</blockquote>
<h2 id="第一章-操作系统概述"><a href="#第一章-操作系统概述" class="headerlink" title="第一章 操作系统概述"></a>第一章 操作系统概述</h2><blockquote>
<p>操作系统：指控制和管理整个计算机系统的硬件及软件资源，并合理的组织调度计算机的工作和资源的分配，以供给用户和其他软件方便的接口和环境，是计算机中最基本的系统软件。</p>
</blockquote>
<span id="more"></span>
<h3 id="操作系统的功能"><a href="#操作系统的功能" class="headerlink" title="操作系统的功能"></a>操作系统的功能</h3><ol>
<li>系统资源的管理者</li>
<li>向上层提供方便易用的服务</li>
<li>最为最接近硬件的层次</li>
</ol>
<h3 id="操作系统的特征"><a href="#操作系统的特征" class="headerlink" title="操作系统的特征"></a>操作系统的特征</h3><ol>
<li>并发：指两个或多个事件同一时间发生。在宏观上同时发生，微观上交替发生。<code>并发性指计算机&quot;同时运行&quot;着多个程序。</code>单核 CPU 同一时刻只能运行一个程序，各个程序只能并发执行。多核 CPU 同一时刻可以运行多个程序，各个程序可以并行运行。</li>
<li>共享：<code>指系统中的资源可以供多个并发执行的进程共同使用。</code>互斥共享，一个资源只能一个进程访问；同时共享允许一个时间段内有多个进程“同时”对他们进行访问。</li>
<li>虚拟：是指把一个物理上的实体变为若干个逻辑上的对应物。</li>
<li>异步：在多个程序环境下，允许多个程序并发执行，但由于资源有限，进程不是一贯到底的。</li>
</ol>
<h3 id="操作系统的发展和分类"><a href="#操作系统的发展和分类" class="headerlink" title="操作系统的发展和分类"></a>操作系统的发展和分类</h3><ol>
<li>手工操作阶段：使用纸带输入计算机，计算机输出到纸带上。效率极低。</li>
<li>单道批处理系统：引入脱机输入输出技术，并由监督程序负责控制输入输出。CPU 仍然大量在空闲等待，资源利用率低。</li>
<li>多道批处理系统：操作系统的诞生，每次往系统读入多道程序。</li>
<li>分时操作系统：计算机以时间片为单位轮流为各个用户服务。解决了人机交互的问题。</li>
<li>实时操作系统：计算机系统接收到外部信号后能及时处理，并在严格的时限内处理完事件。</li>
</ol>
<h3 id="操作系统的运行机制"><a href="#操作系统的运行机制" class="headerlink" title="操作系统的运行机制"></a>操作系统的运行机制</h3><p><code>指令就是CPU能识别、执行的最基本的命令。</code></p>
<p>两种指令</p>
<ol>
<li>特权指令：操作系统内核作为管理者，会让 CPU 执行一些特权指令。处于内核态的时候，可以执行特权指令。</li>
<li>非特权指令：处于用户态时，只能执行非特权指令。</li>
</ol>
<p>两种处理器状态</p>
<ol>
<li>核心态</li>
<li>用户态</li>
</ol>
<p>两种程序</p>
<ol>
<li>内核程序：和操作系统相关的程序，内核是操作系统最核心的部分。</li>
<li>应用程序：普通程序员写的程序</li>
</ol>
<h3 id="中断和异常"><a href="#中断和异常" class="headerlink" title="中断和异常"></a>中断和异常</h3><p><code>中断是操作系统内核夺回CPU使用权的唯一途径</code></p>
<p>中断的类型</p>
<ol>
<li>内中断：与当前执行的指令有关，中断信号来源于 CPU 内部。</li>
<li>外中断：与当前执行的指令无关，中断信号来源于 CPU 外部。</li>
</ol>
<h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><p>系统调用指操作系统提供给应用程序的接口。</p>
<p>系统调用的分类：</p>
<ol>
<li>设备管理：完成设备的启动、释放等功能</li>
<li>文件管理：完成文件的读写等功能</li>
<li>进程控制：完成进程的创建、销毁等功能</li>
<li>进程管理：完成进程之间的消息传递等功能</li>
<li>内存管理：完成内存的分配、回收等功能</li>
</ol>
<h2 id="第二章-进程管理"><a href="#第二章-进程管理" class="headerlink" title="第二章 进程管理"></a>第二章 进程管理</h2><p>程序：是静态的，就是存放在磁盘里的可执行文件，就是一系列指令的集合</p>
<p>进程：是动态的，是程序的一次执行过程。当进程被创建时操作系统会为该进程分配一个唯一的、不重复的“身份证号”-PID</p>
<p>组成：PCB(进程控制块)是进程存在的唯一标志、程序段、数据段</p>
<p>特征：动态性、并发性、独立性、异步性和结构性</p>
<h3 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h3><blockquote>
<p>进程 PCB 中，会有一个变量 state 记录进程的状态</p>
</blockquote>
<h4 id="创建态、就绪态"><a href="#创建态、就绪态" class="headerlink" title="创建态、就绪态"></a>创建态、就绪态</h4><p>进程在创建时，它的状态是创建态，在这个阶段操作系统会为进程分配资源、初始化 PCB。</p>
<p>当进程创建完成后，就会进入就绪态，处于就绪态的进程已经具备了运行的条件，但是没有空闲的 CPU，暂时不能运行。</p>
<h4 id="运行态"><a href="#运行态" class="headerlink" title="运行态"></a>运行态</h4><p>如果一个进程此时在 CPU 上运行，那么他就处于运行态，CPU 会执行该进程的指令序列</p>
<h4 id="阻塞态"><a href="#阻塞态" class="headerlink" title="阻塞态"></a>阻塞态</h4><p>在进程运行期间可能会请求等待某个事件的发生。在这个事件发生前，进程无法向下执行，此时操作系统会让这个进程下 CPU，进入阻塞态。当 CPU 空闲时，又会选择另一个就绪态上 CPU。</p>
<h4 id="终止态"><a href="#终止态" class="headerlink" title="终止态"></a>终止态</h4><p>一个进程可以执行 exit 系统调用，请求操作系统终止该进程。该进程会进入终止态，操作系统会让该进程下 CPU，并回收内存空间等资源，还要回收 PCB。进程工作结束，彻底消失。</p>
<p><code>一个进程不可能从就绪态-&gt;阻塞态；也不可能从阻塞态-&gt;运行态</code></p>
<h3 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h3><p>主要功能：对系统所有的进程实现有效的管理，具有创建新进程、撤销已有进程和实现进程状态转换。<br>原语：是一种特殊程序，它的执行具有原子性，不能被中断。可以用关中断（不在例行检查是否有中断）和开中断来实现原子性</p>
<h4 id="进程创建"><a href="#进程创建" class="headerlink" title="进程创建"></a>进程创建</h4><p>创建原语</p>
<ol>
<li>申请 PCB</li>
<li>为新进程分配资源</li>
<li>初始化 PCB</li>
<li>将 PCB 插入就绪队列</li>
</ol>
<p>引起进程创建的事件</p>
<ol start="5">
<li>用户登录</li>
<li>作业调度</li>
<li>提供服务</li>
<li>应用请求</li>
</ol>
<h4 id="进程终止"><a href="#进程终止" class="headerlink" title="进程终止"></a>进程终止</h4><p>撤销原语</p>
<ol>
<li>从 PCB 集合找到终止进程的 PCB</li>
<li>进程正在运行，则剥夺其 CPU，将 CPU 分配给其他进程</li>
<li>终止其所有子进程</li>
<li>将该进程拥有的资源归还给父进程或者操作系统</li>
<li>删除 PCB</li>
</ol>
<p>引起进程终止的事件</p>
<ol>
<li>正常结束</li>
<li>异常结束</li>
<li>外界干预</li>
</ol>
<h4 id="进程阻塞"><a href="#进程阻塞" class="headerlink" title="进程阻塞"></a>进程阻塞</h4><p>阻塞原语</p>
<ol>
<li>找到要阻塞的 PCB</li>
<li>保护进程的运行现场，将 PCB 设置为阻塞态，暂停进程的运行</li>
<li>将 PCB 插入相应事件的等待队列</li>
</ol>
<p>引起进程阻塞的事件</p>
<ol>
<li>需要等待系统分配某种资源</li>
<li>需要等待相互合作的其他进程完成工作</li>
</ol>
<h4 id="进程唤醒"><a href="#进程唤醒" class="headerlink" title="进程唤醒"></a>进程唤醒</h4><p>唤醒原语</p>
<ol>
<li>在事件等待队列中找到 PCB</li>
<li>将 PCB 从等待队列移除，设置状态为就绪态</li>
<li>将 PCB 插入就绪队列，等待被调度</li>
</ol>
<p>引起进程唤醒的事件</p>
<ol>
<li>等待事件的发生</li>
</ol>
<h4 id="进程的切换"><a href="#进程的切换" class="headerlink" title="进程的切换"></a>进程的切换</h4><p>切换原语</p>
<ol>
<li>将运行环境的信息存入 PCB 中</li>
<li>PCB 移入相应队列</li>
<li>选择另一个进程执行，并更新其 PCB</li>
<li>根据 PCB 恢复新进程所需运行环境</li>
</ol>
<p>引起进程切换的事件</p>
<ol>
<li>当进程时间片到了</li>
<li>有更高优先级的进程到达</li>
<li>当前进程阻塞</li>
<li>当前进程终止</li>
</ol>
<h3 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h3><p>定义：指两个进程之间的数据交互<br>共享存储：因为各进程间的内存地址是相互独立的<br>消息传递：进程之间的数据交互以格式化的消息为单位。进程通过操作系统提供的“发生消息&#x2F;接收消息”两个原语进行交换。</p>
<ol>
<li>直接通信方式</li>
<li>间接通信方式</li>
</ol>
<p>管道通信</p>
<h3 id="线程的概念"><a href="#线程的概念" class="headerlink" title="线程的概念"></a>线程的概念</h3><p>线程是程序执行的最小单位，是一个基本的 CPU 单元。简单来说就是，轻量级进程。<br>线程的实现方式</p>
<ul>
<li>用户级线程</li>
<li>内核级线程</li>
</ul>
<p>多线程模型</p>
<ul>
<li>一对一：一个用户级线程映射一个内核级线程</li>
<li>多对一：多个 y 用户级线程映射到一个内核级线程</li>
<li>多对多：n 个用户级线程映射到 m 个内核级线程</li>
</ul>
<h3 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h3><p>概念：确定某种规则来决定处理这些任务的顺序。</p>
<h4 id="进程调度的时机"><a href="#进程调度的时机" class="headerlink" title="进程调度的时机"></a>进程调度的时机</h4><ol>
<li><p>当前运行的进程主动放弃处理机</p>
<ul>
<li><p>进程正常终止</p>
</li>
<li><p>运行过程中发生异常而终止</p>
</li>
<li><p>进程主动请求阻塞</p>
</li>
</ul>
</li>
<li><p>当前运行的进程被动的放弃处理机</p>
<ul>
<li><p>分配的时间片用完</p>
</li>
<li><p>有更紧急的任务需要处理</p>
</li>
<li><p>有更高优先级的进程进入就绪队列</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Postgresql</title>
    <url>/2023/04/19/Postgresql/</url>
    <content><![CDATA[<h1 id="Postgresql源码阅读"><a href="#Postgresql源码阅读" class="headerlink" title="Postgresql源码阅读"></a>Postgresql源码阅读</h1><blockquote>
<p>记录学习Postgresql源码的过程</p>
</blockquote>
<h2 id="Postgresql编译安装"><a href="#Postgresql编译安装" class="headerlink" title="Postgresql编译安装"></a>Postgresql编译安装</h2><p>Windows系统下:</p>
<p>首先进入Postgresql的官网下载相应版本的<a href="https://www.postgresql.org/ftp/source/">源码</a></p>
<p>Linux系统下:</p>
<ol>
<li>通过<code>wget https://ftp.postgresql.org/pub/source/v15.2/postgresql-15.2.tar.gz</code> 下载postgresql的源码。</li>
<li>解压下载好的源码文件<code>tar -zxvf postgresql-15.2.tar.gz</code></li>
<li>重命名postgresql<code>mv  postgresql-15.2 postgresql15</code></li>
<li>进行configure生成makefile文件*.&#x2F;configure –prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;psql –enable-debug –enable-thread-safety –enable-cassert CFLAGS&#x3D;’-O0’*</li>
<li>安装所需要的依赖库<code>sudo apt install libreadline-dev</code></li>
<li>然后进行<code>sudo make -j2&amp;&amp;sudo make install -j2</code><span id="more"></span></li>
</ol>
<h2 id="运行postgresql"><a href="#运行postgresql" class="headerlink" title="运行postgresql"></a>运行postgresql</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/psql/
<span class="token function">sudo</span> adduser pg
<span class="token function">mkdir</span> data
<span class="token function">chown</span> pg:pg data
<span class="token function">su</span> - pg
./bin/initdb -D data/
./bin/pg_ctl -D data start
./bin/createdb <span class="token builtin class-name">test</span>
./bin/psql <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习之路：Pytorch</title>
    <url>/2022/07/08/Pytorch/</url>
    <content><![CDATA[<h1 id="深度学习之路：Python配置Pytorch"><a href="#深度学习之路：Python配置Pytorch" class="headerlink" title="深度学习之路：Python配置Pytorch"></a>深度学习之路：Python配置Pytorch</h1><blockquote>
<p>本文为Python配置Pytorch库，利用Anaconda包管理工具</p>
</blockquote>
<h2 id="查看电脑显卡配置"><a href="#查看电脑显卡配置" class="headerlink" title="查看电脑显卡配置"></a>查看电脑显卡配置</h2><p>打开电脑的设备管理器查看显示适配器配置，如果有NVIDIA则可以采用GPU方式，我的电脑没有NVIDIA所以不支持GPU，所以后面只能采用CPU方式（采用CPU方式进行训练会很慢）：</p>
<p><img src="/../img/%E6%98%BE%E5%8D%A1%E9%85%8D%E7%BD%AE.png" class="lazyload placeholder" data-srcset="/../img/%E6%98%BE%E5%8D%A1%E9%85%8D%E7%BD%AE.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220708153616262"></p>
<span id="more"></span>

<h2 id="下载Anaconda"><a href="#下载Anaconda" class="headerlink" title="下载Anaconda"></a>下载Anaconda</h2><p>由于使用Pip进行Pytorch库的安装，过程中坑实在太多，根据网上的建议选用Anaconda这个也很优秀的Python第三库的包管理工具。为节省时间可以采用清华源镜像进行下载<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">Anaconda</a>选择<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-5.3.1-Windows-x86_64.exe">Anaconda3-5.3.1-Windows-x86_64.exe</a>进行下载：</p>
<p><img src="/../img/Anaconda.png" class="lazyload placeholder" data-srcset="/../img/Anaconda.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220708154359305"></p>
<p>下载完成后进行安装</p>
<h2 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h2><p><img src="/../img/Anaconda01.png" class="lazyload placeholder" data-srcset="/../img/Anaconda01.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220708162616546"></p>
<p><img src="/../img/Anaconda02.png" class="lazyload placeholder" data-srcset="/../img/Anaconda02.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220708162651353"></p>
<p><img src="/../img/Anaconda03.png" class="lazyload placeholder" data-srcset="/../img/Anaconda03.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220708162720875"></p>
<p><img src="/../img/Anaconda04.png" class="lazyload placeholder" data-srcset="/../img/Anaconda04.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220708162804641"></p>
<p><img src="/../img/Anaconda05.png" class="lazyload placeholder" data-srcset="/../img/Anaconda05.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220708162905328"></p>
<p><img src="/../img/Anaconda06.png" class="lazyload placeholder" data-srcset="/../img/Anaconda06.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220708163817016"></p>
<p><img src="/../img/Anaconda07.png" class="lazyload placeholder" data-srcset="/../img/Anaconda07.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220708163856146"></p>
<h3 id="Anaconda配置环境变量"><a href="#Anaconda配置环境变量" class="headerlink" title="Anaconda配置环境变量"></a>Anaconda配置环境变量</h3><p>将D:\Anaconda;D:\Anaconda\Scripts;D:\Anaconda\Library\bin;加入到环境变量Path中</p>
<p>打开命令行CMD输入<code>conda --version</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/../img/Anaconda08.png" class="lazyload placeholder" data-srcset="/../img/Anaconda08.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220708164520085"></p>
<h3 id="Conda虚拟环境配置"><a href="#Conda虚拟环境配置" class="headerlink" title="Conda虚拟环境配置"></a>Conda虚拟环境配置</h3><p>在后面的项目我们可能遇见不同的项目需要用到不同环境，此时可以使用虚拟环境：</p>
<p>使用conda创建一个pytorch的环境，指定Python版本为3.7</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda create -n pytorch <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.7</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/../img/Anaconda09.png" class="lazyload placeholder" data-srcset="/../img/Anaconda09.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220708164713453"></p>
<p>使用下面的命令查看当前环境，带<code>*</code>的为当前所处环境</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda info --envs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/../img/Anaconda10.png" class="lazyload placeholder" data-srcset="/../img/Anaconda10.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220708165032128"></p>
<p>先使用activate激活base环境</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">activate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>再使用<code>conda activate pytorch</code>激活pytorch这个环境</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda activate pytorch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/../img/Anaconda11.png" class="lazyload placeholder" data-srcset="/../img/Anaconda11.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220708165515210"></p>
<h2 id="安装CUDA和CUDNN（如无独显则跳过此步）"><a href="#安装CUDA和CUDNN（如无独显则跳过此步）" class="headerlink" title="安装CUDA和CUDNN（如无独显则跳过此步）"></a>安装CUDA和CUDNN（如无独显则跳过此步）</h2><blockquote>
<p>查看CUDA的<a href="https://docs.nvidia.com/cuda/cuda-installation-guide-microsoft-windows/index.html">官方文档</a></p>
<p>查看cuDNN的<a href="https://docs.nvidia.com/deeplearning/cudnn/install-guide/index.html">官方文档</a></p>
</blockquote>
<p>第一步：首先根据显卡的驱动程序版本找到对应的Cuda Toolkit</p>
<p><img src="/../img/CUDA.png" class="lazyload placeholder" data-srcset="/../img/CUDA.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220708225323574"></p>
<p><img src="/../img/CUDA-1.png" class="lazyload placeholder" data-srcset="/../img/CUDA-1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220708225427206"></p>
<p>第二步：找到对应的CUDA，在此处<a href="https://developer.nvidia.com/cuda-toolkit-archive">下载</a></p>
<p>第三步：找到对应的cuDNN,在此处<a href="https://developer.nvidia.com/rdp/cudnn-archive">下载</a></p>
<p><img src="/../img/cuDNN.png" class="lazyload placeholder" data-srcset="/../img/cuDNN.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220708231139811"></p>
<p>第四步：解压cuDNN文件，将bin,include,lib复制到CUDA目录下</p>
<p>第五步：配置CUDA的环境变量，将CUDA下的include,lib,libnvvp配置到Path路径下</p>
<p>第六步：验证是否安装成功，打开CMD，输入nvcc -V查看CUDA版本</p>
<h2 id="安装Pytorch"><a href="#安装Pytorch" class="headerlink" title="安装Pytorch"></a>安装Pytorch</h2><p>第一步：进入<a href="https://pytorch.org/">Pytorch官网</a>，点击首页Install</p>
<p><img src="/../img/Pytorch%E5%AE%98%E7%BD%91.png" class="lazyload placeholder" data-srcset="/../img/Pytorch%E5%AE%98%E7%BD%91.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220708161325258"></p>
<p>第二步：找到自己所需配置</p>
<p><img src="/../img/Pytorch%E5%AE%89%E8%A3%85.png" class="lazyload placeholder" data-srcset="/../img/Pytorch%E5%AE%89%E8%A3%85.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220708161605950"></p>
<p>即打开CMD运行下面的命令进行Pytorch(使用CUDA-10.2)的安装：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">CUDA-10.2 PyTorch builds are no longer available <span class="token keyword">for</span> Windows, please use CUDA-11.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>由于我电脑无独立显卡只有核显所以我只能选择CPU方式进行安装：</p>
<p><img src="/../img/Pytorch%E5%AE%89%E8%A3%85-my.png" class="lazyload placeholder" data-srcset="/../img/Pytorch%E5%AE%89%E8%A3%85-my.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220708161704139"></p>
<p>即打开CMD运行下面的命令进行Pytorch的安装：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> pytorch torchvision torchaudio cpuonly -c pytorch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>至此Pytorch配置完毕！！！</p>
<h2 id="Pytorch入门"><a href="#Pytorch入门" class="headerlink" title="Pytorch入门"></a>Pytorch入门</h2>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Primer</title>
    <url>/2023/02/28/PrimerCpp/</url>
    <content><![CDATA[<h1 id="PrimerCpp学习"><a href="#PrimerCpp学习" class="headerlink" title="PrimerCpp学习"></a>PrimerCpp学习</h1><blockquote>
<p>Primer C++作为C++的经典书籍，值得一读！</p>
</blockquote>
<h2 id="C-基础"><a href="#C-基础" class="headerlink" title="C++基础"></a>C++基础</h2><h3 id="变量、语句、字符串、数组"><a href="#变量、语句、字符串、数组" class="headerlink" title="变量、语句、字符串、数组"></a>变量、语句、字符串、数组</h3><h3 id="表达式和函数"><a href="#表达式和函数" class="headerlink" title="表达式和函数"></a>表达式和函数</h3><h3 id="类的初步使用"><a href="#类的初步使用" class="headerlink" title="类的初步使用"></a>类的初步使用</h3><span id="more"></span>

<h2 id="C-标准库"><a href="#C-标准库" class="headerlink" title="C++ 标准库"></a>C++ 标准库</h2><h3 id="IO库"><a href="#IO库" class="headerlink" title="IO库"></a>IO库</h3><h4 id="IO类"><a href="#IO类" class="headerlink" title="IO类"></a>IO类</h4><blockquote>
<p>IO类操作其实大同小异，学会一种就可举一反三，所有的带w开头的都表示宽字符版本</p>
</blockquote>
<ul>
<li>通常IO操作函数以引用方式传递，且传递和返回的引用不能是const</li>
</ul>
<h5 id="IO操作的条件状态"><a href="#IO操作的条件状态" class="headerlink" title="IO操作的条件状态"></a>IO操作的条件状态</h5><table>
<thead>
<tr>
<th align="left">状态</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">iostate</td>
<td>表达条件状态的完整功能</td>
</tr>
<tr>
<td align="left">badbit</td>
<td>表示流已崩溃（系统级错误，不可恢复）</td>
</tr>
<tr>
<td align="left">failbit</td>
<td>表示IO操作失败了（可恢复的错误）</td>
</tr>
<tr>
<td align="left">eofbit</td>
<td>表示流已经到达文件结束</td>
</tr>
<tr>
<td align="left">goodbit</td>
<td>表示流未处于错误状态，此值为0</td>
</tr>
<tr>
<td align="left">eof()</td>
<td>若eofbit置位，则为true</td>
</tr>
<tr>
<td align="left">fail()</td>
<td>若failbit或者badbit置位，则为true</td>
</tr>
<tr>
<td align="left">bad()</td>
<td>若badbit置位，则为true</td>
</tr>
<tr>
<td align="left">good()</td>
<td>若流有效，则为true</td>
</tr>
<tr>
<td align="left">clear()</td>
<td>将流中所有状态位复位，将流设为有效</td>
</tr>
<tr>
<td align="left">clear(flags)</td>
<td>给对应条件的状态位复位</td>
</tr>
<tr>
<td align="left">setstate(flags)</td>
<td>给对应条件的状态位复位</td>
</tr>
<tr>
<td align="left">rdstate()</td>
<td>返回流的当前状态</td>
</tr>
</tbody></table>
<h5 id="iostream"><a href="#iostream" class="headerlink" title="iostream"></a>iostream</h5><blockquote>
<p>读写流</p>
</blockquote>
<h6 id="istream、wistream"><a href="#istream、wistream" class="headerlink" title="istream、wistream"></a>istream、wistream</h6><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
&#x2F;&#x2F; 标准输入输出流
int main(int argc, char *argv[])
&#123;
	char ch;
	while(cin&gt;&gt;ch)&#123;
		cout&lt;&lt;ch;	
	&#125;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h6 id="ostream、wostream"><a href="#ostream、wostream" class="headerlink" title="ostream、wostream"></a>ostream、wostream</h6><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
int main(int argc, char *argv[])
&#123;
	cout&lt;&lt;&quot;hello world!&quot;&lt;&lt;endl;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h6 id="iostream、wiostream"><a href="#iostream、wiostream" class="headerlink" title="iostream、wiostream"></a>iostream、wiostream</h6><pre class="line-numbers language-none"><code class="language-none">#include &lt;iostream&gt;
using namespace std;
int main(int argc, char *argv[])
&#123;
	cout&lt;&lt;&quot;please enter a char:&quot;&lt;&lt;endl;
	char ch;
	cin&gt;&gt;ch;
	cout&lt;&lt;&quot;the char is:&quot;&lt;&lt;ch&lt;&lt;endl;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="fstream"><a href="#fstream" class="headerlink" title="fstream"></a>fstream</h5><blockquote>
<p>读写文件，输入输出都是以内存为中心</p>
</blockquote>
<table>
<thead>
<tr>
<th>mode</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>in</td>
<td>以读的方式打开</td>
</tr>
<tr>
<td>out</td>
<td>以写的方式打开</td>
</tr>
<tr>
<td>app</td>
<td>每次写操作前定位到文件尾，即写追加模式</td>
</tr>
<tr>
<td>ate</td>
<td>打开文件后立即定位到文件末尾</td>
</tr>
<tr>
<td>trunc</td>
<td>覆盖模式</td>
</tr>
<tr>
<td>binary</td>
<td>以二进制方式打开</td>
</tr>
</tbody></table>
<h6 id="ifstream、wifstream"><a href="#ifstream、wifstream" class="headerlink" title="ifstream、wifstream"></a>ifstream、wifstream</h6><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	string path<span class="token operator">=</span><span class="token string">"D:\\gitRep\\practice\\cpp\\primer5\\part02\\io\\fstream\\demo08\\demo08.txt"</span><span class="token punctuation">;</span>
	ifstream <span class="token function">ifs</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ifs<span class="token punctuation">.</span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		cerr<span class="token operator">&lt;&lt;</span><span class="token string">"fail to open demo08.txt!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>ifs<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">char</span> ch<span class="token punctuation">;</span>
		ifs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
		cout<span class="token operator">&lt;&lt;</span>ch<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    ifs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>这里有一个eof()问题容易出错，容易将尾部的数据多打印一次。使用peek()函数即可解决！</code></p>
<h6 id="ofstream、wofstream"><a href="#ofstream、wofstream" class="headerlink" title="ofstream、wofstream"></a>ofstream、wofstream</h6><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;string&gt;
using namespace std;
int main(int argc, char *argv[])
&#123;
	string path&#x3D;&quot;D:\\gitRep\\practice\\cpp\\primer5\\part02\\io\\fstream\\demo09\\demo09.txt&quot;;
	ofstream ofs(path,ios_base::out|ios_base::binary);
	if(!ofs.is_open())&#123;cerr&lt;&lt;&quot;demo09.txt is not exist!&quot;&lt;&lt;endl;&#125;
	const char content[]&#x3D;&quot;hello world!&quot;;
	ofs.write(content,sizeof(content)&#x2F;sizeof(char)-1);
	ofs.close();
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>此时在写入文本文件时容易多出一个字节&#39;\0&#39;。</code></p>
<h6 id="fstream、wfstream"><a href="#fstream、wfstream" class="headerlink" title="fstream、wfstream"></a>fstream、wfstream</h6><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;string&gt;
using namespace std;
int main(int argc, char *argv[])
&#123;
	string path&#x3D;&quot;D:\\gitRep\\practice\\cpp\\primer5\\part02\\io\\fstream\\demo10\\demo10.txt&quot;;
	string path2&#x3D;&quot;D:\\gitRep\\practice\\cpp\\primer5\\part02\\io\\fstream\\demo10\\demo10_backup.txt&quot;;
	fstream fst1(path,ios::in|ios::binary);
	fstream fst2(path2,ios::out|ios::binary);
	while(fst1.peek()!&#x3D;EOF)&#123;
		char ch;
		fst1.get(ch);
		fst2.put(ch);
	&#125;
	fst1.close();
	fst2.close();
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h6 id="使用-lt-lt-和-gt-gt-简化输入与输出"><a href="#使用-lt-lt-和-gt-gt-简化输入与输出" class="headerlink" title="使用&lt;&lt;和&gt;&gt;简化输入与输出"></a>使用&lt;&lt;和&gt;&gt;简化输入与输出</h6><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;string&gt;
using namespace std;
int main(int argc, char *argv[])
&#123;
	string path&#x3D;&quot;D:\\gitRep\\practice\\cpp\\primer5\\part02\\io\\fstream\\demo11\\demo11.txt&quot;;
	fstream fst1(path,ios::out|ios::binary);
	fstream fst2(path,ios::in|ios::binary);
	fst1&lt;&lt;&quot;name&quot;&lt;&lt;endl;
	char buff[10];
	fst2&gt;&gt;buff;
	cout&lt;&lt;buff&lt;&lt;endl;
	fst1.close();
	fst2.close();
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="sstream"><a href="#sstream" class="headerlink" title="sstream"></a>sstream</h5><blockquote>
<p>读写string对象，不管是输入输出都是以string流为中心</p>
</blockquote>
<h6 id="istringstream、wistringstream"><a href="#istringstream、wistringstream" class="headerlink" title="istringstream、wistringstream"></a>istringstream、wistringstream</h6><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	string name<span class="token operator">=</span><span class="token string">"tom is a man!"</span><span class="token punctuation">;</span>
	istringstream <span class="token function">iss</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>iss<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">char</span> ch<span class="token punctuation">;</span>
		iss<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
		cout<span class="token operator">&lt;&lt;</span>ch<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h6 id="ostringstream、wostringstream"><a href="#ostringstream、wostringstream" class="headerlink" title="ostringstream、wostringstream"></a>ostringstream、wostringstream</h6><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	string name<span class="token operator">=</span><span class="token string">"hello"</span><span class="token punctuation">;</span>
	ostringstream <span class="token function">oss</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>ios<span class="token double-colon punctuation">::</span>ate<span class="token punctuation">)</span><span class="token punctuation">;</span>
	oss<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token char">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span>oss<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h6 id="stringstream、wstringstream"><a href="#stringstream、wstringstream" class="headerlink" title="stringstream、wstringstream"></a>stringstream、wstringstream</h6><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	string name<span class="token operator">=</span><span class="token string">"zhangsan"</span><span class="token punctuation">;</span>
	string name_backup<span class="token punctuation">;</span>
	<span class="token comment">//将name的值拷贝到ss流中</span>
	stringstream <span class="token function">ss</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
	ss<span class="token operator">>></span>name_backup<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span>name_backup<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="顺序容器"><a href="#顺序容器" class="headerlink" title="顺序容器"></a>顺序容器</h3><blockquote>
<p>顺序容器有很多公共的操作，但是也有些不同的函数，需要注意区分，并且有不同的使用场景</p>
</blockquote>
<table>
<thead>
<tr>
<th>容器名</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>array</td>
<td>固定大小数组。支持随机访问，不能添加或删除元素。</td>
</tr>
<tr>
<td>vector</td>
<td>可变数组。支持随机访问，在尾部之外的位置插入或删除元素很慢。</td>
</tr>
<tr>
<td>deque</td>
<td>双端队列。支持随机访问，头尾处插入删除速度快。</td>
</tr>
<tr>
<td>string</td>
<td>与vector类似，但是主要用于存储字符，随机访问快，在尾部进行插入、删除速度快。</td>
</tr>
<tr>
<td>forward_list</td>
<td>单链表。支持单向顺序访问。适合在任意位置做插入、删除操作。</td>
</tr>
<tr>
<td>list</td>
<td>双向链表。支持双向顺序访问。适合在任意位置做插入、删除操作。</td>
</tr>
</tbody></table>
<ul>
<li>总结：vector、deque和string适合在<code>尾部</code>进行插入删除操作。forward_list和list适合在任意位置进行插入删除操作。array不能进行更新操作。array、vector、deque和string都支持随机访问。</li>
</ul>
<h4 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h4><blockquote>
<p>可变数组。支持随机访问，在尾部之外的位置插入或删除元素很慢。</p>
</blockquote>
<h5 id="vector的初始化、遍历和赋值"><a href="#vector的初始化、遍历和赋值" class="headerlink" title="vector的初始化、遍历和赋值"></a>vector的初始化、遍历和赋值</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">// 1. 定义一个空容器</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> numbers<span class="token punctuation">;</span>
	<span class="token comment">// 2. 定义并初始化一个容器</span>
	vector<span class="token operator">&lt;</span>string<span class="token operator">></span> students<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token string">"wangwu"</span><span class="token punctuation">,</span><span class="token string">"zhaoqi"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	vector<span class="token operator">&lt;</span>string<span class="token operator">></span> students2<span class="token punctuation">&#123;</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token string">"wangwu"</span><span class="token punctuation">,</span><span class="token string">"zhaoqi"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token comment">//3. 使用拷贝进行初始化</span>
	vector<span class="token operator">&lt;</span>string<span class="token operator">></span> stu<span class="token operator">=</span>students<span class="token punctuation">;</span>
	vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">stu2</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//4. 指定容器大小并进行初始化（array不适用）</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>  <span class="token function">num</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>  <span class="token function">num2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 使用迭代器进行遍历</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">=</span>students<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>students<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
    <span class="token comment">// 赋值</span>
	<span class="token comment">// 1.直接进行赋值或</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>  <span class="token function">num3</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	num<span class="token operator">=</span>num3<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">=</span>num<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>num<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 2.使用assign进行赋值</span>
	vector<span class="token operator">&lt;</span>string<span class="token operator">></span> students3<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token string">"wangwu"</span><span class="token punctuation">,</span><span class="token string">"zhaoqi"</span><span class="token punctuation">,</span><span class="token string">"zhaoqi"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	vector<span class="token operator">&lt;</span>string<span class="token operator">></span> students4<span class="token punctuation">&#123;</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token string">"wangwu"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	students3<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>students4<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>students4<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">=</span>students3<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>students3<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 10个元素都是hello</span>
	students3<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">=</span>students3<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>students3<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 进行swap，比赋值速度快</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>  <span class="token function">num4</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	num3<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>num4<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">=</span>num3<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>num3<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="vector的比较、操作和改变容量"><a href="#vector的比较、操作和改变容量" class="headerlink" title="vector的比较、操作和改变容量"></a>vector的比较、操作和改变容量</h5><ul>
<li>插入元素<code>不支持push_front和emplace_front</code></li>
<li>删除元素<code>不支持pop_front</code></li>
<li>push_back()方法要调用构造函数和复制构造函数，这也就代表着要先构造一个临时对象，然后把临时的copy构造函数拷贝或者移动到容器最后面。而emplace_back()在实现时，则是直接在容器的尾部创建这个元素，省去了拷贝或移动元素的过程。</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token comment">// 1.获取容器内元素的个数</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"nums has "</span><span class="token operator">&lt;&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" elems."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token comment">// 2.判断容器内元素是否为空</span>
	cout<span class="token operator">&lt;&lt;</span>nums<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token comment">// 3.比较容器内元素的大小</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums2<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token operator">&lt;</span>nums2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token string">"nums is bigger"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token string">"nums2 is bigger"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 4.向容器尾部插入元素</span>
	nums<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	nums<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 5.向容器头部插入元素</span>
	nums<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	nums<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 6.在容器的任意位置插入元素</span>
	nums<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	nums<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nums2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nums2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	nums<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 7.访问元素</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"the first elem is "</span><span class="token operator">&lt;&lt;</span>nums<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"the last elem is "</span><span class="token operator">&lt;&lt;</span>nums<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"the third elem is "</span><span class="token operator">&lt;&lt;</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"the fourth elem is "</span><span class="token operator">&lt;&lt;</span>nums<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token comment">// 8.删除元素</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums3<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	nums3<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">=</span>nums3<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>nums3<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	nums3<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>nums3<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">=</span>nums3<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>nums3<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	nums3<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>nums3<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nums3<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">=</span>nums3<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>nums3<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	nums3<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">=</span>nums3<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>nums3<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h4><blockquote>
<p>双端队列。支持随机访问，头尾处插入删除速度快。</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;deque&gt;
#include &lt;string&gt;
using namespace std;
int main(int argc, char *argv[])
&#123;
	&#x2F;&#x2F; 1.容器初始化
	deque&lt;string&gt; name;
	deque&lt;int&gt; nums&#x3D;&#123;1,2,3,4&#125;;
	for(auto it&#x3D;nums.begin();it!&#x3D;nums.end();++it)&#123;
		cout&lt;&lt;*it;
	&#125;
	cout&lt;&lt;endl;
	deque&lt;int&gt; nums2&#x3D;nums;
	for(auto it&#x3D;nums2.begin();it!&#x3D;nums2.end();++it)&#123;
		cout&lt;&lt;*it;
	&#125;
	cout&lt;&lt;endl;
	deque&lt;int&gt; nums3(nums2);
	for(auto it&#x3D;nums3.begin();it!&#x3D;nums3.end();++it)&#123;
		cout&lt;&lt;*it;
	&#125;
	cout&lt;&lt;endl;
	&#x2F;&#x2F; 2.赋值
	deque&lt;int&gt; nums4(10);
	for(auto it&#x3D;nums4.begin();it!&#x3D;nums4.end();++it)&#123;
		cout&lt;&lt;*it;
	&#125;
	cout&lt;&lt;endl;
	deque&lt;int&gt; nums5(10,1);
	for(auto it&#x3D;nums5.begin();it!&#x3D;nums5.end();++it)&#123;
		cout&lt;&lt;*it;
	&#125;
	cout&lt;&lt;endl;
	deque&lt;string&gt; names&#123;&quot;zhangsan&quot;,&quot;lisi&quot;,&quot;wangwu&quot;,&quot;zhaoliu&quot;&#125;;
	deque&lt;string&gt; names2;
	names2.assign(names.begin(),names.end());
	for(auto it&#x3D;names2.begin();it!&#x3D;names2.end();++it)&#123;
		cout&lt;&lt;*it;
	&#125;
	cout&lt;&lt;endl;
	names2.assign(10,&quot;test&quot;);
	for(auto it&#x3D;names2.begin();it!&#x3D;names2.end();++it)&#123;
		cout&lt;&lt;*it;
	&#125;
	cout&lt;&lt;endl;
	&#x2F;&#x2F; 3. swap
	swap(names,names2);
	for(auto it&#x3D;names2.begin();it!&#x3D;names2.end();++it)&#123;
		cout&lt;&lt;*it;
	&#125;
	cout&lt;&lt;endl;
	&#x2F;&#x2F; 4.判断大小和空
	cout&lt;&lt;names.size()&lt;&lt;endl;
	cout&lt;&lt;names.empty()&lt;&lt;endl;
	&#x2F;&#x2F; 5.插入元素(比vector多了push_front)
	&#x2F;&#x2F; 5.1向尾部插入元素
	deque&lt;string&gt; names3&#123;&quot;zhangsan&quot;,&quot;lisi&quot;,&quot;wangwu&quot;,&quot;zhaoliu&quot;&#125;;
	names3.push_back(&quot;liuqi&quot;);
	names3.emplace_back(&quot;liba&quot;);
	for(auto it&#x3D;names3.begin();it!&#x3D;names3.end();++it)&#123;
		cout&lt;&lt;*it;
	&#125;
	cout&lt;&lt;endl;
	&#x2F;&#x2F; 5.2向头部插入元素
	names3.push_front(&quot;yi&quot;);
	names3.emplace_front(&quot;er&quot;);
	for(auto it&#x3D;names3.begin();it!&#x3D;names3.end();++it)&#123;
		cout&lt;&lt;*it;
	&#125;
	cout&lt;&lt;endl;
	&#x2F;&#x2F; 5.3向任意位置插入元素
	names3.insert(names3.begin(),&quot;san&quot;);
	names3.emplace(names3.begin(),&quot;si&quot;);
	for(auto it&#x3D;names3.begin();it!&#x3D;names3.end();++it)&#123;
		cout&lt;&lt;*it;
	&#125;
	cout&lt;&lt;endl;
	names3.insert(names3.begin(),&#123;&quot;wu&quot;,&quot;liu&quot;&#125;);
	for(auto it&#x3D;names3.begin();it!&#x3D;names3.end();++it)&#123;
		cout&lt;&lt;*it;
	&#125;
	cout&lt;&lt;endl;
	&#x2F;&#x2F; 6.访问元素
	cout&lt;&lt;names3.front()&lt;&lt;endl;
	cout&lt;&lt;names3.back()&lt;&lt;endl;
	cout&lt;&lt;names3[0]&lt;&lt;endl;
	cout&lt;&lt;names3.at(1)&lt;&lt;endl;&#x2F;&#x2F;会检查是否越界
	&#x2F;&#x2F; 7.删除元素
	&#x2F;&#x2F; 7.1删除尾部元素
	names3.pop_back();
	&#x2F;&#x2F; 7.2删除头部元素
	names3.pop_front();
	for(auto it&#x3D;names3.begin();it!&#x3D;names3.end();++it)&#123;
		cout&lt;&lt;*it;
	&#125;
	cout&lt;&lt;endl;
	names3.erase(names3.begin());
	for(auto it&#x3D;names3.begin();it!&#x3D;names3.end();++it)&#123;
		cout&lt;&lt;*it;
	&#125;
	cout&lt;&lt;endl;
	&#x2F;&#x2F; 7.3清空容器
	names3.clear();
	for(auto it&#x3D;names3.begin();it!&#x3D;names3.end();++it)&#123;
		cout&lt;&lt;*it;
	&#125;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="string"><a href="#string" class="headerlink" title="string"></a>string</h4><blockquote>
<p>与vector类似，但是主要用于存储字符，随机访问快，在尾部进行插入、删除速度快。</p>
</blockquote>
<ul>
<li>string<code>不支持emplace_back、emplace_front和push_front</code></li>
<li>string的其他构造方法</li>
</ul>
<table>
<thead>
<tr>
<th>方法名</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>string s(cp,n)</td>
<td>s是cp中前n个字符后的拷贝</td>
</tr>
<tr>
<td>string s(s2,pos2)</td>
<td>s是从下标pos2开始的对s2的拷贝</td>
</tr>
<tr>
<td>string s(s2,pos2,len2)</td>
<td>s是从下标pos2开始的对s2进行长为len2的拷贝</td>
</tr>
</tbody></table>
<ul>
<li><code>substr操作</code></li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
void travse(string s);
int main(int argc, char *argv[])
&#123;
	string str&#x3D;&quot;hello world!&quot;;
	string sbstr&#x3D;str.substr(0,5);
	travse(sbstr);
	string sbstr2&#x3D;str.substr(6);
	travse(sbstr2);
	return 0;
&#125;
void travse(string s)&#123;
	for(auto it&#x3D;s.begin();it!&#x3D;s.end();it++)&#123;
		cout&lt;&lt;*it;
	&#125;
	cout&lt;&lt;endl;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>string的其他操作方法<code>append</code>和<code>replace</code></li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
void travse(string s);
int main(int argc, char *argv[])
&#123;
	string str&#123;&quot;hello world!&quot;&#125;;
	str.push_back(&#39; &#39;);
	str.append(&quot;I am&quot;);
	str.replace(12,1,&quot;&quot;);
	travse(str);
	return 0;
&#125;
void travse(string s)&#123;
	for(auto it&#x3D;s.begin();it!&#x3D;s.end();it++)&#123;
		cout&lt;&lt;*it;
	&#125;
	cout&lt;&lt;endl;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>string的搜索和比较</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
int main(int argc, char *argv[])
&#123;
	string str&#x3D;&quot;hello world!&quot;;
	auto pos&#x3D;str.find(&quot;hello&quot;);
	cout&lt;&lt;pos&lt;&lt;endl;
	auto pos2&#x3D;str.find_first_of(&quot;horld&quot;);
	cout&lt;&lt;pos2&lt;&lt;endl;
	string str1&#x3D;&quot;a&quot;;
	int res&#x3D;str.compare(str1);
	cout&lt;&lt;res&lt;&lt;endl;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>string的数值转换(举例stoi,字符串转整型,其余查阅手册)</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
int main(int argc, char *argv[])
&#123;
	int i&#x3D;10;
	string s&#x3D;to_string(i);
	cout&lt;&lt;s&lt;&lt;endl;
	string str&#x3D;&quot;1234&quot;;
	int n&#x3D;stoi(str);
	cout&lt;&lt;n&lt;&lt;endl;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>string的常用操作</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
void travse(string s);
int main(int argc, char *argv[])
&#123;
	&#x2F;&#x2F;1.初始化	
	string str;
	string str2&#x3D;&quot;hello world!&quot;;
	str&#x3D;str2;
	string str3(str2);
	travse(str3);
	string str4(str3,6);
	travse(str4);
	string str5(str3,0,5);
	travse(str5);
	&#x2F;&#x2F;2.赋值
	string str6&#x3D;&#123;&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;&#125;;
	travse(str6);
	string str7&#123;&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;&#125;;
	travse(str7);
	str7.assign(str2.begin(),str2.end());
	travse(str7);
	str7.assign(5,&#39;h&#39;);
	travse(str7);
	&#x2F;&#x2F;3.swap
	swap(str2,str7);
	travse(str7);
	&#x2F;&#x2F; 4.大小与判空
	cout&lt;&lt;str7.size()&lt;&lt;endl;
	cout&lt;&lt;str7.empty()&lt;&lt;endl;
	return 0;
&#125;
void travse(string s)&#123;
	for(auto it&#x3D;s.begin();it!&#x3D;s.end();it++)&#123;
		cout&lt;&lt;*it;
	&#125;
	cout&lt;&lt;endl;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="array"><a href="#array" class="headerlink" title="array"></a>array</h4><ul>
<li>array<code>不支持直接使用初始化列表拷贝和assign函数</code></li>
<li>array不支持添加和删除元素</li>
</ul>
<blockquote>
<p>与内置数值类似，array的大小也是类型的一部分。与内置数组不同之处在于，array可以进行拷贝和对象赋值操作。</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;array&gt;
#include &lt;string&gt;
using namespace std;
int main(int argc, char *argv[])
&#123;
	&#x2F;&#x2F; 1.初始化容器
	array&lt;int,10&gt; arr;
	array&lt;int,10&gt; arr2&#x3D;&#123;1,2,3,4,5,6,7,8,9&#125;;
	&#x2F;&#x2F;要求类型和大小都一致
	array&lt;int,10&gt; arr3&#x3D;arr2;
	&#x2F;&#x2F; 2.交换
	swap(arr,arr2);
	&#x2F;&#x2F; 3.容器的大小和判空
	cout&lt;&lt;arr3.size()&lt;&lt;endl;
	cout&lt;&lt;arr3.empty()&lt;&lt;endl;
	cout&lt;&lt;(arr3&#x3D;&#x3D;arr2)&lt;&lt;endl;
	&#x2F;&#x2F; 4.访问
	cout&lt;&lt;arr3.front()&lt;&lt;endl;
	cout&lt;&lt;arr3.back()&lt;&lt;endl;
	cout&lt;&lt;arr3[0]&lt;&lt;endl;
	cout&lt;&lt;arr3.at(1)&lt;&lt;endl;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><blockquote>
<p>双向链表。支持双向顺序访问。适合在任意位置做插入、删除操作。</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;list&gt;
#include &lt;string&gt;
using namespace std;
int main(int argc, char *argv[])
&#123;
	&#x2F;&#x2F; 1.初始化容器
	list&lt;string&gt; l;
	list&lt;int&gt; l2&#x3D;&#123;1,2,3,4,5,6&#125;;
	list&lt;int&gt; l3&#x3D;l2;
	&#x2F;&#x2F; 2.赋值
	list&lt;int&gt; l4(10,1);
	l4.assign(l3.begin(),l3.end());
	l.assign(&#123;&quot;zhangsan&quot;,&quot;lisi&quot;,&quot;wangwu&quot;,&quot;zhaoliu&quot;&#125;);
	&#x2F;&#x2F; 3. swap
	swap(l3,l4);
	&#x2F;&#x2F; 4.大小和判空
	cout&lt;&lt;l.size()&lt;&lt;endl;
	cout&lt;&lt;l.empty()&lt;&lt;endl;
	&#x2F;&#x2F; 5.插入元素
	&#x2F;&#x2F; 5.1向尾部插入元素
	l.push_back(&quot;yi&quot;);
	l.emplace_back(&quot;er&quot;);
	&#x2F;&#x2F; 5.2 向首部插入元素
	l.push_front(&quot;yi&quot;);
	l.emplace_front(&quot;er&quot;);
	&#x2F;&#x2F; 5.3 向任意位置插入元素
	l.insert(l.begin(),&quot;san&quot;);
	for(auto it&#x3D;l.begin();it!&#x3D;l.end();++it)&#123;
		cout&lt;&lt;*it;
	&#125;
	cout&lt;&lt;endl;
	&#x2F;&#x2F; 6.访问元素
	cout&lt;&lt;l.front()&lt;&lt;endl;
	cout&lt;&lt;l.back()&lt;&lt;endl;
	&#x2F;&#x2F; 7.删除元素
	&#x2F;&#x2F; 7.1删除尾部元素
	l.pop_back();
	&#x2F;&#x2F; 7.2删除首部元素
	l.pop_front();
	&#x2F;&#x2F; 7.3清空表内元素
	l.clear();
	&#x2F;&#x2F; 7.4删除任意位置元素
	l.erase(l.begin(),l.end());
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="forward-list"><a href="#forward-list" class="headerlink" title="forward_list"></a>forward_list</h4><ul>
<li>forward_list<code>不支持push_back和emplace_back</code></li>
<li>forward_list<code>不支持size</code></li>
<li>forward_list<code>不支持下标访问、at和back</code></li>
<li>forward_list<code>不支持pop_back</code></li>
</ul>
<blockquote>
<p>单链表。支持单向顺序访问。适合在任意位置做插入、删除操作。</p>
</blockquote>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;forward_list></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">// 1.容器初始化</span>
	forward_list<span class="token operator">&lt;</span>string<span class="token operator">></span> f<span class="token punctuation">;</span>
	forward_list<span class="token operator">&lt;</span>string<span class="token operator">></span> f1<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token string">"liuwu"</span><span class="token punctuation">,</span><span class="token string">"zhaoliu"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	f<span class="token operator">=</span>f1<span class="token punctuation">;</span>
	<span class="token comment">// 2.赋值</span>
	f<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token string">"liuwu"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	f<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 3.swap</span>
	<span class="token function">swap</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 4.判空</span>
	cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token comment">// 5.插入元素</span>
	<span class="token comment">// 5.1向首部插入</span>
	f<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token string">"yi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	f<span class="token punctuation">.</span><span class="token function">insert_after</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"er"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 6.删除元素</span>
	f<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    f<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 7.访问元素</span>
	cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="容器适配器"><a href="#容器适配器" class="headerlink" title="容器适配器"></a>容器适配器</h4><h5 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h5><ul>
<li>接受除<code>array和forward_list</code>外的所有的顺序容器。</li>
<li>默认是基于deque实现的，可以通过指定第二个参数进行重载。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;deque&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;stack&gt;
using namespace std;
int main(int argc, char *argv[])
&#123;
	&#x2F;&#x2F; 1.初始化一个空容器
	stack&lt;int&gt; s;
	deque&lt;string&gt; d&#123;&quot;zhangsan&quot;,&quot;lisi&quot;,&quot;wangwu&quot;,&quot;zhaoliu&quot;&#125;;
	stack&lt;string&gt; s2(d);
	&#x2F;&#x2F; 2.栈的大小和判空
	cout&lt;&lt;s2.size()&lt;&lt;endl;
	cout&lt;&lt;s2.empty()&lt;&lt;endl;
	&#x2F;&#x2F; 3.重载默认的容器类型deque
	vector&lt;string&gt; v1&#123;&quot;zhangsan&quot;,&quot;lisi&quot;,&quot;wangwu&quot;&#125;;
	stack&lt;string,vector&lt;string&gt;&gt; s3(v1);
	&#x2F;&#x2F; 4.栈的常用操作
	s3.push(&quot;zhaoliu&quot;);
	s3.emplace(&quot;liuqi&quot;);
	s3.pop();
	cout&lt;&lt;s3.top()&lt;&lt;endl;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h5><ul>
<li>默认由deque实现，也可以由list和vector实现。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;deque&gt;
#include &lt;vector&gt;
#include &lt;list&gt;
#include &lt;queue&gt;
#include &lt;string&gt;
using namespace std;
int main(int argc, char *argv[])
&#123;
	&#x2F;&#x2F; 1.初始化队列
	queue&lt;int&gt; q;
	deque&lt;int&gt; deq&#x3D;&#123;1,2,3,4,5,6&#125;;
	queue&lt;int&gt; q1(deq);
	&#x2F;&#x2F; 2.队列常用操作
	&#x2F;&#x2F; 2.1 删除队首元素
	q1.pop();
	&#x2F;&#x2F; 2.2 返回队首元素
	cout&lt;&lt;q1.front()&lt;&lt;endl;
	&#x2F;&#x2F; 2.3 返回队尾元素
	cout&lt;&lt;q1.back()&lt;&lt;endl;
	&#x2F;&#x2F; 3.向队尾插入一个元素
	q1.push(7);
	q1.emplace(8);
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h5><ul>
<li>默认由vector实现，也可以由deque实现。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;queue&gt;
#include &lt;string&gt;
using namespace std;
int main(int argc, char *argv[])
&#123;
	&#x2F;&#x2F; 1.初始化容器
	priority_queue&lt;int&gt; p;
	p.push(1);
	&#x2F;&#x2F; 2.返回顶部元素
	p.pop();
	p.emplace(2);
	cout&lt;&lt;p.top()&lt;&lt;endl;
	&#x2F;&#x2F; 2.内置元素优先级
	&#x2F;&#x2F; 3.数字越大优先级越大
	priority_queue&lt;int,vector&lt;int&gt;,less&lt;int&gt;&gt; p2;
	p2.push(20);
	p2.push(1);
	cout&lt;&lt;p2.top()&lt;&lt;endl;
	&#x2F;&#x2F; 3.数字越小优先级越大
	priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt;&gt; p3;
	p3.push(20);
	p3.push(1);
	cout&lt;&lt;p3.top()&lt;&lt;endl;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="泛型算法"><a href="#泛型算法" class="headerlink" title="泛型算法"></a>泛型算法</h3><blockquote>
<p>泛型算法实现了一些经典算法的公共接口</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;numeric&gt;
#include &lt;iterator&gt;
#include &lt;string&gt;
using namespace std;
bool isShorter(const string &amp;s1,const string &amp;s2);
int main(int argc, char *argv[])
&#123;
    &#x2F;&#x2F; 使用算法库
	vector&lt;int&gt; v&#123;1,2,3,4,5,6,7,8,9&#125;;
	auto result&#x3D;find(v.begin(),v.end(),9);
	cout&lt;&lt;*result&lt;&lt;endl;
    &#x2F;&#x2F; 使用数值算法库
	int sum&#x3D;accumulate(v.begin(),v.end(),0);
	cout&lt;&lt;sum&lt;&lt;endl;
	fill(v.begin(),v.end(),9);
	int sum2&#x3D;accumulate(v.begin(),v.end(),0);
	cout&lt;&lt;sum2&lt;&lt;endl;
    &#x2F;&#x2F; 使用back_inserter插入空容器
	vector&lt;int&gt; v2;
	fill_n(back_inserter(v2),10,0);
	int a1[10]&#x3D;&#123;0,1,2,3,4,5,6,7,8,9&#125;;
	int a2[10];
	copy(begin(a1),end(a1),a2);
    &#x2F;&#x2F;定制函数
	vector&lt;string&gt; v3&#123;&quot;zhangsan&quot;,&quot;lisi&quot;,&quot;wangwu&quot;&#125;;
	sort(v3.begin(),v3.end(),isShorter);
	return 0;
&#125;
bool isShorter(const string &amp;s1,const string &amp;s2)&#123;
	return s1.size()&lt;s2.size();
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h4><ul>
<li>可以忽略参数列表和返回类型</li>
<li>lambda不能有默认参数</li>
<li>若lambda的函数体中包含任何单一return之外的内容，且未指定返回值，则返回void</li>
<li>一个lambda只有在其捕获列表中捕获一个它所在函数的局部变量，才能在函数体中使用该变量</li>
<li>捕获列表只用于局部非静态变量，lambda可以直接使用static变量和它所在函数之声明的部分</li>
<li>我们还可以进行隐式捕获，<code>&amp;</code>代表采用捕获引用方式，<code>=</code>表示采用值捕获方式。采用混合方式时第一个必须时&amp;或者&#x3D;</li>
<li>如果希望改变捕获变量的值，可以在参数列表前加mutable</li>
<li>一个引用捕获变量是否可以修改，依赖于其引用的是const还是非const</li>
</ul>
<blockquote>
<p>一个lamnda表达式表示一个可调用的代码单元。</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;string&gt;
using namespace std;
int sum2(const int &amp;num,const int &amp;num2);
int sum3(const int &amp;num,const int &amp;num2);
void f();
int main(int argc, char *argv[])
&#123;
	&#x2F;&#x2F; 不使用捕获列表
	auto sum&#x3D;[](const int &amp;a,const int &amp;b)&#123;return a+b;&#125;;
	cout&lt;&lt;sum(10,20)&lt;&lt;endl;
	&#x2F;&#x2F; 使用捕获列表
	cout&lt;&lt;sum2(11,22)&lt;&lt;endl;
	cout&lt;&lt;sum3(12,23)&lt;&lt;endl;
	&#x2F;&#x2F; 可变lambda
	f();
	return 0;
&#125;
int sum2(const int &amp;num,const int &amp;num2)&#123;
	auto f&#x3D;[num](const int &amp;num2)&#123;return num+num2;&#125;;
	return f(num2);
&#125;
int sum3(const int &amp;num,const int &amp;num2)&#123;
	auto f&#x3D;[&amp;](const int &amp;num2)&#123;return num+num2;&#125;;
	return f(num2);
&#125;
void f()&#123;
	size_t v1&#x3D;42;
	auto f2&#x3D;[&amp;v1]&#123;return ++v1;&#125;;
	v1&#x3D;0;
	auto d&#x3D;f2();
	cout&lt;&lt;d&lt;&lt;endl;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="参数绑定"><a href="#参数绑定" class="headerlink" title="参数绑定"></a>参数绑定</h4><ul>
<li>如果希望传递给bind一个对象而不是拷贝，则需要使用<code>ref</code>函数或者<code>cref</code>函数</li>
</ul>
<p>使用bind函数可以解决一个关于函数参数长度的问题。bind函数可以看作一个通用的函数适配器。</p>
<blockquote>
<p>auto <em>newCallable</em>&#x3D;bind(<em>callable</em>,<em>arg_list</em>);</p>
</blockquote>
<p><em>arg_list</em>可能包含_n的名字，n为一个整数，这些参数为”占位符”。</p>
<h4 id="迭代器深入"><a href="#迭代器深入" class="headerlink" title="迭代器深入"></a>迭代器深入</h4><blockquote>
<p>共有插入迭代器、流迭代器、反向迭代器和移动迭代器四种，这里只介绍两种</p>
</blockquote>
<h5 id="插入迭代器"><a href="#插入迭代器" class="headerlink" title="插入迭代器"></a>插入迭代器</h5><blockquote>
<p>被绑定到一个·容器上，可以用来向容器内插入元素。</p>
</blockquote>
<ol>
<li>back_inserter：创建一个使用push_back的迭代器</li>
<li>front_inserter：创建一个使用push_front的迭代器</li>
<li>inserter：创建一个使用insert的迭代器。第二个参数必须是一个指定容器的迭代器。元素被插入到指定迭代器所表示的元素之前。</li>
</ol>
<h5 id="流迭代器"><a href="#流迭代器" class="headerlink" title="流迭代器"></a>流迭代器</h5><blockquote>
<p>被绑定到一个输入或输出流上，可以用来遍历所有关联的IO流</p>
</blockquote>
<ul>
<li><p>istream_iterator</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;iterator&gt;
using namespace std;
int main(int argc, char *argv[])
&#123;
    &#x2F;&#x2F;eof表示尾后迭代器
	istream_iterator&lt;int&gt; it(cin),eof;
	while(it!&#x3D;eof)&#123;
		cout&lt;&lt;*it++&lt;&lt;endl;
	&#125;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>ostream_iterator</p>
<blockquote>
<p>无尾后迭代器</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;iterator&gt;
using namespace std;
int main(int argc, char *argv[])
&#123;
	string str&#x3D;&quot;hello&quot;;
	ostream_iterator&lt;char&gt; out(cout,&quot; &quot;);
	for(auto e:str)&#123;
		*out++&#x3D;e;
	&#125;
	cout&lt;&lt;endl;
	return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="关联容器"><a href="#关联容器" class="headerlink" title="关联容器"></a>关联容器</h3><ul>
<li><code>不支持push_back和push_front</code></li>
</ul>
<blockquote>
<p>共有8个关联容器，1）要么是set，要么是map。2)要么要求不重复关键字，要么允许重复的关键字。3）要么按顺序存储，要么无序存储。<code>允许重复关键字的容器的名字中都带有multi,不保持关键字顺序的容器都以unordered开头。</code></p>
</blockquote>
<h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//map进行初始化</span>
    map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span>size_t<span class="token operator">></span> words<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"wangwu"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span>size_t<span class="token operator">></span> word_count<span class="token punctuation">;</span>
	string word<span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>word<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token operator">++</span>word_count<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">;</span>	
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token keyword">const</span> <span class="token operator">&amp;</span>v<span class="token operator">:</span>word_count<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span>v<span class="token punctuation">.</span>first<span class="token operator">&lt;&lt;</span><span class="token string">" occurs "</span><span class="token operator">&lt;&lt;</span>v<span class="token punctuation">.</span>second<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>second<span class="token operator">></span><span class="token number">1</span><span class="token operator">?</span><span class="token string">" times"</span><span class="token operator">:</span><span class="token string">" time"</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;string&gt;
using namespace std;
int main(int argc, char *argv[])
&#123;
	map&lt;string,size_t&gt; word_count;
	set&lt;string&gt; exclude&#x3D;&#123;&quot;the&quot;,&quot;The&quot;,&quot;a&quot;&#125;;
	string word;
	while(cin&gt;&gt;word)&#123;
		if(exclude.find(word)&#x3D;&#x3D;exclude.end())&#123;
			++word_count[word];	
		&#125;
	&#125;
	for(auto const &amp;v:word_count)&#123;
		cout&lt;&lt;v.first&lt;&lt;&quot; occurs &quot;&lt;&lt;v.second&lt;&lt;(v.second&gt;1?&quot; times&quot;:&quot; time&quot;)&lt;&lt;endl;
	&#125;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h4><blockquote>
<p>头文件<code>utility</code></p>
</blockquote>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span>string<span class="token operator">></span> p<span class="token punctuation">;</span>
	pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span>string<span class="token operator">></span> p1<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"I am"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span>string<span class="token operator">></span> p2<span class="token punctuation">&#123;</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"I am"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="动态内存与智能指针"><a href="#动态内存与智能指针" class="headerlink" title="动态内存与智能指针"></a>动态内存与智能指针</h3><ul>
<li>位于<code>memory</code>头文件种</li>
</ul>
<blockquote>
<p>智能指针的出现是为了保证动态对象被正确释放，当一个对象被释放时，指向它的智能指针可以确保自动释放它。</p>
</blockquote>
<h4 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h4><blockquote>
<p>允许多个指针指向同一个对象</p>
</blockquote>
<p>每个shared_ptr都有一个引用计数，无论何时拷贝shared_ptr，计数器都会递增。当给shared_ptr赋予一个新值或者shared_ptr被销毁，计数器就会递减。</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;memory&gt;
#include &lt;string&gt;
using namespace std;
int main(int argc, char *argv[])
&#123;
	&#x2F;&#x2F;1.shared_ptr的初始化
	string str;
	shared_ptr&lt;string&gt; s&#x3D;make_shared&lt;string&gt;(str);
	if(s&amp;&amp;s-&gt;empty())&#123;
		*s&#x3D;&quot;hi&quot;;
	&#125;
	cout&lt;&lt;*s&lt;&lt;endl;
	&#x2F;&#x2F;2.shared_ptr的拷贝和赋值
	auto p&#x3D;make_shared&lt;string&gt;(str);
	s&#x3D;p;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h4><blockquote>
<p>独占所指的对象</p>
</blockquote>
<ul>
<li>不支持普通的拷贝或赋值</li>
<li>可以拷贝或赋值一个将要销毁的unique_ptr</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;memory&gt;
using namespace std;
int main(int argc, char *argv[])
&#123;
	unique_ptr&lt;int&gt; p;
	unique_ptr&lt;int&gt; p2(new int(20));
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h4><blockquote>
<p>弱引用，指向shared_ptr所管理的对象</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;memory&gt;
using namespace std;
int main(int argc, char *argv[])
&#123;
	auto p&#x3D;make_shared&lt;int&gt;(42);
	weak_ptr&lt;int&gt; w(p);&#x2F;&#x2F;弱共享p
	if(auto np&#x3D;w.lock())&#123;
		cout&lt;&lt;*np&lt;&lt;endl;
	&#125;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="拷贝控制"><a href="#拷贝控制" class="headerlink" title="拷贝控制"></a>拷贝控制</h3><h4 id="拷贝、赋值与销毁"><a href="#拷贝、赋值与销毁" class="headerlink" title="拷贝、赋值与销毁"></a>拷贝、赋值与销毁</h4><h5 id="默认拷贝构造函数"><a href="#默认拷贝构造函数" class="headerlink" title="默认拷贝构造函数"></a>默认拷贝构造函数</h5><blockquote>
<p>如果没有为一个类定义拷贝构造函数，编译器会默认为我们定义一个。和默认的构造函数不同，即使我们定义了其他拷贝构造函数，编译器也会为我们定义一个默认的拷贝构造函数。</p>
</blockquote>
<ul>
<li>如果一个类有一个移动构造函数，则拷贝初始化有时会使用移动构造函数而非拷贝构造函数。</li>
<li>拷贝构造函数发生的情况：1）将一个对象作为实参传递给一个非引用类型形参。2）从一个返回类型为非引用类型的函数返回一个对象。3）用花括号列表初始化一个数组中的元素或一个聚合类中的成员。</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Sales_data</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">private</span><span class="token operator">:</span>
		string bookNo<span class="token punctuation">;</span>
		<span class="token keyword">int</span> units_sold<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">double</span> revenue<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">Sales_data</span><span class="token double-colon punctuation">::</span><span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span>org<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">bookNo</span><span class="token punctuation">(</span>org<span class="token punctuation">.</span>bookNo<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">units_sold</span><span class="token punctuation">(</span>org<span class="token punctuation">.</span>units_sold<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">revenue</span><span class="token punctuation">(</span>org<span class="token punctuation">.</span>revenue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="拷贝赋值运算符"><a href="#拷贝赋值运算符" class="headerlink" title="拷贝赋值运算符"></a>拷贝赋值运算符</h5><blockquote>
<p>与处理拷贝构造函数一样，如果一个类未定义自己的拷贝赋值运算符，编译器会为它生成一个合成拷贝赋值运算符。</p>
</blockquote>
<h5 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h5><ul>
<li>析构函数的调用时机：1）变量在离开其作用域时被销毁。2）当一个对象被销毁时，其成员被销毁。3）容器被销毁时，其元素被销毁。4）对于动态分配的对象，当对他的指针应用delete运算符时被销毁。5）对于临时对象，当创建它的表达式结束时被销毁。<blockquote>
<p>当一个类未定义自己的析构函数时，编译器会为它定义一个默认的析构函数</p>
</blockquote>
</li>
</ul>
<h5 id="三五法则"><a href="#三五法则" class="headerlink" title="三五法则"></a>三五法则</h5><blockquote>
<ol>
<li>需要析构函数的类也需要拷贝和赋值操作。</li>
<li>需要拷贝操作的类也需要赋值操作</li>
</ol>
</blockquote>
<ul>
<li>可以使用&#x3D;default来显示要求编译器生成默认的构造函数、析构函数。如果不希望合成的成员是内联函数，则应该只对成员的类外定义使用&#x3D;default。</li>
<li>可以通过将<code>拷贝构造函数</code>和<code>赋值运算符</code>使用&#x3D;delete来阻止拷贝，可以对任何函数指定delete，但是只能对编译器可以合成的默认构造函数或拷贝控制成员使用&#x3D;default。</li>
<li>析构函数一般不能定义为删除的成员，如果析构函数被定义为删除函数，那么就无法删除该类型的对象。</li>
<li>如果一个类有数据成员不能默认构造、拷贝、复制或销毁，则对应的成员函数被定义为删除的。一个成员有删除的或不可访问的析构函数会导致合成的默认和拷贝构造函数被定义为删除的。对于具有引用成员无法默认构造的const成员的类，编译器不会为其和成默认构造函数。</li>
</ul>
<h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><h4 id="输入输出运算符重载"><a href="#输入输出运算符重载" class="headerlink" title="输入输出运算符重载"></a>输入输出运算符重载</h4><blockquote>
<p>必须为全局函数重载</p>
</blockquote>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
class Person
&#123;
	friend ostream &amp;operator&lt;&lt;(ostream &amp;os,const Person &amp;p);
	friend istream &amp;operator&gt;&gt;(istream &amp;is,Person &amp;p);
public:	
	Person()&#123;&#125;
	Person(string name,int age)&#123;
		this-&gt;name&#x3D;name;
		this-&gt;age&#x3D;age;
	&#125;
private:
   string name;  
   int age;
&#125;;
&#x2F;&#x2F;全局函数输出运算符&lt;&lt;重载
ostream &amp;operator&lt;&lt;(ostream &amp;os,const Person &amp;p)&#123;
		os&lt;&lt;&quot;name:&quot;&lt;&lt;p.name&lt;&lt;&quot; age:&quot;&lt;&lt;p.age;
		return os;		
&#125;
&#x2F;&#x2F;全局函数输入运算符&gt;&gt;重载
istream &amp;operator&gt;&gt;(istream &amp;is,Person &amp;p)&#123;
	is&gt;&gt;p.name&gt;&gt;p.age;
	return is;
&#125;
int main(int argc, char *argv[])
&#123;
	Person p(&quot;zhangsan&quot;,18);
	cout&lt;&lt;p&lt;&lt;endl;
	Person p2;
	cin&gt;&gt;p2;
	cout&lt;&lt;p2&lt;&lt;endl;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h4 id="相等运算符和关系运算符重载"><a href="#相等运算符和关系运算符重载" class="headerlink" title="相等运算符和关系运算符重载"></a>相等运算符和关系运算符重载</h4><blockquote>
<p>此处只列举<code>==</code>运算符重载，其余关系运算符也类似。</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
class Person
&#123;
	friend bool operator&#x3D;&#x3D;(const Person &amp;p,const Person &amp;p2);
public:
	Person()&#123;&#125;
	Person(string name,int age)&#123;
		this-&gt;name&#x3D;name;
		this-&gt;age&#x3D;age;
	&#125;
	&#x2F;&#x2F; 成员函数进行&#x3D;&#x3D;运算符重载
	&#x2F;**bool operator&#x3D;&#x3D;(const Person &amp;p)
	&#123;
		if(p.name&#x3D;&#x3D;this-&gt;name&amp;&amp;p.age&#x3D;&#x3D;this-&gt;age)&#123;
			return true;
		&#125;
		return false;
	&#125;**&#x2F;
private:
	string name;
	int age;
&#125;;
&#x2F;&#x2F;全局函数进行&#x3D;&#x3D;运算符重载
bool operator&#x3D;&#x3D;(const Person &amp;p,const Person &amp;p2)&#123;
	return p.name&#x3D;&#x3D;p2.name&amp;&amp;p.age&#x3D;&#x3D;p2.age;
&#125;
int main(int argc, char *argv[])
&#123;
	Person p(&quot;zhangsan&quot;,18);
	Person p2(&quot;zhangsan&quot;,18);
	if(p&#x3D;&#x3D;p2)&#123;
		cout&lt;&lt;&quot;&#x3D;&#x3D;&quot;&lt;&lt;endl;
	&#125;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="赋值运算符重载"><a href="#赋值运算符重载" class="headerlink" title="赋值运算符重载"></a>赋值运算符重载</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
class Person
&#123;
friend ostream &amp;operator&lt;&lt;(ostream &amp;os,const Person &amp;p);
public:
	Person()&#123;&#125;
	Person(string name,int age)&#123;
		this-&gt;name&#x3D;name;
		this-&gt;age&#x3D;age;
	&#125;
	&#x2F;&#x2F; 成员函数进行&#x3D;运算符重载
	Person&amp; operator&#x3D;(const Person &amp;p)
	&#123;
		this-&gt;name&#x3D;p.name;
		this-&gt;age&#x3D;p.age;
		return *this;
	&#125;
private:
	string name;
	int age;
&#125;;
&#x2F;&#x2F;全局函数输出运算符&lt;&lt;重载
ostream &amp;operator&lt;&lt;(ostream &amp;os,const Person &amp;p)&#123;
		os&lt;&lt;&quot;name:&quot;&lt;&lt;p.name&lt;&lt;&quot; age:&quot;&lt;&lt;p.age;
		return os;		
&#125;
int main(int argc, char *argv[])
&#123;
	Person p(&quot;zhangsan&quot;,18);
	Person p2;
	Person p3;
	p3&#x3D;p2&#x3D;p;
	cout&lt;&lt;p2&lt;&lt;p3&lt;&lt;endl;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
class People &#123;
	public:
		People(int age) &#123;
			p_age&#x3D;new int(age);
		&#125;
		~People() &#123;
			if(p_age!&#x3D;NULL) &#123;
				delete p_age;
				p_age&#x3D;NULL;
			&#125;
		&#125;
&#x2F;&#x2F;		&#x3D;运算符重载
		People&amp; operator&#x3D;(People &amp;p) &#123;
&#x2F;&#x2F;			如果自身有内存先释放干净
			if(p_age!&#x3D;NULL) &#123;
				delete p_age;
				p_age&#x3D;NULL;
			&#125;
			this-&gt;p_age&#x3D; new int(*p.p_age);
			return *this;
		&#125;
		int *p_age;
&#125;;
int main(int argc, char** argv) &#123;
	People p1(10);
	People p2(18);
	p2&#x3D;p1;
	cout&lt;&lt;&quot;age:&quot;&lt;&lt;*p2.p_age&lt;&lt;endl;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="下标运算符重载"><a href="#下标运算符重载" class="headerlink" title="下标运算符重载"></a>下标运算符重载</h4><blockquote>
<p>下标运算符必须是成员函数</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
class MyStr
&#123;
public:
	MyStr()&#123;&#125;
	MyStr(size_t length&#x3D;0)&#123;
		if(length &#x3D;&#x3D; 0)&#123;
			elems &#x3D; NULL;
		&#125;else&#123;
			elems &#x3D; new string[length];
		&#125;
	&#125;
	~MyStr()&#123;
		if(this-&gt;elems!&#x3D;nullptr)&#123;
			delete[] elems;
			elems&#x3D;nullptr;
		&#125;
	&#125;
	string&amp; operator[](size_t n)&#123;
		return elems[n];
	&#125;
	const string&amp; operator[](size_t n) const&#123;
		return elems[n];
	&#125;
private:
	string *elems;
&#125;;
int main(int argc, char *argv[])
&#123;
	MyStr str(3);
	for(int i&#x3D;0;i&lt;3;i++)&#123;
		string s;
		cin&gt;&gt;s;
		str[i]&#x3D;s;
	&#125;
	cout&lt;&lt;str[0]&lt;&lt;endl;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="递增运算符重载"><a href="#递增运算符重载" class="headerlink" title="递增运算符重载"></a>递增运算符重载</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
class Number &#123;
		friend ostream&amp; operator&lt;&lt;(ostream &amp;cout,Number n);
	public :
		Number() &#123;

		&#125;
		Number(int num) &#123;
			this-&gt;num&#x3D;num;
		&#125;
&#x2F;&#x2F;		前置++重载
		Number&amp; operator++() &#123;
			++num;
			return *this;
		&#125;
&#x2F;&#x2F;		后置 ++重载
		Number operator++(int) &#123;
			Number temp&#x3D;*this;
			num++;
			return temp;
		&#125;
		int num;
&#125;;
ostream&amp; operator&lt;&lt;(ostream &amp;cout,Number n) &#123;
	cout&lt;&lt;n.num;
	return cout;
&#125;
int main(int argc, char** argv) &#123;
	Number n(10);
	cout&lt;&lt;++n&lt;&lt;endl;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h4 id="成员访问运算符重载"><a href="#成员访问运算符重载" class="headerlink" title="成员访问运算符重载"></a>成员访问运算符重载</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;
 
&#x2F;&#x2F; 假设一个实际的类
class Obj &#123;
   static int i, j;
public:
   void f() const &#123; cout &lt;&lt; i++ &lt;&lt; endl; &#125;
   void g() const &#123; cout &lt;&lt; j++ &lt;&lt; endl; &#125;
&#125;;
 
&#x2F;&#x2F; 静态成员定义
int Obj::i &#x3D; 10;
int Obj::j &#x3D; 12;
 
&#x2F;&#x2F; 为上面的类实现一个容器
class ObjContainer &#123;
   vector&lt;Obj*&gt; a;
public:
   void add(Obj* obj)
   &#123; 
      a.push_back(obj);  &#x2F;&#x2F; 调用向量的标准方法
   &#125;
   friend class SmartPointer;
&#125;;
 
&#x2F;&#x2F; 实现智能指针，用于访问类 Obj 的成员
class SmartPointer &#123;
   ObjContainer oc;
   int index;
public:
   SmartPointer(ObjContainer&amp; objc)
   &#123; 
       oc &#x3D; objc;
       index &#x3D; 0;
   &#125;
   &#x2F;&#x2F; 返回值表示列表结束
   bool operator++() &#x2F;&#x2F; 前缀版本
   &#123; 
     if(index &gt;&#x3D; oc.a.size() - 1) return false;
     if(oc.a[++index] &#x3D;&#x3D; 0) return false;
     return true;
   &#125;
   bool operator++(int) &#x2F;&#x2F; 后缀版本
   &#123; 
      return operator++();
   &#125;
   &#x2F;&#x2F; 重载运算符 -&gt;
   Obj* operator-&gt;() const 
   &#123;
     if(!oc.a[index])
     &#123;
        cout &lt;&lt; &quot;Zero value&quot;;
        return (Obj*)0;
     &#125;
     return oc.a[index];
   &#125;
&#125;;
 
int main() &#123;
   const int sz &#x3D; 10;
   Obj o[sz];
   ObjContainer oc;
   for(int i &#x3D; 0; i &lt; sz; i++)
   &#123;
       oc.add(&amp;o[i]);
   &#125;
   SmartPointer sp(oc); &#x2F;&#x2F; 创建一个迭代器
   do &#123;
      sp-&gt;f(); &#x2F;&#x2F; 智能指针调用
      sp-&gt;g();
   &#125; while(sp++);
   return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="函数运算符重载"><a href="#函数运算符重载" class="headerlink" title="函数运算符重载"></a>函数运算符重载</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Print</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>string valueString<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span>valueString<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	Print print<span class="token punctuation">;</span>
	<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h3><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><ul>
<li>动态绑定：函数的运行版本由实参决定，即在运行时选择函数的版本，又称为运行时绑定。</li>
<li>使用基类的引用或指针调用一个虚函数时将发生动态绑定。</li>
</ul>
<blockquote>
<p>通过继承可以联系在一起的类构成一种层次关系，基类希望其派生类各自定义适合自身的版本，则可以使用虚函数</p>
</blockquote>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">People</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">;</span>
		<span class="token function">People</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">void</span> <span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"I am "</span><span class="token operator">&lt;&lt;</span><span class="token keyword">this</span><span class="token operator">-></span>name<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token keyword">private</span><span class="token operator">:</span>
		string name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Teacher</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">People</span></span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">;</span>
		<span class="token function">Teacher</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token keyword">private</span><span class="token operator">:</span>
		string name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	People <span class="token function">p</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	p<span class="token punctuation">.</span><span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Animal</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">;</span>
		<span class="token function">Animal</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">doSpeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"animal is speaking!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
		string name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Animal</span></span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">;</span>
		<span class="token function">Dog</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">void</span> <span class="token function">doSpeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"dog is speaking!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
		string name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Animal</span></span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">;</span>
		<span class="token function">Cat</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">void</span> <span class="token function">doSpeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"cat is speaking!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
		string name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	Dog d<span class="token punctuation">;</span>
	Animal <span class="token operator">&amp;</span>dog<span class="token operator">=</span>d<span class="token punctuation">;</span>
	dog<span class="token punctuation">.</span><span class="token function">doSpeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="模板与泛型"><a href="#模板与泛型" class="headerlink" title="模板与泛型"></a>模板与泛型</h3><h4 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>v1<span class="token punctuation">,</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>v2<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>v1<span class="token operator">&lt;</span>v2<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>v1<span class="token operator">></span>v2<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Int</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		T value<span class="token punctuation">;</span>
	    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span>value<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	Int<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> i<span class="token punctuation">;</span>
	i<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
	i<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
</search>
