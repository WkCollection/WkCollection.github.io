<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Cpp学习</title>
    <url>/2022/06/19/Cpp/</url>
    <content><![CDATA[<h1 id="C-学习"><a href="#C-学习" class="headerlink" title="C++学习"></a>C++学习</h1><span id="more"></span>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><blockquote>
<p>方便存放同类型的元素</p>
</blockquote>
<h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><p>一维数组数组名代表数组的首地址</p>
<p>一维数组名可以计算出数组在内存空间所占内存大小</p>
<h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><p>二维数组名代表二维数组的首地址，也可以查看某行的首地址</p>
<p>二维数组可以计算出数组在内存空间所占内存大小，也可以计算出某行所占内存大小</p>
<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><blockquote>
<p>作用：保存地址</p>
</blockquote>
<p>指针的定义：数据类型	*指针变量名</p>
<p>32位操作系统指针所占内存空间：4个字节</p>
<p>64位操作系统指针所占内存空间：8个字节</p>
<h3 id="指针的两大类型"><a href="#指针的两大类型" class="headerlink" title="指针的两大类型"></a>指针的两大类型</h3><p>空指针：</p>
<ol>
<li>指针变量指向内存编号为0的空间</li>
<li><strong>空指针指向内存无法访问</strong>，0~255内存编号给系统占用的，无法访问</li>
<li>可用于给指针变量初始化</li>
</ol>
<p>野指针：指针变量指向非法空间，要尽量避免</p>
<h3 id="const与指针结合"><a href="#const与指针结合" class="headerlink" title="const与指针结合"></a>const与指针结合</h3><p>const修饰指针称为常量指针:<strong>指针指向的值不能变，指针的指向可以变</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//	常量指针：指针指向的值不能变，指针的指向可以变</span>
	<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
	<span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span>
	p<span class="token operator">=</span><span class="token operator">&amp;</span>b<span class="token punctuation">;</span><span class="token comment">//指针的指向可以改，由指向a修改为指向b </span>
<span class="token comment">//	*p=b; 指向的值不能改 </span>
	cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>p<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>const修饰常量称为指针常量：<strong>指针指向的值可以改，指针的指向不可以修改</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//	指针常量：指针指向的值可以改，指针的指向不可以修改</span>
	<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> <span class="token operator">*</span> <span class="token keyword">const</span> p<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
	<span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>p<span class="token operator">=</span>b<span class="token punctuation">;</span> <span class="token comment">//指向的值可以改</span>
<span class="token comment">//	p=&amp;b;//指针的指向不能改</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>p<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>const既修饰常量又修饰指针：指针的指向不能改，指针指向的值也不能改</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//	const既修饰常量又修饰指针：指针的指向不能改，指针指向的值也不能改</span>
	<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span> <span class="token keyword">const</span> p<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
	<span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span>
<span class="token comment">//	*p=b; //指向的值不可以改</span>
<span class="token comment">//	p=&amp;b;//指针的指向不能改</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>p<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="指针与数组"><a href="#指针与数组" class="headerlink" title="指针与数组"></a>指针与数组</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//	访问数组的第一种方式</span>
	<span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"利用指针访问数组元素:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> 
	p<span class="token operator">=</span>array<span class="token punctuation">;</span>
<span class="token comment">//	利用指针访问数组元素</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>p<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		p<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="指针与函数"><a href="#指针与函数" class="headerlink" title="指针与函数"></a>指针与函数</h3><p>值传递：不会改变实参的值</p>
<p>地址传递（引用传递）：会改变实参的值</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">swap2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//	指针函数</span>
<span class="token comment">//	值传递:不改变实参的值</span>
	<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"交换前:a:"</span><span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span><span class="token string">" b:"</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"交换后:a:"</span><span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span><span class="token string">" b:"</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token comment">//	引用传递：改变实参的值</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"交换前:a:"</span><span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span><span class="token string">" b:"</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token function">swap2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"交换后:a:"</span><span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span><span class="token string">" b:"</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> temp<span class="token punctuation">;</span>
	temp<span class="token operator">=</span>a<span class="token punctuation">;</span>
	a<span class="token operator">=</span>b<span class="token punctuation">;</span>
	b<span class="token operator">=</span>temp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">swap2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> temp<span class="token punctuation">;</span>
	temp<span class="token operator">=</span><span class="token operator">*</span>a<span class="token punctuation">;</span>
	<span class="token operator">*</span>a<span class="token operator">=</span><span class="token operator">*</span>b<span class="token punctuation">;</span>
	<span class="token operator">*</span>b<span class="token operator">=</span>temp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><blockquote>
<p>属于用户自定义的数据类型</p>
</blockquote>
<p>结构体定义语法：struct 结构体名 {结构体成员列表}；</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">people</span> <span class="token punctuation">&#123;</span>
	string name<span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
	<span class="token keyword">int</span> sex<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> p3<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>people p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//	1. struct 结构体名	变量名；</span>
	<span class="token keyword">struct</span> <span class="token class-name">people</span> p1<span class="token punctuation">;</span>
	p1<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"张三"</span><span class="token punctuation">;</span>
	p1<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>
	p1<span class="token punctuation">.</span>sex<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token function">display</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//	2. struct 结构体名	变量名=&#123;值1，值2&#125;；</span>
	<span class="token keyword">struct</span> <span class="token class-name">people</span> p2<span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token function">display</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//	3. 定义结构体时顺便创建变量；</span>
	p3<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"王五"</span><span class="token punctuation">;</span>
	p3<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">26</span><span class="token punctuation">;</span>
	p3<span class="token punctuation">.</span>sex<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
	<span class="token function">display</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>people p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"name:"</span><span class="token operator">&lt;&lt;</span>p<span class="token punctuation">.</span>name<span class="token operator">&lt;&lt;</span><span class="token string">" age:"</span><span class="token operator">&lt;&lt;</span>p<span class="token punctuation">.</span>age<span class="token operator">&lt;&lt;</span><span class="token string">" sex:"</span><span class="token operator">&lt;&lt;</span>p<span class="token punctuation">.</span>sex<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">people</span> <span class="token punctuation">&#123;</span>
	string name<span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//	结构体数组定义</span>
	people ps<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">&#123;</span>
		<span class="token punctuation">&#123;</span><span class="token string">"刘邦"</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span><span class="token string">"周瑜"</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">//	结构体遍历 </span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token string">"name:"</span><span class="token operator">&lt;&lt;</span>ps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token operator">&lt;&lt;</span><span class="token string">" age:"</span><span class="token operator">&lt;&lt;</span>ps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h3><p>作用：通过指针访问结构体中的成员</p>
<p>结构体变量通过.操作符访问，结构体指针通过-&gt;访问结构体成员</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">people</span> <span class="token punctuation">&#123;</span>
	string name<span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	people p1<span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	people <span class="token operator">*</span>p<span class="token operator">=</span><span class="token operator">&amp;</span>p1<span class="token punctuation">;</span>
<span class="token comment">//	利用结构体指针进行访问</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"name:"</span><span class="token operator">&lt;&lt;</span>p<span class="token operator">-></span>name<span class="token operator">&lt;&lt;</span><span class="token string">" age:"</span><span class="token operator">&lt;&lt;</span>p<span class="token operator">-></span>age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="内存四区"><a href="#内存四区" class="headerlink" title="内存四区"></a>内存四区</h2><h3 id="代码区"><a href="#代码区" class="headerlink" title="代码区"></a>代码区</h3><p>用途：存放<strong>函数体的二进制代码</strong>，由操作系统进行管理</p>
<p>代码区是共享的，共享是针对需要频繁执行的程序，只需要在内存中有一份代码即可</p>
<p>代码区是只读的，只读为了防止程序意外修改了指令</p>
<h3 id="栈区"><a href="#栈区" class="headerlink" title="栈区"></a>栈区</h3><p>用途：有编译器自动分配释放，存放<strong>函数的参数值、局部变量</strong>等</p>
<h3 id="堆区"><a href="#堆区" class="headerlink" title="堆区"></a>堆区</h3><p>用途：由程序员分配和释放，若程序员不分配释放，程序结束时由操作系统回收</p>
<p>使用new关键字进行内存申请，使用delete关键字进行内存释放，数组需要使用delete[]进行释放</p>
<h3 id="全局区"><a href="#全局区" class="headerlink" title="全局区"></a>全局区</h3><p>用途：存放<strong>全局变量、静态变量以及常量</strong></p>
<p>包含常量区、字符串常量和其他常量</p>
<p>包括<strong>全局变量、全局常量、静态变量和字符串常量</strong></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token comment">//	全局变量</span>
<span class="token keyword">int</span> g<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> h<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment">//	全局常量</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//	局部变量</span>
	<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"&amp;a="</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>a<span class="token operator">&lt;&lt;</span><span class="token string">" &amp;b="</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token comment">//	局部常量</span>
	<span class="token keyword">const</span> <span class="token keyword">int</span> c<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">int</span> d<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"&amp;c="</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>c<span class="token operator">&lt;&lt;</span><span class="token string">" &amp;d="</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>d<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token comment">//	静态变量</span>
	<span class="token keyword">static</span> <span class="token keyword">int</span> e<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">static</span> <span class="token keyword">int</span> f<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"&amp;e="</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>e<span class="token operator">&lt;&lt;</span><span class="token string">" &amp;f="</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>f<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"&amp;g="</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>g<span class="token operator">&lt;&lt;</span><span class="token string">" &amp;h="</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>h<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"&amp;i="</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" &amp;j="</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>j<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token comment">//	字符串常量</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"&amp;str="</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token string">"hello world"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="C-特点"><a href="#C-特点" class="headerlink" title="C++特点"></a>C++特点</h2><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><blockquote>
<p>给内存地址取别名，本质是指针常量</p>
</blockquote>
<p>基本语法：数据类型 &amp;别名&#x3D;原名</p>
<p>注意事项：引用必须初始化，一旦初始化不可更改</p>
<p>引用做函数参数：可以简化指针修改实参</p>
<p>引用做函数返回值：可以作为函数左值，但是不要返回局部变量的引用</p>
<p>常引用：可以防止形参改变实参，即变为只读状态</p>
<h3 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h3><p>函数默认参数：返回值类型	函数名（参数&#x3D;默认值）{}，如果某个参数有默认值那么从这个默认值开始从左向右都得有默认值；函数声明有默认值，那么实现就不能有默认值。</p>
<p>函数的占位参数：调用时必须传递实参。</p>
<p>函数重载：同一个作用域，函数名称相同，函数的参数类型不同或者个数不同或者顺序不同；返回值不作为函数重载的条件。</p>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>ex:设计圆类，通过半径求周长</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PI</span> <span class="token expression"><span class="token number">3.14</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token operator">:</span>
		<span class="token comment">//半径</span>
		<span class="token keyword">float</span> radius<span class="token punctuation">;</span>
		<span class="token keyword">float</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span>PI<span class="token operator">*</span>radius<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	Circle c<span class="token punctuation">;</span>
	c<span class="token punctuation">.</span>radius<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"圆的周长为："</span><span class="token operator">&lt;&lt;</span>c<span class="token punctuation">.</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>访问权限：</p>
<table>
<thead>
<tr>
<th>权限类型</th>
<th>类内</th>
<th>类外</th>
</tr>
</thead>
<tbody><tr>
<td>public</td>
<td>允许</td>
<td>允许</td>
</tr>
<tr>
<td>protected</td>
<td>允许</td>
<td>不允许</td>
</tr>
<tr>
<td>private</td>
<td>允许</td>
<td>不允许</td>
</tr>
</tbody></table>
<p>对于protected儿子可以访问父亲的保护内容</p>
<p>对于private儿子不可以访问父亲的保护内容</p>
<h3 id="对象特性"><a href="#对象特性" class="headerlink" title="对象特性"></a>对象特性</h3><blockquote>
<p>空对象占用1bit的内存空间，编译器会给每个空对象也分配一个字节，是为了区分空对象的位置</p>
</blockquote>
<h4 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h4><p>不提供构造函数和析构函数，编译器会默认提供空实现的构造函数和析构函数。</p>
<p>构造函数（进行初始化操作）：类名（）{}</p>
<p>构造函数的分类：</p>
<ol>
<li>有参构造和无参构造</li>
<li>普通构造和拷贝构造</li>
</ol>
<p>调用方法：</p>
<ol>
<li>括号法：调用无参构造函数时别带小括号，否则编译器会认为是函数的声明</li>
<li>显示法：不能用拷贝构造函数初始化匿名对象，编译器会默认忽视小括号，从而造成重定义</li>
<li>隐式法</li>
</ol>
<p>调用规则：</p>
<ol>
<li>如果用户自定义有参构造函数，C++就不再提供默认无参构造函数，但是会提供默认拷贝构造函数</li>
<li>如果用户自定义拷贝构造函数，C++不在提供其他构造函数</li>
</ol>
<p>析构函数（进行销毁操作）：~类名（）{}</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"无参构造函数调用"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">Man</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"有参构造函数调用"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">Man</span><span class="token punctuation">(</span><span class="token keyword">const</span> Man <span class="token operator">&amp;</span>m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>name<span class="token operator">=</span>m<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>age<span class="token operator">=</span>m<span class="token punctuation">.</span>age<span class="token punctuation">;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"拷贝构造函数调用"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token operator">~</span><span class="token function">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"析构函数调用"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token keyword">private</span><span class="token operator">:</span>
		string name<span class="token punctuation">;</span>
		<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">/**
		调用方式:
		括号法
		显示法
		隐式法
	*/</span>
<span class="token comment">//	方式一:括号法</span>
	Man m<span class="token punctuation">;</span>
	Man <span class="token function">m1</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Man <span class="token function">m2</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">/*注意：调用无参构造函数时别带小括号，这一点可Java有所不同，
			同时使用this->而不是this.*/</span>
<span class="token comment">//	方式二：显示法</span>
	Man m3<span class="token operator">=</span><span class="token function">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Man m4<span class="token operator">=</span><span class="token function">Man</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Man m5<span class="token operator">=</span><span class="token function">Man</span><span class="token punctuation">(</span>m4<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//	匿名对象</span>
	<span class="token function">Man</span><span class="token punctuation">(</span><span class="token string">"赵四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">/*不能用拷贝构造函数初始化匿名对象
	Man(m5)==Man m5,编译器会忽略小括号
	*/</span>
<span class="token comment">//	方式三：隐式法</span>
	Man m6<span class="token operator">=</span>m5<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>拷贝构造函数的作用：</p>
<ol>
<li>使用一个已经创建完毕的对象来初始化新对象</li>
<li>值传递的方式传参</li>
<li>值方式返回局部对象</li>
</ol>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"默认构造函数调用"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">People</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"有参构造函数调用"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">People</span><span class="token punctuation">(</span><span class="token keyword">const</span> People <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>name<span class="token operator">=</span>p<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>age<span class="token operator">=</span>p<span class="token punctuation">.</span>age<span class="token punctuation">;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"拷贝构造函数调用"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		string name<span class="token punctuation">;</span>
		<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>People p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>
People <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	People <span class="token function">p</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//	方式一：用一个已经创建好的对象来初始化新对象</span>
<span class="token comment">//	People p("张三",18);</span>
<span class="token comment">//	People p1(p);</span>
<span class="token comment">//	方式二：用于函数传参</span>
<span class="token comment">//	test(p);</span>
<span class="token comment">//	方式三：用于返回局部对象</span>
	People p1<span class="token operator">=</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"name:"</span><span class="token operator">&lt;&lt;</span>p1<span class="token punctuation">.</span>name<span class="token operator">&lt;&lt;</span><span class="token string">" age:"</span><span class="token operator">&lt;&lt;</span>p1<span class="token punctuation">.</span>age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h4><p>浅拷贝：简单的赋值操作，会导致内存重复释放</p>
<p>深拷贝：在堆区重新申请空间，进行拷贝操作</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"无参构造函数"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">People</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">,</span><span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>height<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"有参构造函数"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">People</span><span class="token punctuation">(</span><span class="token keyword">const</span> People <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>name<span class="token operator">=</span>p<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>age<span class="token operator">=</span>p<span class="token punctuation">.</span>age<span class="token punctuation">;</span>
<span class="token comment">//			this->height=p.height;//为了解决浅拷贝所带来的内存重复释放的问题，在拷贝时主动向堆区申请一块内存空间</span>
			<span class="token keyword">this</span><span class="token operator">-></span>height<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此语句解决浅拷贝所带的问题 </span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"拷贝构造函数"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token operator">~</span><span class="token function">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>height<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">delete</span> height<span class="token punctuation">;</span>
				height<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"析构函数调用"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		string name<span class="token punctuation">;</span><span class="token comment">//姓名</span>
		<span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment">//年龄</span>
		<span class="token keyword">int</span> <span class="token operator">*</span>height<span class="token punctuation">;</span><span class="token comment">//身高</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	People <span class="token function">p</span><span class="token punctuation">(</span><span class="token string">"张胜男"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">170</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"name:"</span><span class="token operator">&lt;&lt;</span>p<span class="token punctuation">.</span>name<span class="token operator">&lt;&lt;</span><span class="token string">" age:"</span><span class="token operator">&lt;&lt;</span>p<span class="token punctuation">.</span>age<span class="token operator">&lt;&lt;</span><span class="token string">" height:"</span><span class="token operator">&lt;&lt;</span><span class="token operator">*</span>p<span class="token punctuation">.</span>height<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	People <span class="token function">p1</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"name:"</span><span class="token operator">&lt;&lt;</span>p1<span class="token punctuation">.</span>name<span class="token operator">&lt;&lt;</span><span class="token string">" age:"</span><span class="token operator">&lt;&lt;</span>p1<span class="token punctuation">.</span>age<span class="token operator">&lt;&lt;</span><span class="token string">" height:"</span><span class="token operator">&lt;&lt;</span><span class="token operator">*</span>p1<span class="token punctuation">.</span>height<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> 
<span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">People</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span><span class="token keyword">int</span> sex<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">age</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">sex</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">int</span> age<span class="token punctuation">;</span>
		<span class="token keyword">int</span> sex<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	People <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h4><ul>
<li><p>静态成员变量</p>
<ul>
<li>所有对象共享一份数据</li>
<li>在编译阶段分配内存</li>
<li><code>类内声明，类外初始化</code></li>
</ul>
</li>
<li><p>静态成员函数：可以通过对象或类名访问</p>
<ul>
<li>所有对象共享同一个函数</li>
<li><code>静态成员函数只能访问静态成员变量</code>，不能访问非静态成员变量</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">People</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">int</span> age<span class="token punctuation">;</span>
		<span class="token keyword">static</span> <span class="token keyword">int</span> sex<span class="token punctuation">;</span>
		<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"性别是:"</span><span class="token operator">&lt;&lt;</span>sex<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">//  类外初始化</span>
<span class="token keyword">int</span> People<span class="token double-colon punctuation">::</span>sex<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//	方式一：对象名</span>
	People <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	p<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//	方式二：类名</span>
	<span class="token class-name">People</span><span class="token double-colon punctuation">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h4 id="this指针与空指针"><a href="#this指针与空指针" class="headerlink" title="this指针与空指针"></a>this指针与空指针</h4><p>this的用途：解决命名冲突和制造链式调用</p>
<p>空指针也能访问成员函数，需要加以判断保证代码的健壮性</p>
<h4 id="常函数和常对象"><a href="#常函数和常对象" class="headerlink" title="常函数和常对象"></a>常函数和常对象</h4><ol>
<li>常函数内不可以修改成员属性</li>
<li>成员属性加mutable后就可以修改属性</li>
</ol>
<p>常对象只能调用常函数</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">People</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span><span class="token keyword">int</span> sex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token operator">-</span>sex<span class="token operator">=</span>sex<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
<span class="token comment">//		常函数 ，加const后实际上修饰的是this，则this指向的内容也不可以改 </span>
		<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"age:"</span><span class="token operator">&lt;&lt;</span>age<span class="token operator">&lt;&lt;</span><span class="token string">" sex:"</span><span class="token operator">&lt;&lt;</span>sex<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">int</span> age<span class="token punctuation">;</span>
		<span class="token keyword">int</span> sex<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3><h4 id="全局函数做友元"><a href="#全局函数做友元" class="headerlink" title="全局函数做友元"></a>全局函数做友元</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//	告诉编译器goodBrother是People的友元函数，可以访问People的private变量</span>
		<span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token function">goodBrother</span><span class="token punctuation">(</span>People <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>sitroom<span class="token operator">=</span><span class="token string">"客厅"</span><span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>bedroom<span class="token operator">=</span><span class="token string">"卧室"</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		string sitroom<span class="token punctuation">;</span>
	<span class="token keyword">private</span><span class="token operator">:</span>
		string bedroom<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">goodBrother</span><span class="token punctuation">(</span>People <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"好兄弟正在进入你的"</span><span class="token operator">&lt;&lt;</span>p<span class="token punctuation">.</span>sitroom<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"好兄弟正在进入你的"</span><span class="token operator">&lt;&lt;</span>p<span class="token punctuation">.</span>bedroom<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	People p<span class="token punctuation">;</span>
	<span class="token function">goodBrother</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="友元类"><a href="#友元类" class="headerlink" title="友元类"></a>友元类</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Brother</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//		声明People是Brother的友元类</span>
		<span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">Brother</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			wc<span class="token operator">=</span><span class="token string">"厕所"</span><span class="token punctuation">;</span>
			bathroom<span class="token operator">=</span><span class="token string">"浴室"</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		string wc<span class="token punctuation">;</span>
	<span class="token keyword">private</span><span class="token operator">:</span>
		string bathroom<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			sittingroom<span class="token operator">=</span><span class="token string">"客厅"</span><span class="token punctuation">;</span>
			bedroom<span class="token operator">=</span><span class="token string">"卧室"</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		string sittingroom<span class="token punctuation">;</span>
		<span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>Brother <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"正在访问好兄弟的"</span><span class="token operator">&lt;&lt;</span>b<span class="token punctuation">.</span>bathroom<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token keyword">private</span><span class="token operator">:</span>
		string bedroom<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	Brother b<span class="token punctuation">;</span>
	People p<span class="token punctuation">;</span>
	p<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="成员函数做友元"><a href="#成员函数做友元" class="headerlink" title="成员函数做友元"></a>成员函数做友元</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span>
<span class="token comment">//成员函数做友元</span>
<span class="token keyword">class</span> <span class="token class-name">Building</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">GoodGay</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">GoodGay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">GoodGay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 让 visit 访问Building中的私有函数</span>
    <span class="token keyword">void</span> <span class="token function">visit2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 让 visit2 不可以访问Building中的私有函数</span>
    Building <span class="token operator">*</span>building<span class="token punctuation">;</span><span class="token comment">//指向对象的指针，在构造函数中要初始化指针</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Building</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//GoodGay类下的visit成员函数作为本类的好朋友，可以访问私有成员变量</span>
    <span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token class-name">GoodGay</span><span class="token double-colon punctuation">::</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    string m_SittingRoom<span class="token punctuation">;</span>
    <span class="token function">Building</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    string m_BedRoom<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token class-name">Building</span><span class="token double-colon punctuation">::</span><span class="token function">Building</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    m_SittingRoom <span class="token operator">=</span> <span class="token string">"客厅"</span><span class="token punctuation">;</span>
    m_BedRoom <span class="token operator">=</span> <span class="token string">"卧室"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">GoodGay</span><span class="token double-colon punctuation">::</span><span class="token function">GoodGay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//创建一个建筑物的对象</span>
    <span class="token comment">//用new再堆区中申请一片空间返回的是一个指针，用building来接受这个指针，完成building初始化</span>
    building <span class="token operator">=</span> <span class="token keyword">new</span> Building<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>
<span class="token class-name">GoodGay</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">GoodGay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">delete</span> building<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token class-name">GoodGay</span><span class="token double-colon punctuation">::</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"visit函数: Public "</span> <span class="token operator">&lt;&lt;</span> building<span class="token operator">-></span>m_SittingRoom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"visit函数: Private "</span> <span class="token operator">&lt;&lt;</span> building<span class="token operator">-></span>m_BedRoom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token class-name">GoodGay</span><span class="token double-colon punctuation">::</span><span class="token function">visit2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"visit2函数: Public "</span> <span class="token operator">&lt;&lt;</span> building<span class="token operator">-></span>m_SittingRoom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token comment">//visit2函数不是Building的友元函数，不能访问其私有变量m_BedRoom</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    GoodGay gg<span class="token punctuation">;</span>
    gg<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    gg<span class="token punctuation">.</span><span class="token function">visit2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><h4 id="加号运算符重载"><a href="#加号运算符重载" class="headerlink" title="加号运算符重载"></a>加号运算符重载</h4><p>成员函数重载+运算符和全局函数重载+运算符</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token comment">//	加号运算符重载</span>
<span class="token keyword">class</span> <span class="token class-name">Number</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>num<span class="token operator">=</span>n<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
<span class="token comment">//		成员函数重载+</span>
<span class="token comment">//		Number operator+(Number &amp;n) &#123;</span>
<span class="token comment">//			Number temp;</span>
<span class="token comment">//			temp.num=this->num+n.num;</span>
<span class="token comment">//			return temp;</span>
<span class="token comment">//		&#125;</span>
		<span class="token keyword">int</span> num<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">//	全局函数重载+</span>
Number <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span>Number <span class="token operator">&amp;</span>n1<span class="token punctuation">,</span>Number <span class="token operator">&amp;</span>n2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	Number n3<span class="token punctuation">;</span>
	n3<span class="token punctuation">.</span>num<span class="token operator">=</span> n1<span class="token punctuation">.</span>num<span class="token operator">+</span>n2<span class="token punctuation">.</span>num<span class="token punctuation">;</span>
	<span class="token keyword">return</span> n3<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	Number <span class="token function">n</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Number <span class="token function">n1</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Number n2<span class="token operator">=</span>n<span class="token operator">+</span>n1<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span>n2<span class="token punctuation">.</span>num<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="左移运算符重载"><a href="#左移运算符重载" class="headerlink" title="左移运算符重载"></a>左移运算符重载</h4><p>只能利用全局函数重载左移运算符</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token comment">//左移运算符重载&lt;&lt;</span>
<span class="token keyword">class</span> <span class="token class-name">Number</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//	如果数据私有可以使用友元</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>num<span class="token operator">=</span>n<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">int</span> num<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">//	全局函数重载&lt;&lt;运算符</span>
ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>cout<span class="token punctuation">,</span>Number <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	cout<span class="token operator">&lt;&lt;</span>n<span class="token punctuation">.</span>num<span class="token punctuation">;</span>
	<span class="token keyword">return</span> cout<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	Number <span class="token function">n1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span>n1<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="递增运算符重载"><a href="#递增运算符重载" class="headerlink" title="递增运算符重载"></a>递增运算符重载</h4><p>前置++运算符重载</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
class Number &#123;
	public :
		Number() &#123;

		&#125;
		Number(int num) &#123;
			this-&gt;num&#x3D;num;
		&#125;
		int num;
&#x2F;&#x2F;		前置++重载
		Number&amp; operator++() &#123;
			++num;
			return *this;
		&#125;
&#125;;
ostream&amp; operator&lt;&lt;(ostream &amp;cout,Number n) &#123;
	cout&lt;&lt;n.num;
	return cout;
&#125;
int main(int argc, char** argv) &#123;
	Number n(10);
	cout&lt;&lt;++(++n)&lt;&lt;endl;
	cout&lt;&lt;n&lt;&lt;endl;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>后置++运算符重载</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Number</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">friend</span> ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>cout<span class="token punctuation">,</span>Number n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token operator">:</span>
		<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

		<span class="token punctuation">&#125;</span>
		<span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>num<span class="token operator">=</span>num<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
<span class="token comment">//		前置++重载</span>
		Number<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token operator">++</span>num<span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
<span class="token comment">//		后置 ++重载</span>
		Number <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			Number temp<span class="token operator">=</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
			num<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> temp<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">int</span> num<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>cout<span class="token punctuation">,</span>Number n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	cout<span class="token operator">&lt;&lt;</span>n<span class="token punctuation">.</span>num<span class="token punctuation">;</span>
	<span class="token keyword">return</span> cout<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	Number <span class="token function">n</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span>n<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="赋值运算符重载"><a href="#赋值运算符重载" class="headerlink" title="赋值运算符重载"></a>赋值运算符重载</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">People</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			p_age<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token operator">~</span><span class="token function">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>p_age<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">delete</span> p_age<span class="token punctuation">;</span>
				p_age<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
<span class="token comment">//		=运算符重载</span>
		People<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>People <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//			如果自身有内存先释放干净</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>p_age<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">delete</span> p_age<span class="token punctuation">;</span>
				p_age<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>p_age<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">.</span>p_age<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">int</span> <span class="token operator">*</span>p_age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	People <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	People <span class="token function">p2</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	p2<span class="token operator">=</span>p1<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"age:"</span><span class="token operator">&lt;&lt;</span><span class="token operator">*</span>p2<span class="token punctuation">.</span>p_age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="关系运算符重载"><a href="#关系运算符重载" class="headerlink" title="关系运算符重载"></a>关系运算符重载</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

		<span class="token punctuation">&#125;</span>
		<span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
<span class="token comment">//	关系运算符重载</span>
		<span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span>Person <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token operator">==</span><span class="token keyword">this</span><span class="token operator">-></span>age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>cout<span class="token punctuation">,</span>Person <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	cout<span class="token operator">&lt;&lt;</span>p<span class="token punctuation">.</span>age<span class="token punctuation">;</span>
	<span class="token keyword">return</span> cout<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	Person <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span>p1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token string">"相等"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="函数调用运算符重载"><a href="#函数调用运算符重载" class="headerlink" title="函数调用运算符重载"></a>函数调用运算符重载</h4><p>又称为仿函数，写法很灵活</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Print</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>string valueString<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span>valueString<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	Print print<span class="token punctuation">;</span>
	<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>用处：去重，减少冗余</p>
<blockquote>
<p>语法:class 派生类：继承方式 	父类</p>
</blockquote>
<p>三种继承方式：（父类中的私有属性，子类无论哪种继承都访问不到）</p>
<ol>
<li>公共继承：父类的public和protected属性保持不变，私有属性访问不到</li>
<li>保护继承：父类的public和protected属性变为子类的protected属性，私有属性访问不到</li>
<li>私有继承：父类的public和protected属性变为子类的private属性，私有属性访问不到</li>
</ol>
<p><strong>父类中所有的非静态成员属性都会被子类继承下去，只是私有属性被编译器隐藏了，所以访问不到</strong></p>
<p>查看对象模型：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cl /dl reportSingleClassLayout类名 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="继承中的构造和析构的顺序"><a href="#继承中的构造和析构的顺序" class="headerlink" title="继承中的构造和析构的顺序"></a>继承中的构造和析构的顺序</h4><p>析构顺序与构造顺序相反</p>
<p>父类构造-&gt;子类构造-&gt;子类析构-&gt;父类析构</p>
<h4 id="子类继承访问同名成员的处理"><a href="#子类继承访问同名成员的处理" class="headerlink" title="子类继承访问同名成员的处理"></a>子类继承访问同名成员的处理</h4><ol>
<li>访问子类同名成员，直接访问即可</li>
<li>访问父类同名成员，加作用域即可</li>
<li>子类出现和父类同名的成员，子类会隐藏父类所有的同名成员函数</li>
</ol>
<h4 id="子类继承访问静态成员的处理"><a href="#子类继承访问静态成员的处理" class="headerlink" title="子类继承访问静态成员的处理"></a>子类继承访问静态成员的处理</h4><p>两种访问方式：对象名和类名</p>
<ol>
<li>访问子类同名成员，直接访问即可</li>
<li>访问父类同名成员，加作用域即可</li>
<li>子类出现和父类同名的静态成员，子类会隐藏父类所有的同名静态成员函数</li>
</ol>
<h4 id="多继承（不建议使用）"><a href="#多继承（不建议使用）" class="headerlink" title="多继承（不建议使用）"></a>多继承（不建议使用）</h4><blockquote>
<p>语法：class	子类：继承方式	父类1，继承方式	父类2</p>
</blockquote>
<h4 id="菱形继承"><a href="#菱形继承" class="headerlink" title="菱形继承"></a>菱形继承</h4><p>概念：两个类继承一个基类，又有一个类继承这两个派生类</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token comment">//动物类</span>
<span class="token comment">//通过使用virtual关键字解决菱形继承问题</span>
<span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">//羊类</span>
<span class="token keyword">class</span> <span class="token class-name">Sheep</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">Animal</span></span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">//驼类</span>
<span class="token keyword">class</span> <span class="token class-name">Tuo</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">Animal</span></span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">//羊驼类</span>
<span class="token keyword">class</span> <span class="token class-name">SheepTuo</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Sheep</span><span class="token punctuation">,</span><span class="token keyword">public</span> <span class="token class-name">Tuo</span></span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	SheepTuo st<span class="token punctuation">;</span>
	st<span class="token punctuation">.</span>Tuo<span class="token double-colon punctuation">::</span>age<span class="token operator">=</span><span class="token number">28</span><span class="token punctuation">;</span>
	st<span class="token punctuation">.</span>Sheep<span class="token double-colon punctuation">::</span>age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"st.Sheep::age:"</span><span class="token operator">&lt;&lt;</span>st<span class="token punctuation">.</span>Sheep<span class="token double-colon punctuation">::</span>age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"st.Tuo::age:"</span><span class="token operator">&lt;&lt;</span>st<span class="token punctuation">.</span>Tuo<span class="token double-colon punctuation">::</span>age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"st.age:"</span><span class="token operator">&lt;&lt;</span>st<span class="token punctuation">.</span>age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ol>
<li>静态多态：函数重载和运算符重载，编译阶段确定函数地址，地址早绑定</li>
<li>动态多态：派生类和虚函数，运行阶段确定函数地址，地址晚绑定</li>
</ol>
<h4 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
<span class="token comment">//		此刻地址早绑定</span>
<span class="token comment">//		void speak() &#123;</span>
<span class="token comment">//			cout&lt;&lt;"动物在说话"&lt;&lt;endl;</span>
<span class="token comment">//		&#125;</span>
<span class="token comment">//		加virtual变成虚函数地址晚绑定</span>
		<span class="token keyword">virtual</span>	<span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"动物在说话"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Animal</span></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token operator">:</span>
		<span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"喵喵~~"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Animal</span></span>  <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token operator">:</span>
		<span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"汪汪~~"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	Cat cat<span class="token punctuation">;</span>
	Dog dog<span class="token punctuation">;</span>
<span class="token comment">//	Animal &amp;animal=cat;</span>
	Animal <span class="token operator">&amp;</span>animal<span class="token operator">=</span>dog<span class="token punctuation">;</span>
	animal<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="纯虚函数和抽象类"><a href="#纯虚函数和抽象类" class="headerlink" title="纯虚函数和抽象类"></a>纯虚函数和抽象类</h4><p>有纯虚函数的类称为抽象类</p>
<p>语法：virtual 返回值类型	函数名（参数列表）&#x3D;0；</p>
<p>抽象类特点：</p>
<ol>
<li>无法实例化</li>
<li>子类必须重写抽象类的纯虚函数，否则子类也属于抽象类</li>
</ol>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
<span class="token comment">//		变成纯虚函数 </span>
		<span class="token keyword">virtual</span>	<span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Animal</span></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token operator">:</span>
		<span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"喵喵~~"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Animal</span></span>  <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token operator">:</span>
		<span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"汪汪~~"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	Cat cat<span class="token punctuation">;</span>
	Dog dog<span class="token punctuation">;</span>
<span class="token comment">//	Animal &amp;animal=cat;</span>
	Animal <span class="token operator">&amp;</span>animal<span class="token operator">=</span>dog<span class="token punctuation">;</span>
	animal<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="虚析构和纯虚析构"><a href="#虚析构和纯虚析构" class="headerlink" title="虚析构和纯虚析构"></a>虚析构和纯虚析构</h4><p>有纯虚析构的类也称为抽象类</p>
<blockquote>
<p>用处：如果子类属性开辟到堆区，那么父类指针在释放时无法调用子类的析构代码</p>
</blockquote>
<p>虚析构语法：virtual ~类名（）{}</p>
<p>纯虚析构：virtual ~类名（）&#x3D;0；必须要有具体实现</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"Animal构造函数调用"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
<span class="token comment">//		利用虚析构</span>
<span class="token comment">//		virtual ~Animal() &#123;</span>
<span class="token comment">//			cout&lt;&lt;"Animal析构函数调用"&lt;&lt;endl;</span>
<span class="token comment">//		&#125;</span>
<span class="token comment">//		利用纯虚析构</span>
		<span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Animal</span></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token operator">:</span>
		<span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"Cat构造函数调用"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">Cat</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>name<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">string</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"Cat有参构造函数调用"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token operator">~</span><span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">delete</span> name<span class="token punctuation">;</span>
				name<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"Cat析构函数调用"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		string <span class="token operator">*</span>name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token class-name">Animal</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"Animal析构函数调用"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	Animal <span class="token operator">*</span>animal<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token string">"小白"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">delete</span> animal<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="C-泛型编程"><a href="#C-泛型编程" class="headerlink" title="C++泛型编程"></a>C++泛型编程</h2><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><blockquote>
<p>用途：提高复用性</p>
</blockquote>
<h4 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h4><p>语法：template<typename t>，typename可以用class代替</typename></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token comment">//利用模板</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>a<span class="token punctuation">,</span>T <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	T temp<span class="token punctuation">;</span>
	temp<span class="token operator">=</span>a<span class="token punctuation">;</span>
	a<span class="token operator">=</span>b<span class="token punctuation">;</span>
	b<span class="token operator">=</span>temp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>
	<span class="token keyword">float</span> c<span class="token operator">=</span><span class="token number">10.9</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token number">10.6</span><span class="token punctuation">;</span>
	<span class="token function">Swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span><span class="token string">" ,"</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token function">Swap</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span>c<span class="token operator">&lt;&lt;</span><span class="token string">" ,"</span><span class="token operator">&lt;&lt;</span>d<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="普通函数与模板函数的区别"><a href="#普通函数与模板函数的区别" class="headerlink" title="普通函数与模板函数的区别"></a>普通函数与模板函数的区别</h5><ul>
<li>普通函数可以自动类型转换</li>
<li>函数模板如果使用自动类型，不会发生自动类型转换</li>
<li>函数模板如果使用指定类型，会发生自动类型转换</li>
</ul>
<h5 id="普通函数与模板函数的调用规则"><a href="#普通函数与模板函数的调用规则" class="headerlink" title="普通函数与模板函数的调用规则"></a>普通函数与模板函数的调用规则</h5><ol>
<li>函数模板和普通函数都可以，优先调用普通函数</li>
<li>可以通过空模板参数列表来强制调用函数模板</li>
<li>函数模板也可以重载</li>
<li>如果函数模板能更好匹配，优先调用函数模板</li>
</ol>
<h5 id="模板的局限性"><a href="#模板的局限性" class="headerlink" title="模板的局限性"></a>模板的局限性</h5><p>对于数组和对象来说，可以使用template&lt;&gt;重写一个模板具体实现</p>
<h4 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">NameType</span><span class="token punctuation">,</span><span class="token keyword">class</span> <span class="token class-name">AgeType</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">People</span><span class="token punctuation">(</span>NameType name<span class="token punctuation">,</span>AgeType age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		NameType name<span class="token punctuation">;</span>
		AgeType age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	People<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span>p<span class="token punctuation">.</span>name<span class="token operator">&lt;&lt;</span>p<span class="token punctuation">.</span>age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="类模板的成员函数的创建时机"><a href="#类模板的成员函数的创建时机" class="headerlink" title="类模板的成员函数的创建时机"></a>类模板的成员函数的创建时机</h5><p>类模板中成员函数只在调用时才去创建</p>
<h5 id="类模板对象做函数参数"><a href="#类模板对象做函数参数" class="headerlink" title="类模板对象做函数参数"></a>类模板对象做函数参数</h5><p>传入方式</p>
<ol>
<li>指定传入方式</li>
<li>参数模板化</li>
<li>整个类模板化</li>
</ol>
<h5 id="类模板继承"><a href="#类模板继承" class="headerlink" title="类模板继承"></a>类模板继承</h5><ol>
<li>当子类继承父类是一个类模板时，子类在声明时，要指出父类中的数据类型</li>
<li>不指定，编译器无法给子类分配内存</li>
<li>如果要灵活支出父类中的数据类型，子类也要变成类模板</li>
</ol>
<h3 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h3><blockquote>
<p>查阅API即可，深入理解阅读《STL源码剖析》</p>
</blockquote>
<h4 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h4><h5 id="String"><a href="#String" class="headerlink" title="String"></a>String</h5><blockquote>
<p>string本质上是一个类，内部封装了char *,是一个char *的容器</p>
</blockquote>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	string str<span class="token operator">=</span><span class="token string">"hello"</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>ch<span class="token operator">=</span><span class="token string">"china"</span><span class="token punctuation">;</span>
	string  <span class="token function">str1</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
	string <span class="token function">str2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	str<span class="token operator">+=</span><span class="token string">"world"</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span>str<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>str1<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>str2<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h5><blockquote>
<p>功能：类似数组，又称为单端数组，可以动态扩展（找更大的内存空间，将数据拷贝，释放原空间）</p>
</blockquote>
<h6 id="vector存放内置数据类型"><a href="#vector存放内置数据类型" class="headerlink" title="vector存放内置数据类型"></a>vector存放内置数据类型</h6><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	cout<span class="token operator">&lt;&lt;</span>value<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//	vector容器，类似于数组</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itBegin<span class="token operator">=</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//起始迭代器，指向容器中第一个元素</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itEnd<span class="token operator">=</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结束迭代器，指向容器中最后一个元素的下一个位置</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"while循环遍历"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>itBegin<span class="token operator">!=</span>itEnd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>itBegin<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		itBegin<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"for循环遍历"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">!=</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"stl遍历算法"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>print<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h6 id="vector存放自定义数据类型"><a href="#vector存放自定义数据类型" class="headerlink" title="vector存放自定义数据类型"></a>vector存放自定义数据类型</h6><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span><span class="token operator">:</span>
		<span class="token function">People</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token operator">-></span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		string name<span class="token punctuation">;</span>
		<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	People <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"李白"</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	People <span class="token function">p2</span><span class="token punctuation">(</span><span class="token string">"达摩"</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	People <span class="token function">p3</span><span class="token punctuation">(</span><span class="token string">"王昭君"</span><span class="token punctuation">,</span><span class="token number">900</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	People <span class="token function">p4</span><span class="token punctuation">(</span><span class="token string">"公孙离"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	People <span class="token function">p5</span><span class="token punctuation">(</span><span class="token string">"赵云"</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	vector<span class="token operator">&lt;</span>People<span class="token operator">></span> v<span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>
	vector<span class="token operator">&lt;</span>People<span class="token operator">*</span><span class="token operator">></span> v1<span class="token punctuation">;</span>
	v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>People<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">!=</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token string">"姓名:"</span><span class="token operator">&lt;&lt;</span>it<span class="token operator">-></span>name<span class="token operator">&lt;&lt;</span><span class="token string">" 年龄："</span><span class="token operator">&lt;&lt;</span>it<span class="token operator">-></span>age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"遍历自定义数据类型指针"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>People<span class="token operator">*</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">!=</span>v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token string">"姓名:"</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token operator">-></span>name<span class="token operator">&lt;&lt;</span><span class="token string">" 年龄："</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token operator">-></span>age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h6 id="vector容器嵌套"><a href="#vector容器嵌套" class="headerlink" title="vector容器嵌套"></a>vector容器嵌套</h6><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token comment">//vector容器嵌套</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> v<span class="token punctuation">;</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">;</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v2<span class="token punctuation">;</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v3<span class="token punctuation">;</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v4<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		v2<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		v3<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		v4<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">!=</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator vit<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> vit<span class="token operator">!=</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> vit<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>vit<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h6 id="vector容器插入和删除"><a href="#vector容器插入和删除" class="headerlink" title="vector容器插入和删除"></a>vector容器插入和删除</h6><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">!=</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h5><p>双端数组，可以对头端进行插入和删除</p>
<h5 id="Stack（栈）：没啥可说的"><a href="#Stack（栈）：没啥可说的" class="headerlink" title="Stack（栈）：没啥可说的"></a>Stack（栈）：没啥可说的</h5><h5 id="Queue（队列）：没啥可说的"><a href="#Queue（队列）：没啥可说的" class="headerlink" title="Queue（队列）：没啥可说的"></a>Queue（队列）：没啥可说的</h5><h5 id="List"><a href="#List" class="headerlink" title="List"></a>List</h5><p>注意：list不支持随机存取，所以没有[]和at的访问方式</p>
<h5 id="Set和Multiser"><a href="#Set和Multiser" class="headerlink" title="Set和Multiser"></a>Set和Multiser</h5><p>set结构会自动排序，底层是二叉树</p>
<ul>
<li>set中不允许有重复的值</li>
<li>multiset允许有重复的值</li>
</ul>
<h5 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h5><p>map中所以元素都是pair,底层为二叉树，可以根据key快速找到value</p>
<ul>
<li>map中不允许有重复key值元素</li>
<li>multimap中允许有重复key值元素</li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>编程语言</tag>
      </tags>
  </entry>
</search>
